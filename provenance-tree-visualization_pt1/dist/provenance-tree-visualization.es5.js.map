{"version":3,"file":"provenance-tree-visualization.es5.js","sources":["../../provenance-core/src/utils.ts","../../provenance-core/src/mitt.ts","../../provenance-core/src/ProvenanceGraph.ts","../../provenance-core/src/ProvenanceGraphTraverser.ts","../../provenance-core/src/ProvenanceSlide.ts","../../provenance-core/src/ProvenanceSlidedeck.ts","../../provenance-core/src/ProvenanceSlidedeckPlayer.ts","../../provenance-core/src/SlideAnnotation.ts","../src/gratzl.ts","../src/provenance-tree-visualization.ts"],"sourcesContent":["import { ProvenanceNode, StateNode, Action, ReversibleAction } from './api';\r\n\r\nexport function generateUUID(): string {\r\n  // Public Domain/MIT\r\n  let d = new Date().getTime();\r\n  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\r\n    d += performance.now(); // use high-precision timer if available\r\n  }\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const r = ((d + Math.random() * 16) % 16) | 0;\r\n    d = Math.floor(d / 16);\r\n    // tslint:disable-next-line:no-bitwise\r\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n  });\r\n}\r\n\r\n/**\r\n * Generate a Unix timestamp in milliseconds\r\n *\r\n * @returns {number} in milliseconds\r\n */\r\nexport function generateTimestamp(): number {\r\n  // Removed, because performance.now() returns a floating point number, which is not compatible with the Date.getTime() integer\r\n  // if (\r\n  //   window.performance &&\r\n  //   window.performance.now &&\r\n  //   window.performance.timing &&\r\n  //   window.performance.timing.navigationStart\r\n  // ) {\r\n  //   return window.performance.now();\r\n  // }\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function isStateNode(node: ProvenanceNode): node is StateNode {\r\n  return 'parent' in node;\r\n}\r\n\r\nexport function isReversibleAction(action: Action): action is ReversibleAction {\r\n  return 'undo' in action;\r\n}\r\n","import { Handler } from './api';\r\n\r\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\r\n *  @name mitt\r\n *  @returns {Mitt}\r\n */\r\n\r\nexport default function mitt(all?: any) {\r\n  all = all || Object.create(null);\r\n\r\n  return {\r\n    /**\r\n     * Register an event handler for the given type.\r\n     *\r\n     * @param  {String} type\tType of event to listen for\r\n     * @param  {Function} handler Function to call in response to given event\r\n     * @memberOf mitt\r\n     */\r\n    on(type: string, handler: Handler) {\r\n      (all[type] || (all[type] = [])).push(handler);\r\n    },\r\n\r\n    /**\r\n     * Remove an event handler for the given type.\r\n     *\r\n     * @param  {String} type\tType of event to unregister `handler` from\r\n     * @param  {Function} handler Handler function to remove\r\n     * @memberOf mitt\r\n     */\r\n    off(type: string, handler: Handler) {\r\n      if (all[type]) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        all[type].splice(all[type].indexOf(handler) >>> 0, 1);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Invoke all handlers for the given type.\r\n     *\r\n     * @param {String} type  The event type to invoke\r\n     * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\r\n     * @memberOf mitt\r\n     */\r\n    emit(type: string, evt: any) {\r\n      (all[type] || []).slice().map((handler: Handler) => {\r\n        handler(evt);\r\n      });\r\n    }\r\n  };\r\n}\r\n","import {\r\n  Application,\r\n  Handler,\r\n  IProvenanceGraph,\r\n  NodeIdentifier,\r\n  ProvenanceNode,\r\n  RootNode,\r\n  SerializedProvenanceGraph,\r\n  SerializedProvenanceNode,\r\n  SerializedStateNode\r\n} from './api';\r\nimport { generateTimestamp, generateUUID, isStateNode } from './utils';\r\nimport mitt from './mitt';\r\n\r\n/**\r\n * Provenance Graph implementation\r\n *\r\n * @param version The version of the software to track the provenance of\r\n *\r\n */\r\nexport class ProvenanceGraph implements IProvenanceGraph {\r\n  public application: Application;\r\n  public readonly root: RootNode;\r\n  private _current: ProvenanceNode;\r\n  private _mitt: any;\r\n  private _nodes: { [key: string]: ProvenanceNode } = {};\r\n\r\n  constructor(application: Application, userid: string = 'Unknown', rootNode?: RootNode) {\r\n    this._mitt = mitt();\r\n    this.application = application;\r\n\r\n    if (rootNode) {\r\n      this.root = rootNode;\r\n    } else {\r\n      this.root = {\r\n        id: generateUUID(),\r\n        label: 'Root',\r\n        metadata: {\r\n          createdBy: userid,\r\n          createdOn: generateTimestamp()\r\n        },\r\n        children: [],\r\n        artifacts: {}\r\n      } as RootNode;\r\n    }\r\n    this.addNode(this.root);\r\n    this._current = this.root;\r\n  }\r\n\r\n  addNode(node: ProvenanceNode): void {\r\n    if (this._nodes[node.id]) {\r\n      throw new Error('Node already added');\r\n    }\r\n    this._nodes[node.id] = node;\r\n    this._mitt.emit('nodeAdded', node);\r\n  }\r\n\r\n  getNode(id: NodeIdentifier): ProvenanceNode {\r\n    const result = this._nodes[id];\r\n    if (!result) {\r\n      throw new Error('Node id not found');\r\n    }\r\n    return this._nodes[id];\r\n  }\r\n\r\n  get current(): ProvenanceNode {\r\n    return this._current;\r\n  }\r\n\r\n  set current(node: ProvenanceNode) {\r\n    if (!this._nodes[node.id]) {\r\n      throw new Error('Node id not found');\r\n    }\r\n    this._current = node;\r\n    this._mitt.emit('currentChanged', node);\r\n  }\r\n\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n\r\n  emitNodeChangedEvent(node: ProvenanceNode) {\r\n    /* istanbul ignore if */\r\n    if (!this._nodes[node.id]) {\r\n      throw new Error('Node id not found');\r\n    }\r\n    this._mitt.emit('nodeChanged', node);\r\n  }\r\n\r\n  on(type: string, handler: Handler) {\r\n    this._mitt.on(type, handler);\r\n  }\r\n\r\n  off(type: string, handler: Handler) {\r\n    this._mitt.off(type, handler);\r\n  }\r\n}\r\n\r\n/* Beware that deeply nested properties in serializedProvenanceGraph is mutated in the process */\r\nexport function restoreProvenanceGraph(\r\n  serializedProvenanceGraph: SerializedProvenanceGraph\r\n): ProvenanceGraph {\r\n  const nodes: { [key: string]: any } = {};\r\n\r\n  // restore nodes as key value\r\n  for (const node of serializedProvenanceGraph.nodes) {\r\n    nodes[node.id] = { ...node };\r\n  }\r\n\r\n  // restore parent/children relations\r\n  for (const nodeId of Object.keys(nodes)) {\r\n    const node = nodes[nodeId];\r\n    node.children = node.children.map((id: string) => nodes[id]);\r\n    if ('parent' in node) {\r\n      node.parent = nodes[node.parent];\r\n    }\r\n  }\r\n\r\n  const graph = new ProvenanceGraph(serializedProvenanceGraph.application);\r\n  (graph as any)._nodes = nodes;\r\n  (graph as any)._current = nodes[serializedProvenanceGraph.current];\r\n  (graph as any).root = nodes[serializedProvenanceGraph.root];\r\n\r\n  return graph;\r\n}\r\n\r\nexport function serializeProvenanceGraph(graph: ProvenanceGraph): SerializedProvenanceGraph {\r\n  const nodes = Object.keys(graph.nodes).map(nodeId => {\r\n    const node = graph.getNode(nodeId);\r\n    const serializedNode: SerializedProvenanceNode = { ...node } as any;\r\n    if (isStateNode(node)) {\r\n      (serializedNode as SerializedStateNode).parent = node.parent.id;\r\n    }\r\n    serializedNode.children = node.children.map(child => child.id);\r\n    return serializedNode;\r\n  });\r\n\r\n  return {\r\n    nodes,\r\n    root: graph.root.id,\r\n    application: graph.application,\r\n    current: graph.current.id\r\n  };\r\n}\r\n","import {\r\n  IProvenanceGraphTraverser,\r\n  ProvenanceNode,\r\n  StateNode,\r\n  IActionFunctionRegistry,\r\n  IProvenanceGraph,\r\n  NodeIdentifier,\r\n  ActionFunctionWithThis,\r\n  IProvenanceTracker,\r\n  Handler\r\n} from './api';\r\nimport { isReversibleAction, isStateNode } from './utils';\r\nimport mitt from './mitt';\r\n\r\nfunction isNextNodeInTrackUp(currentNode: ProvenanceNode, nextNode: ProvenanceNode): boolean {\r\n  if (isStateNode(currentNode) && currentNode.parent === nextNode) {\r\n    return true;\r\n  } else if (isStateNode(nextNode) && nextNode.parent !== currentNode) {\r\n    // This is a guard against the illegitimate use of this function for unconnected nodes\r\n    /* istanbul ignore next */\r\n    throw new Error('Unconnected nodes, you probably should not be using this function');\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction findPathToTargetNode(\r\n  currentNode: ProvenanceNode,\r\n  targetNode: ProvenanceNode,\r\n  track: ProvenanceNode[],\r\n  comingFromNode: ProvenanceNode = currentNode\r\n): boolean {\r\n  if (currentNode && currentNode === targetNode) {\r\n    track.unshift(currentNode);\r\n    return true;\r\n  } else if (currentNode) {\r\n    // Map the StateNodes in the children StateEdges\r\n    const nodesToCheck: ProvenanceNode[] = [...currentNode.children];\r\n\r\n    // Add the parent node to that same list\r\n    /* istanbul ignore else */\r\n    if (isStateNode(currentNode)) {\r\n      nodesToCheck.push(currentNode.parent);\r\n    }\r\n\r\n    for (const node of nodesToCheck) {\r\n      // If the node to check is in the track already, skip it.\r\n      if (node === comingFromNode) {\r\n        continue;\r\n      }\r\n      /* istanbul ignore else */\r\n      if (findPathToTargetNode(node, targetNode, track, currentNode)) {\r\n        track.unshift(currentNode);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  /* istanbul ignore next */\r\n  return false;\r\n}\r\n\r\nclass IrreversibleError extends Error {\r\n  invalidTraversal = true;\r\n}\r\n\r\nexport class ProvenanceGraphTraverser implements IProvenanceGraphTraverser {\r\n  public graph: IProvenanceGraph;\r\n  public tracker: IProvenanceTracker | null;\r\n  /**\r\n   * trackingWhenTraversing === false disables tracking when traversing to prevent feedback.\r\n   * When applying an action, the object we're tracking might trigger its event listeners. This\r\n   * means that more Nodes are added to the ProvenanceGraph when traversing, which is most likely\r\n   * unwanted behaviour.\r\n   *\r\n   * It will enable/disable immediately before/after calling the action. So if the event is emitted\r\n   * asynchronously after the action, it will not work.\r\n   */\r\n  public trackingWhenTraversing = false;\r\n  private registry: IActionFunctionRegistry;\r\n  private _mitt: any;\r\n\r\n  constructor(\r\n    registry: IActionFunctionRegistry,\r\n    graph: IProvenanceGraph,\r\n    tracker: IProvenanceTracker | null = null\r\n  ) {\r\n    this.registry = registry;\r\n    this.graph = graph;\r\n    this.tracker = tracker;\r\n    this._mitt = mitt();\r\n  }\r\n\r\n  async executeFunctions(\r\n    functionsToDo: ActionFunctionWithThis[],\r\n    argumentsToDo: any[],\r\n    transitionTimes: number[]\r\n  ): Promise<StateNode> {\r\n    let result;\r\n    for (let i = 0; i < functionsToDo.length; i++) {\r\n      const funcWithThis = functionsToDo[i];\r\n      let promise: any;\r\n      if (this.tracker && this.tracker.acceptActions && !this.trackingWhenTraversing) {\r\n        this.tracker.acceptActions = false;\r\n        promise = funcWithThis.func.apply(funcWithThis.thisArg, argumentsToDo[i]);\r\n        this.tracker.acceptActions = true;\r\n      } else {\r\n        promise = funcWithThis.func.apply(funcWithThis.thisArg, argumentsToDo[i]);\r\n      }\r\n      result = await promise;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Finds shortest path between current node and node with request identifer.\r\n   * Calls the do/undo functions of actions on the path.\r\n   *\r\n   * @param id Node identifier\r\n   */\r\n  async toStateNode(\r\n    id: NodeIdentifier,\r\n    transtionTime?: number\r\n  ): Promise<ProvenanceNode | undefined> {\r\n    const currentNode = this.graph.current;\r\n    const targetNode = this.graph.getNode(id);\r\n\r\n    if (currentNode === targetNode) {\r\n      return Promise.resolve(currentNode);\r\n    }\r\n\r\n    const trackToTarget: ProvenanceNode[] = [];\r\n\r\n    const success = findPathToTargetNode(currentNode, targetNode, trackToTarget);\r\n\r\n    /* istanbul ignore if */\r\n    if (!success) {\r\n      throw new Error('No path to target node found in graph');\r\n    }\r\n\r\n    let functionsToDo: ActionFunctionWithThis[],\r\n      argumentsToDo: any[],\r\n      transitionTimes: number[] = [];\r\n    try {\r\n      const arg = this.getFunctionsAndArgsFromTrack(trackToTarget);\r\n      functionsToDo = arg.functionsToDo;\r\n      argumentsToDo = arg.argumentsToDo;\r\n      functionsToDo.forEach((func: any) => {\r\n        transitionTimes.push(transtionTime || 0);\r\n      });\r\n    } catch (error) {\r\n      if (error.invalidTraversal) {\r\n        this._mitt.emit('invalidTraversal', targetNode);\r\n        return undefined;\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n    const result = await this.executeFunctions(functionsToDo, argumentsToDo, transitionTimes);\r\n    this.graph.current = targetNode;\r\n    return result;\r\n  }\r\n\r\n  private getFunctionsAndArgsFromTrack(\r\n    track: ProvenanceNode[]\r\n  ): {\r\n    functionsToDo: ActionFunctionWithThis[];\r\n    argumentsToDo: any[];\r\n  } {\r\n    const functionsToDo: ActionFunctionWithThis[] = [];\r\n    const argumentsToDo: any[] = [];\r\n\r\n    for (let i = 0; i < track.length - 1; i++) {\r\n      const thisNode = track[i];\r\n      const nextNode = track[i + 1];\r\n      const up = isNextNodeInTrackUp(thisNode, nextNode);\r\n\r\n      if (up) {\r\n        /* istanbul ignore else */\r\n        if (isStateNode(thisNode)) {\r\n          if (!isReversibleAction(thisNode.action)) {\r\n            throw new IrreversibleError('trying to undo an Irreversible action');\r\n          }\r\n          const undoFunc = this.registry.getFunctionByName(thisNode.action.undo);\r\n          functionsToDo.push(undoFunc);\r\n          argumentsToDo.push(thisNode.action.undoArguments);\r\n        } else {\r\n          /* istanbul ignore next */\r\n          throw new Error('Going up from root? unreachable error ... i hope');\r\n        }\r\n      } else {\r\n        /* istanbul ignore else */\r\n        if (isStateNode(nextNode)) {\r\n          const doFunc = this.registry.getFunctionByName(nextNode.action.do);\r\n          functionsToDo.push(doFunc);\r\n          argumentsToDo.push(nextNode.action.doArguments);\r\n        } else {\r\n          /* istanbul ignore next */\r\n          throw new Error('Going down to the root? unreachable error ... i hope');\r\n        }\r\n      }\r\n    }\r\n\r\n    return { functionsToDo, argumentsToDo };\r\n  }\r\n\r\n  on(type: string, handler: Handler) {\r\n    this._mitt.on(type, handler);\r\n  }\r\n\r\n  off(type: string, handler: Handler) {\r\n    this._mitt.off(type, handler);\r\n  }\r\n}\r\n","import { IProvenanceSlide, ProvenanceNode, Handler } from './api';\r\nimport { generateUUID } from './utils';\r\nimport { SlideAnnotation } from './SlideAnnotation';\r\nimport mitt from './mitt';\r\n\r\nexport class ProvenanceSlide implements IProvenanceSlide {\r\n  private _id: string;\r\n  private _node: ProvenanceNode | null;\r\n  private _name: string;\r\n  private _duration: number;\r\n  private _transitionTime: number;\r\n  private _annotations: SlideAnnotation[];\r\n  private _mitt: any;\r\n  private _xPosition: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    duration: number,\r\n    transitionTime: number,\r\n    annotations: SlideAnnotation[] = [],\r\n    node: ProvenanceNode | null = null\r\n  ) {\r\n    this._id = generateUUID();\r\n    this._name = name;\r\n    this._duration = duration;\r\n    this._transitionTime = transitionTime;\r\n    this._annotations = annotations;\r\n    this._node = node;\r\n    this._mitt = mitt();\r\n    this._xPosition = 0;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  public get node(): ProvenanceNode | null {\r\n    return this._node;\r\n  }\r\n\r\n  public set node(value: ProvenanceNode | null) {\r\n    this._node = value;\r\n  }\r\n\r\n  public get name(): string {\r\n    return this._name;\r\n  }\r\n\r\n  public set name(value: string) {\r\n    this._name = value;\r\n  }\r\n\r\n  public get duration(): number {\r\n    return this._duration;\r\n  }\r\n\r\n  public set duration(value: number) {\r\n    this._duration = value;\r\n  }\r\n\r\n  public get transitionTime(): number {\r\n    return this._transitionTime;\r\n  }\r\n\r\n  public set transitionTime(value: number) {\r\n    this._transitionTime = value;\r\n  }\r\n\r\n  public addAnnotation(annotation: SlideAnnotation) {\r\n    this._annotations.push(annotation);\r\n    this._mitt.emit('addAnnotation', annotation);\r\n  }\r\n\r\n  public removeAnnotation(annotation: SlideAnnotation) {\r\n    const index = this._annotations.indexOf(annotation);\r\n    this._annotations.splice(index, 1);\r\n    this._mitt.emit('removeAnnotation', annotation);\r\n  }\r\n\r\n  public get annotations() {\r\n    return this._annotations;\r\n  }\r\n\r\n  public on(type: string, handler: Handler) {\r\n    this._mitt.on(type, handler);\r\n  }\r\n\r\n  public off(type: string, handler: Handler) {\r\n    this._mitt.off(type, handler);\r\n  }\r\n\r\n  public get xPosition(): number {\r\n    return this._xPosition;\r\n  }\r\n\r\n  public set xPosition(value: number) {\r\n    this._xPosition = value;\r\n  }\r\n}\r\n","import mitt from './mitt';\r\nimport {\r\n  IProvenanceSlidedeck,\r\n  IProvenanceGraphTraverser,\r\n  IProvenanceGraph,\r\n  Application,\r\n  Handler,\r\n  IProvenanceSlide\r\n} from './api';\r\nimport { ProvenanceSlide } from './ProvenanceSlide';\r\n\r\nexport class ProvenanceSlidedeck implements IProvenanceSlidedeck {\r\n  private _application: Application;\r\n  private _graph: IProvenanceGraph;\r\n  private _mitt: any;\r\n  private _slides: IProvenanceSlide[] = [];\r\n  private _traverser: IProvenanceGraphTraverser;\r\n  private _selectedSlide: IProvenanceSlide | null;\r\n\r\n  private _captainPlaceholder = new ProvenanceSlide('Captain Placeholder', 0, 0);\r\n\r\n  constructor(application: Application, traverser: IProvenanceGraphTraverser) {\r\n    this._mitt = mitt();\r\n    this._application = application;\r\n    this._graph = traverser.graph;\r\n    this._traverser = traverser;\r\n\r\n    this._selectedSlide = null;\r\n  }\r\n\r\n  public get application() {\r\n    return this._application;\r\n  }\r\n\r\n  public addSlide(slide?: IProvenanceSlide, index?: number): IProvenanceSlide {\r\n    if (\r\n      !index ||\r\n      isNaN(index) ||\r\n      !Number.isInteger(index) ||\r\n      index > this._slides.length ||\r\n      index < 0\r\n    ) {\r\n      index = this._slides.length;\r\n    }\r\n    if (slide && this._slides.indexOf(slide) >= 0) {\r\n      throw new Error('Cannot add a slide that is already in the deck');\r\n    }\r\n    if (!slide) {\r\n      const node = this._graph.current;\r\n      slide = new ProvenanceSlide(node.label, 1, 0, [], node);\r\n    }\r\n    if (this._slides.length === 0) {\r\n      this._selectedSlide = slide;\r\n    }\r\n    this._slides.splice(index, 0, slide);\r\n    this._mitt.emit('slideAdded', slide);\r\n\r\n    return slide;\r\n  }\r\n\r\n  public removeSlideAtIndex(index: number) {\r\n    const deletedSlides = this._slides.splice(index, 1);\r\n\r\n    // This can only be 1 slide now, therefore this is ok.\r\n    if (this._selectedSlide === deletedSlides[0]) {\r\n      this.selectedSlide = null;\r\n    }\r\n    this._mitt.emit('slideRemoved', deletedSlides[0]);\r\n  }\r\n\r\n  public removeSlide(slide: IProvenanceSlide) {\r\n    this.removeSlideAtIndex(this._slides.indexOf(slide));\r\n  }\r\n\r\n  public get selectedSlide(): IProvenanceSlide | null {\r\n    return this._selectedSlide;\r\n  }\r\n\r\n  public moveSlide(indexFrom: number, indexTo: number) {\r\n    if (indexTo < 0 || indexTo > this.slides.length - 1) {\r\n      throw new Error('target index out of bounds');\r\n    }\r\n\r\n    if (indexTo >= this._slides.length) {\r\n      let k = indexTo - this._slides.length + 1;\r\n      while (k--) {\r\n        this._slides.push(this._captainPlaceholder);\r\n      }\r\n    }\r\n    this._slides.splice(indexTo, 0, this._slides.splice(indexFrom, 1)[0]);\r\n\r\n    this._mitt.emit('slidesMoved', this._slides);\r\n  }\r\n\r\n  public startTime(slide: IProvenanceSlide) {\r\n    const index = this._slides.indexOf(slide);\r\n    let previousTime = 0;\r\n    for (let i = 0; i < index; i++) {\r\n      previousTime += this._slides[i].transitionTime;\r\n      previousTime += this._slides[i].duration;\r\n    }\r\n    return previousTime;\r\n  }\r\n\r\n  public slideAtTime(time: number) {\r\n    let index = 0;\r\n    let currentSlide = null;\r\n\r\n    while (time >= 0 && index < this.slides.length) {\r\n      currentSlide = this.slides[index];\r\n      const nextSlideOffset = currentSlide.transitionTime + currentSlide.duration;\r\n\r\n      if (time - nextSlideOffset < 0) {\r\n        break;\r\n      }\r\n\r\n      time -= nextSlideOffset;\r\n      index++;\r\n    }\r\n\r\n    return currentSlide;\r\n  }\r\n\r\n  public set selectedSlide(slide: IProvenanceSlide | null) {\r\n    if (slide && slide.node) {\r\n      this._traverser.toStateNode(slide.node.id, slide.transitionTime);\r\n    }\r\n    this._selectedSlide = slide;\r\n    this._mitt.emit('slideSelected', slide);\r\n  }\r\n\r\n  public get slides() {\r\n    return this._slides;\r\n  }\r\n\r\n  next() {\r\n    if (this._selectedSlide !== null) {\r\n      let currentIndex = this._slides.indexOf(this._selectedSlide);\r\n      if (currentIndex < this._slides.length - 1) {\r\n        currentIndex += 1;\r\n        this.selectedSlide = this._slides[currentIndex];\r\n      } else {\r\n        this.selectedSlide = this._slides[0];\r\n      }\r\n    }\r\n  }\r\n  previous() {\r\n    if (this._selectedSlide !== null) {\r\n      let currentIndex = this._slides.indexOf(this._selectedSlide);\r\n      if (currentIndex > 0) {\r\n        currentIndex -= 1;\r\n        this.selectedSlide = this._slides[currentIndex];\r\n      } else {\r\n        this.selectedSlide = this._slides[this._slides.length - 1];\r\n      }\r\n    }\r\n  }\r\n\r\n  public get graph() {\r\n    return this._graph;\r\n  }\r\n\r\n  on(type: string, handler: Handler) {\r\n    this._mitt.on(type, handler);\r\n  }\r\n\r\n  off(type: string, handler: Handler) {\r\n    this._mitt.off(type, handler);\r\n  }\r\n}\r\n","export interface ISlide {\r\n  duration: number;\r\n  delay: number;\r\n}\r\n\r\nexport enum STATUS {\r\n  IDLE,\r\n  PLAYING\r\n}\r\n\r\nconst wait = (duration: number) => new Promise(resolve => setTimeout(resolve, duration));\r\n\r\nexport class ProvenanceSlidedeckPlayer<T extends ISlide> {\r\n  private readonly _selectCallback: (slide: T) => any;\r\n  private readonly _slides: T[];\r\n  private _currentSlideIndex: number;\r\n  private _status: STATUS;\r\n\r\n  constructor(slides: T[], selectCallback: (slide: T) => any) {\r\n    this._selectCallback = selectCallback;\r\n    this._slides = slides;\r\n    this._currentSlideIndex = 0;\r\n    this._status = STATUS.IDLE;\r\n  }\r\n\r\n  public setSlideIndex(slideIndex: number) {\r\n    this._currentSlideIndex = slideIndex;\r\n  }\r\n\r\n  public get slides() {\r\n    return this._slides;\r\n  }\r\n\r\n  public get currentSlideIndex() {\r\n    return this._currentSlideIndex;\r\n  }\r\n  public set currentSlideIndex(index: number) {\r\n    this._currentSlideIndex = index;\r\n  }\r\n  public async play() {\r\n    const shouldPlayNext = () =>\r\n      this._status === STATUS.PLAYING && this._currentSlideIndex < this._slides.length - 1;\r\n\r\n    if (this._status === STATUS.IDLE) {\r\n      this._status = STATUS.PLAYING;\r\n      this._selectCallback(this._slides[this._currentSlideIndex]);\r\n      do {\r\n        const slide = this._slides[this._currentSlideIndex];\r\n        await wait(slide.duration);\r\n        if (shouldPlayNext()) {\r\n          this._currentSlideIndex += 1;\r\n          this._selectCallback(this._slides[this._currentSlideIndex]);\r\n        }\r\n      } while (shouldPlayNext());\r\n    }\r\n    this._status = STATUS.IDLE;\r\n  }\r\n  public next() {\r\n    this._currentSlideIndex += 1;\r\n    this._selectCallback(this._slides[this._currentSlideIndex]);\r\n  }\r\n  public get status() {\r\n    return this._status;\r\n  }\r\n\r\n  public stop() {\r\n    this._status = STATUS.IDLE;\r\n  }\r\n}\r\n","import { generateUUID } from './utils';\r\nimport mitt from './mitt';\r\nimport { Handler, ISlideAnnotation } from './api';\r\n\r\nexport type AnnotationData = any;\r\n\r\nexport class SlideAnnotation implements ISlideAnnotation {\r\n  // todo: interface\r\n  private readonly _id: string;\r\n  private _data: AnnotationData;\r\n  private _mitt: any;\r\n\r\n  constructor(data: any) {\r\n    this._id = generateUUID();\r\n    this._data = data;\r\n    this._mitt = mitt();\r\n  }\r\n\r\n  public get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  public set data(value: AnnotationData | null) {\r\n    this._data = value;\r\n    this._mitt.emit('change', value);\r\n  }\r\n\r\n  public get data(): AnnotationData {\r\n    return this._data;\r\n  }\r\n\r\n  public on(type: string, handler: Handler) {\r\n    this._mitt.on(type, handler);\r\n  }\r\n\r\n  public off(type: string, handler: Handler) {\r\n    this._mitt.off(type, handler);\r\n  }\r\n}\r\n","import { HierarchyNode, HierarchyPointNode } from 'd3-hierarchy';\r\n\r\nfunction depthSort(\r\n  a: IHierarchyPointNodeWithMaxDepth<any>,\r\n  b: IHierarchyPointNodeWithMaxDepth<any>,\r\n) {\r\n  if (a.maxDescendantDepth > b.maxDescendantDepth) {\r\n    return -1;\r\n  } else if (a.maxDescendantDepth < b.maxDescendantDepth) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport interface IGratzlLayout<Datum> {\r\n  (\r\n    root: HierarchyNode<Datum>,\r\n    activeNode: HierarchyNode<Datum>,\r\n  ): IHierarchyPointNodeWithMaxDepth<Datum>;\r\n  size(): [number, number];\r\n  size(size: [number, number]): this;\r\n}\r\n\r\nexport interface IHierarchyPointNodeWithMaxDepth<Datum>\r\n  extends HierarchyPointNode<Datum> {\r\n  maxDescendantDepth: number;\r\n  xOffset: number;\r\n}\r\n\r\nexport default function GratzlLayout<Datum>() {\r\n  let dx = 5;\r\n  let dy = 50;\r\n  const widths: number[] = [];\r\n\r\n  function setTreeX(node: IHierarchyPointNodeWithMaxDepth<Datum>, val: number) {\r\n    node.xOffset = val;\r\n    widths[node.depth] = val;\r\n    if (node.children) {\r\n      node\r\n        .leaves()\r\n        .sort(depthSort)\r\n        .forEach((leaf) => {\r\n          if (typeof leaf.xOffset === 'undefined') {\r\n            const width = Math.max.apply(\r\n              null,\r\n              widths.slice(node.depth, leaf.depth + 1),\r\n            );\r\n            setTreeX(leaf, val > width ? val : width + 1);\r\n          }\r\n        });\r\n    }\r\n\r\n    if (node.parent && typeof node.parent.xOffset === 'undefined') {\r\n      setTreeX(node.parent, val);\r\n    }\r\n  }\r\n\r\n  const tree: IGratzlLayout<Datum> = Object.assign(\r\n    (_root: HierarchyNode<Datum>, _activeNode: HierarchyNode<Datum>) => {\r\n      /*\r\n       * set maxDescendantDepth on each node,\r\n       * which is the depth of its deepest child\r\n       *\r\n       * */\r\n\r\n      const root = _root as IHierarchyPointNodeWithMaxDepth<Datum>;\r\n      const activeNode = _activeNode as IHierarchyPointNodeWithMaxDepth<Datum>;\r\n\r\n      root.leaves().forEach((leaf) => {\r\n        leaf.ancestors().forEach((leafAncestor) => {\r\n          if (\r\n            !leafAncestor.maxDescendantDepth ||\r\n            leaf.depth > leafAncestor.maxDescendantDepth\r\n          ) {\r\n            leafAncestor.maxDescendantDepth = leaf.depth;\r\n          }\r\n        });\r\n      });\r\n\r\n      /* rendering should start at the deepest leaf of activeNode. */\r\n      let deepestLeaf = activeNode;\r\n      activeNode.leaves().forEach((leaf) => {\r\n        if (deepestLeaf.depth < leaf.depth) {\r\n          deepestLeaf = leaf;\r\n        }\r\n      });\r\n\r\n      setTreeX(deepestLeaf, 0);\r\n\r\n      const maxX = Math.max.apply(null, widths);\r\n      const maxY = Math.max.apply(null, root.leaves().map((leaf) => leaf.depth));\r\n      root.each((node) => {\r\n        sizeNode(node, maxX, maxY);\r\n      });\r\n\r\n      return root;\r\n    },\r\n    {\r\n      size: ((x: [number, number] | undefined) => {\r\n        return x ? ((dx = +x[0]), (dy = +x[1]), tree) : [dx, dy];\r\n      }) as any,\r\n    },\r\n  );\r\n\r\n  function sizeNode(\r\n    node: IHierarchyPointNodeWithMaxDepth<any>,\r\n    maxX: number,\r\n    maxY: number,\r\n  ): void {\r\n    node.x = maxX === 0 ? dx : dx - (dx / maxX) * node.xOffset;\r\n    node.y = maxY === 0 ? dy : (dy / maxY) * node.depth;\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import {\r\n  isStateNode,\r\n  ProvenanceGraphTraverser,\r\n  ProvenanceNode,\r\n} from '@visualstorytelling/provenance-core';\r\nimport * as d3 from 'd3';\r\nimport { HierarchyPointNode } from 'd3';\r\nimport gratzl, { IHierarchyPointNodeWithMaxDepth } from './gratzl';\r\n\r\ntype D3SVGSelection = d3.Selection<SVGElement, any, null, undefined>;\r\ntype ITreeNodes = Array<IHierarchyPointNodeWithMaxDepth<ProvenanceNode>>;\r\ninterface ITask {\r\n  taskId: number;\r\n  taskName: string;\r\n  taskNodes: ITreeNodes;\r\n}\r\nexport class ProvenanceTreeVisualization {\r\n  private taskId = 1;\r\n  private taskName = 'Task' + this.taskId;\r\n  private newTaskNodes: Array<\r\n    IHierarchyPointNodeWithMaxDepth<ProvenanceNode>\r\n  > = [];\r\n  private taskList: ITask[] = [\r\n    {\r\n      taskId: this.taskId,\r\n      taskName: this.taskName,\r\n      taskNodes: this.newTaskNodes,\r\n    },\r\n  ];\r\n  private counter = 0;\r\n  private traverser: ProvenanceGraphTraverser;\r\n  private svg: any;\r\n  private treeNodes: ITreeNodes = [];\r\n  private tasksTable: any;\r\n  private currentIndex = 0;\r\n\r\n  private checkBoxY = 0;\r\n  constructor(traverser: ProvenanceGraphTraverser, elm: HTMLDivElement) {\r\n    this.traverser = traverser;\r\n\r\n    this.svg = d3\r\n      .select(elm)\r\n      .append('svg')\r\n      .attr('viewBox', '-10 -10 130 130')\r\n      .attr('style', 'width: 100%; height: 100%');\r\n    this.tasksTable = elm.children[1];\r\n    traverser.graph.on('currentChanged', () => this.update());\r\n    // this.onChange = this.onChange.bind(this);\r\n    this.update();\r\n  }\r\n  public addTask() {\r\n    console.log(this.taskList);\r\n    if (this.newTaskNodes.length > 0) {\r\n      this.addMetaData();\r\n    }\r\n    this.counter += 1;\r\n    if (this.counter > 1) {\r\n      this.setCurrentIndex();\r\n      this.taskId += 1;\r\n      this.taskName = 'Task' + this.taskId;\r\n      this.createNewTask();\r\n    }\r\n    const inputContainer = document.createElement('div');\r\n    inputContainer.className = 'inputContainer';\r\n    const checkbox = this.createCheckbox();\r\n    const label = this.createLabel();\r\n    const radioBtn = this.createRadioButton();\r\n    inputContainer.appendChild(radioBtn);\r\n    inputContainer.appendChild(label);\r\n    inputContainer.appendChild(checkbox);\r\n    this.tasksTable.appendChild(inputContainer);\r\n  }\r\n  private createNewTask() {\r\n    const task = {\r\n      taskId: this.taskId,\r\n      taskName: this.taskName,\r\n      taskNodes: [],\r\n    };\r\n    this.taskList.push(task);\r\n  }\r\n  private createRadioButton() {\r\n    const radio = document.createElement('input');\r\n    radio.type = 'radio';\r\n    radio.name = 'name';\r\n    radio.setAttribute('checked', 'checked');\r\n    return radio;\r\n  }\r\n  private createCheckbox() {\r\n    const checkbox = document.createElement('input');\r\n    checkbox.type = 'checkbox';\r\n    checkbox.name = 'name';\r\n    checkbox.value = 'value';\r\n    checkbox.id = this.taskId.toString();\r\n    return checkbox;\r\n  }\r\n  private enableEdit(event: any) {\r\n    event.target.readOnly = false;\r\n  }\r\n  private updateTaskName(event: any) {\r\n    const id = event.target.id;\r\n    this.taskList[id - 1].taskName = event.target.value;\r\n  }\r\n  private createLabel() {\r\n    const label = document.createElement('input');\r\n    label.type = 'text';\r\n    label.name = 'taskName';\r\n    label.value = this.taskName;\r\n    label.id = this.taskId.toString();\r\n    label.readOnly = true;\r\n    label.addEventListener('click', this.enableEdit.bind(this));\r\n    label.addEventListener('change', this.updateTaskName.bind(this));\r\n    return label;\r\n    // const label = document.createElement(\"label\");\r\n    // // label.htmlFor = 'id';\r\n    // label.setAttribute(\"contenteditable\", \"true\");\r\n    // label.id = this.taskId.toString();\r\n    // label.appendChild(\r\n    //   document.createTextNode(this.taskList[this.taskId - 1].taskName)\r\n    // );\r\n    // return label;\r\n  }\r\n  private setCurrentIndex() {\r\n    this.treeNodes.forEach((node, index) => {\r\n      if (node.data.id === this.traverser.graph.current.id) {\r\n        console.log('Nodes from index', index);\r\n        this.currentIndex = index;\r\n      }\r\n    });\r\n  }\r\n  private updateTreeNodes() {\r\n    const newTaskNodes = Object.assign([], this.treeNodes);\r\n    newTaskNodes.splice(0, this.currentIndex + 1);\r\n    return newTaskNodes;\r\n  }\r\n  private addMetaData() {\r\n    this.newTaskNodes.forEach(\r\n      (node: IHierarchyPointNodeWithMaxDepth<ProvenanceNode>) => {\r\n        if (isStateNode(node.data)) {\r\n          if (node.data.action.metadata) {\r\n            node.data.action.metadata.taskId = this.taskId;\r\n          } else {\r\n            node.data.action.metadata = { taskId: this.taskId };\r\n          }\r\n        }\r\n      },\r\n    );\r\n  }\r\n  // public addCheckbox() {\r\n  //   this.svg\r\n  //     .append(\"svg:foreignObject\")\r\n  //     .attr(\"x\", 0)\r\n  //     .attr(\"y\", this.checkBoxY)\r\n  //     .attr(\"cursor\", \"pointer\")\r\n  //     .attr(\"width\", 20)\r\n  //     .attr(\"height\", 20)\r\n  //     .append(\"xhtml:body\")\r\n  //     .html('<input type=\"checkbox\" id=' + this.id + \">\")\r\n  //     .on(\"change\", this.onChange);\r\n  //   this.id += 1;\r\n  //   this.checkBoxY += 25;\r\n  // }\r\n\r\n  // public onChange(event: any) {\r\n  //   console.log(event.target);\r\n  //   if (this.checkBoxList.length === 1) {\r\n  //     this.taskList[0].taskNodes = this.treeNodes;\r\n  //   } else if (this.checkBoxList.length > 1) {\r\n  //     const newTaskNodes = Object.assign([], this.treeNodes);\r\n  //     newTaskNodes.splice(0, this.currentIndex + 1);\r\n  //     const task = {\r\n  //       taskId: this.taskId,\r\n  //       taskName: 'Task' + this.taskId,\r\n  //       taskNodes: newTaskNodes,\r\n  //     };\r\n  //     this.taskList.push(task);\r\n  //     newTaskNodes.forEach(\r\n  //       (node: IHierarchyPointNodeWithMaxDepth<ProvenanceNode>) => {\r\n  //         if (isStateNode(node.data)) {\r\n  //           if (node.data.action.metadata) {\r\n  //             node.data.action.metadata.taskId = this.taskId;\r\n  //           } else {\r\n  //             node.data.action.metadata = { taskId: this.taskId };\r\n  //           }\r\n  //         }\r\n  //       },\r\n  //     );\r\n\r\n  //     // this.taskList.push(task);\r\n  //   }\r\n  //   this.treeNodes.forEach((node, index) => {\r\n  //     if (node.data.id === this.traverser.graph.current.id) {\r\n  //       console.log('Nodes from index', index);\r\n  //       this.currentIndex = index;\r\n  //     }\r\n  //   });\r\n\r\n  //   this.taskId += 1;\r\n  //   this.checkBoxList.push(this.taskId);\r\n  //   console.log('TaskList', this.taskList);\r\n  // }\r\n  public update() {\r\n    const treeRoot = d3.hierarchy(this.traverser.graph.root);\r\n    const treeLayout = gratzl<ProvenanceNode>().size([100 / 2, 100]);\r\n    let layoutCurrentNode = treeRoot;\r\n    treeRoot.each((node) => {\r\n      if (node.data === this.traverser.graph.current) {\r\n        layoutCurrentNode = node;\r\n      }\r\n    });\r\n    const tree = treeLayout(treeRoot, layoutCurrentNode);\r\n\r\n    this.treeNodes = tree.descendants();\r\n    console.log(this.treeNodes);\r\n    if (this.taskId > 1) {\r\n      this.newTaskNodes = this.updateTreeNodes();\r\n    } else {\r\n      this.newTaskNodes = this.treeNodes;\r\n    }\r\n    this.taskList[this.taskId - 1].taskNodes = this.newTaskNodes;\r\n\r\n    const oldNodes = this.svg\r\n      .selectAll('g.node')\r\n      .data(this.treeNodes, (d: any) => d.data.id as any);\r\n\r\n    const newNodes = oldNodes\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .attr('transform', (d: any) => `translate(${d.x}, ${d.y})`)\r\n      .on('click', (d: any) => this.traverser.toStateNode(d.data.id));\r\n\r\n    newNodes.append('circle').attr('r', 2);\r\n\r\n    newNodes\r\n      .append('text')\r\n      .text((d: any) => (isStateNode(d.data) ? d.data.label : ''))\r\n      .attr('style', 'font-size: 6px')\r\n      .attr('x', 7)\r\n      .attr('y', 3);\r\n\r\n    newNodes\r\n      .merge(oldNodes)\r\n      .attr('class', 'node')\r\n      .filter((d: any) => d.xOffset === 0)\r\n      .attr('class', 'node branch-active')\r\n      .filter((d: any) => d.data === this.traverser.graph.current)\r\n      .attr('class', 'node branch-active node-active');\r\n\r\n    newNodes\r\n      .merge(oldNodes)\r\n      .transition()\r\n      .duration(500)\r\n      .attr('transform', (d: any) => `translate(${d.x}, ${d.y})`);\r\n\r\n    const linkPath = ({\r\n      source,\r\n      target,\r\n    }: {\r\n      source: HierarchyPointNode<ProvenanceNode>;\r\n      target: HierarchyPointNode<ProvenanceNode>;\r\n    }) => {\r\n      const [s, t] = [source, target];\r\n      // tslint:disable-next-line\r\n      return `M${s.x},${s.y}C${s.x},${(s.y + t.y) / 2} ${t.x},${(s.y + t.y) /\r\n        2} ${t.x},${t.y}`;\r\n    };\r\n\r\n    const oldLinks = this.svg\r\n      .selectAll('path.link')\r\n      .data(tree.links(), (d: any) => d.target.data.id);\r\n\r\n    const newLinks = oldLinks\r\n      .enter()\r\n      .insert('path', 'g')\r\n      .attr('d', linkPath);\r\n\r\n    oldLinks\r\n      .merge(newLinks)\r\n      .attr('class', 'link')\r\n      .filter((d: any) => d.target.xOffset === 0)\r\n      .attr('class', 'link active');\r\n\r\n    oldLinks\r\n      .merge(newLinks)\r\n      .transition()\r\n      .duration(500)\r\n      .attr('d', linkPath);\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends","d3\r\n            .select","d3.hierarchy","gratzl"],"mappings":"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"}