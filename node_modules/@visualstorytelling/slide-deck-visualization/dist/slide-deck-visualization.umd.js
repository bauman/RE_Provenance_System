(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3')) :
    typeof define === 'function' && define.amd ? define(['exports', 'd3'], factory) :
    (factory((global.slideDeckVisualization = {}),global.d3));
}(this, (function (exports,d3) { 'use strict';

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function generateUUID() {
        // Public Domain/MIT
        var d = new Date().getTime();
        if (typeof performance !== 'undefined' &&
            typeof performance.now === 'function') {
            d += performance.now(); // use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = ((d + Math.random() * 16) % 16) | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
        });
    }
    /**
     * Generate a Unix timestamp in milliseconds
     *
     * @returns {number} in milliseconds
     */
    function generateTimestamp() {
        // Removed, because performance.now() returns a floating point number, which is not compatible with the Date.getTime() integer
        // if (
        //   window.performance &&
        //   window.performance.now &&
        //   window.performance.timing &&
        //   window.performance.timing.navigationStart
        // ) {
        //   return window.performance.now();
        // }
        return new Date().getTime();
    }

    /** Mitt: Tiny (~200b) functional event emitter / pubsub.
     *  @name mitt
     *  @returns {Mitt}
     */
    function mitt(all) {
        all = all || Object.create(null);
        return {
            /**
             * Register an event handler for the given type.
             *
             * @param  {String} type	Type of event to listen for
             * @param  {Function} handler Function to call in response to given event
             * @memberOf mitt
             */
            on: function (type, handler) {
                (all[type] || (all[type] = [])).push(handler);
            },
            /**
             * Remove an event handler for the given type.
             *
             * @param  {String} type	Type of event to unregister `handler` from
             * @param  {Function} handler Handler function to remove
             * @memberOf mitt
             */
            off: function (type, handler) {
                if (all[type]) {
                    all[type].splice(all[type].indexOf(handler) >>> 0, 1);
                }
            },
            /**
             * Invoke all handlers for the given type.
             *
             * @param {String} type  The event type to invoke
             * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler
             * @memberOf mitt
             */
            emit: function (type, evt) {
                (all[type] || []).slice().map(function (handler) {
                    handler(evt);
                });
            }
        };
    }

    /**
     * Provenance Graph implementation
     *
     * @param version The version of the software to track the provenance of
     *
     */
    var ProvenanceGraph = /** @class */ (function () {
        function ProvenanceGraph(application, userid, rootNode) {
            if (userid === void 0) { userid = 'Unknown'; }
            this._nodes = {};
            this._mitt = mitt();
            this.application = application;
            if (rootNode) {
                this.root = rootNode;
            }
            else {
                this.root = {
                    id: generateUUID(),
                    label: 'Root',
                    metadata: {
                        createdBy: userid,
                        createdOn: generateTimestamp()
                    },
                    children: [],
                    artifacts: {}
                };
            }
            this.addNode(this.root);
            this._current = this.root;
        }
        ProvenanceGraph.prototype.addNode = function (node) {
            if (this._nodes[node.id]) {
                throw new Error('Node already added');
            }
            this._nodes[node.id] = node;
            this._mitt.emit('nodeAdded', node);
        };
        ProvenanceGraph.prototype.getNode = function (id) {
            var result = this._nodes[id];
            if (!result) {
                throw new Error('Node id not found');
            }
            return this._nodes[id];
        };
        Object.defineProperty(ProvenanceGraph.prototype, "current", {
            get: function () {
                return this._current;
            },
            set: function (node) {
                if (!this._nodes[node.id]) {
                    throw new Error('Node id not found');
                }
                this._current = node;
                this._mitt.emit('currentChanged', node);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProvenanceGraph.prototype, "nodes", {
            get: function () {
                return this._nodes;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceGraph.prototype.emitNodeChangedEvent = function (node) {
            /* istanbul ignore if */
            if (!this._nodes[node.id]) {
                throw new Error('Node id not found');
            }
            this._mitt.emit('nodeChanged', node);
        };
        ProvenanceGraph.prototype.on = function (type, handler) {
            this._mitt.on(type, handler);
        };
        ProvenanceGraph.prototype.off = function (type, handler) {
            this._mitt.off(type, handler);
        };
        return ProvenanceGraph;
    }());

    var ProvenanceSlide = /** @class */ (function () {
        function ProvenanceSlide(name, duration, delay, annotations, node) {
            if (annotations === void 0) { annotations = []; }
            if (node === void 0) { node = null; }
            this._id = generateUUID();
            this._name = name;
            this._duration = duration;
            this._delay = delay;
            this._annotations = annotations;
            this._node = node;
        }
        Object.defineProperty(ProvenanceSlide.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProvenanceSlide.prototype, "node", {
            get: function () {
                return this._node;
            },
            set: function (value) {
                this._node = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProvenanceSlide.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProvenanceSlide.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            set: function (value) {
                this._duration = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProvenanceSlide.prototype, "delay", {
            get: function () {
                return this._delay;
            },
            set: function (value) {
                this._delay = value;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlide.prototype.addAnnotation = function (annotation) {
            this._annotations.push(annotation);
        };
        ProvenanceSlide.prototype.removeAnnotation = function (annotation) {
            var index = this._annotations.indexOf(annotation);
            this._annotations.splice(index, 1);
        };
        Object.defineProperty(ProvenanceSlide.prototype, "annotations", {
            get: function () {
                return this._annotations;
            },
            enumerable: true,
            configurable: true
        });
        return ProvenanceSlide;
    }());

    var ProvenanceSlidedeck = /** @class */ (function () {
        function ProvenanceSlidedeck(application, traverser) {
            this._slides = [];
            this._captainPlaceholder = new ProvenanceSlide("Captain Placeholder", 0, 0);
            this._mitt = mitt();
            this._application = application;
            this._graph = traverser.graph;
            this._traverser = traverser;
            this._selectedSlide = null;
        }
        Object.defineProperty(ProvenanceSlidedeck.prototype, "application", {
            get: function () {
                return this._application;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlidedeck.prototype.addSlide = function (slide, index) {
            if (!index ||
                isNaN(index) ||
                !Number.isInteger(index) ||
                index > this._slides.length ||
                index < 0) {
                index = this._slides.length;
            }
            if (slide && this._slides.indexOf(slide) >= 0) {
                throw new Error("Cannot add a slide that is already in the deck");
            }
            if (!slide) {
                var node = this._graph.current;
                slide = new ProvenanceSlide(node.label, 1, 0, [], node);
            }
            if (this._slides.length === 0) {
                this._selectedSlide = slide;
            }
            this._slides.splice(index, 0, slide);
            this._mitt.emit("slideAdded", slide);
            return slide;
        };
        ProvenanceSlidedeck.prototype.removeSlideAtIndex = function (index) {
            var deletedSlides = this._slides.splice(index, 1);
            // This can only be 1 slide now, therefore this is ok.
            if (this._selectedSlide === deletedSlides[0]) {
                this.selectedSlide = null;
            }
            this._mitt.emit("slideRemoved", deletedSlides[0]);
        };
        ProvenanceSlidedeck.prototype.removeSlide = function (slide) {
            this.removeSlideAtIndex(this._slides.indexOf(slide));
        };
        Object.defineProperty(ProvenanceSlidedeck.prototype, "selectedSlide", {
            get: function () {
                return this._selectedSlide;
            },
            set: function (slide) {
                if (slide && slide.node) {
                    this._traverser.toStateNode(slide.node.id);
                }
                this._selectedSlide = slide;
                this._mitt.emit("slideSelected", slide);
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlidedeck.prototype.moveSlide = function (indexFrom, indexTo) {
            if (indexTo < 0 || indexTo > this.slides.length - 1) {
                throw new Error("target index out of bounds");
            }
            if (indexTo >= this._slides.length) {
                var k = indexTo - this._slides.length + 1;
                while (k--) {
                    this._slides.push(this._captainPlaceholder);
                }
            }
            this._slides.splice(indexTo, 0, this._slides.splice(indexFrom, 1)[0]);
            this._mitt.emit("slidesMoved", this._slides);
        };
        ProvenanceSlidedeck.prototype.startTime = function (slide) {
            var index = this._slides.indexOf(slide);
            var previousTime = 0;
            for (var i = 0; i < index; i++) {
                previousTime += this._slides[i].delay;
                previousTime += this._slides[i].duration;
            }
            return previousTime;
        };
        ProvenanceSlidedeck.prototype.slideAtTime = function (time) {
            var index = 0;
            var currentSlide = null;
            while (time >= 0 && index < this.slides.length) {
                currentSlide = this.slides[index];
                var nextSlideOffset = currentSlide.delay + currentSlide.duration;
                if (time - nextSlideOffset < 0) {
                    break;
                }
                time -= nextSlideOffset;
                index++;
            }
            return currentSlide;
        };
        Object.defineProperty(ProvenanceSlidedeck.prototype, "slides", {
            get: function () {
                return this._slides;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlidedeck.prototype.next = function () {
            if (this._selectedSlide !== null) {
                var currentIndex = this._slides.indexOf(this._selectedSlide);
                if (currentIndex < this._slides.length - 1) {
                    currentIndex += 1;
                    this.selectedSlide = this._slides[currentIndex];
                }
                else
                    this.selectedSlide = this._slides[0];
            }
        };
        ProvenanceSlidedeck.prototype.previous = function () {
            if (this._selectedSlide !== null) {
                var currentIndex = this._slides.indexOf(this._selectedSlide);
                if (currentIndex > 0) {
                    currentIndex -= 1;
                    this.selectedSlide = this._slides[currentIndex];
                }
                else {
                    this.selectedSlide = this._slides[this._slides.length - 1];
                }
            }
        };
        Object.defineProperty(ProvenanceSlidedeck.prototype, "graph", {
            get: function () {
                return this._graph;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlidedeck.prototype.on = function (type, handler) {
            this._mitt.on(type, handler);
        };
        ProvenanceSlidedeck.prototype.off = function (type, handler) {
            this._mitt.off(type, handler);
        };
        return ProvenanceSlidedeck;
    }());

    var STATUS;
    (function (STATUS) {
        STATUS[STATUS["IDLE"] = 0] = "IDLE";
        STATUS[STATUS["PLAYING"] = 1] = "PLAYING";
    })(STATUS || (STATUS = {}));
    var wait = function (duration) { return new Promise(function (resolve) { return setTimeout(resolve, duration); }); };
    var ProvenanceSlidedeckPlayer = /** @class */ (function () {
        function ProvenanceSlidedeckPlayer(slides, selectCallback) {
            this._selectCallback = selectCallback;
            this._slides = slides;
            this._currentSlideIndex = 0;
            this._status = STATUS.IDLE;
        }
        ProvenanceSlidedeckPlayer.prototype.setSlideIndex = function (slideIndex) {
            this._currentSlideIndex = slideIndex;
        };
        Object.defineProperty(ProvenanceSlidedeckPlayer.prototype, "slides", {
            get: function () {
                return this._slides;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProvenanceSlidedeckPlayer.prototype, "currentSlideIndex", {
            get: function () {
                return this._currentSlideIndex;
            },
            set: function (index) {
                this._currentSlideIndex = index;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlidedeckPlayer.prototype.play = function () {
            return __awaiter(this, void 0, void 0, function () {
                var shouldPlayNext, slide;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            shouldPlayNext = function () {
                                return _this._status === STATUS.PLAYING && _this._currentSlideIndex < _this._slides.length - 1;
                            };
                            if (!(this._status === STATUS.IDLE)) return [3 /*break*/, 4];
                            this._status = STATUS.PLAYING;
                            this._selectCallback(this._slides[this._currentSlideIndex]);
                            _a.label = 1;
                        case 1:
                            slide = this._slides[this._currentSlideIndex];
                            return [4 /*yield*/, wait(slide.duration)];
                        case 2:
                            _a.sent();
                            if (shouldPlayNext()) {
                                this._currentSlideIndex += 1;
                                this._selectCallback(this._slides[this._currentSlideIndex]);
                            }
                            _a.label = 3;
                        case 3:
                            if (shouldPlayNext()) return [3 /*break*/, 1];
                            _a.label = 4;
                        case 4:
                            this._status = STATUS.IDLE;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ProvenanceSlidedeckPlayer.prototype.next = function () {
            this._currentSlideIndex += 1;
            this._selectCallback(this._slides[this._currentSlideIndex]);
        };
        Object.defineProperty(ProvenanceSlidedeckPlayer.prototype, "status", {
            get: function () {
                return this._status;
            },
            enumerable: true,
            configurable: true
        });
        ProvenanceSlidedeckPlayer.prototype.stop = function () {
            this._status = STATUS.IDLE;
        };
        return ProvenanceSlidedeckPlayer;
    }());

    function firstArgThis(f) {
        return function (...args) {
            return f(this, ...args);
        };
    }
    class SlideDeckVisualization {
        constructor(slideDeck, elm) {
            this._tableHeight = 1000;
            this._tableWidth = 300;
            this._minimumSlideDuration = 5000;
            this._barHeightTimeMultiplier = 0.01;
            this._barWidth = 270;
            this._barPadding = 5;
            this._resizebarheight = 5;
            this._previousSlideY = 0;
            this._lineX1 = 30;
            this._placeholderWidth = this._tableWidth - 40;
            this._placeholderY = 50;
            this._placeholderHeight = 30;
            this._maxSlides = 20;
            this._toolbarX = 200;
            this._toolbarY = 10;
            this._toolbarPadding = 20;
            this._slideDuration = 1000;
            this._timeIndexedSlides = [];
            this._nextSlideY = 50;
            this._index = (slide) => {
                return this._slideDeck.slides.indexOf(slide);
            };
            this.onDelete = (slide) => {
                this._slideDeck.removeSlide(slide);
            };
            this.onSelect = (slide) => {
                if (d3.event.defaultPrevented)
                    return;
                this._slideDeck.selectedSlide = slide;
            };
            this.onAdd = () => {
                let slideDeck = this._slideDeck;
                const node = slideDeck.graph.current;
                const slide = new ProvenanceSlide(node.label, 1000, 0, [], node);
                slideDeck.addSlide(slide, slideDeck.selectedSlide
                    ? slideDeck.slides.indexOf(slideDeck.selectedSlide) + 1
                    : slideDeck.slides.length);
            };
            this.onClone = (slide) => {
                let slideDeck = this._slideDeck;
                const cloneSlide = new ProvenanceSlide(slide.name, 1000, 0, [], slide.node);
                slideDeck.addSlide(cloneSlide, slideDeck.selectedSlide
                    ? slideDeck.slides.indexOf(slideDeck.selectedSlide) + 1
                    : slideDeck.slides.length);
            };
            this.moveDragged = (that, draggedObject) => {
                d3.select(that).attr("transform", (slide) => {
                    const originalY = this.previousSlidesHeight(slide);
                    const draggedY = d3.event.y;
                    const myIndex = this._slideDeck.slides.indexOf(slide);
                    if (draggedY < originalY && myIndex > 0) {
                        // check upwards
                        const previousSlide = this._slideDeck.slides[myIndex - 1];
                        let previousSlideCenterY = this.previousSlidesHeight(previousSlide) +
                            this.barTotalHeight(previousSlide) / 2;
                        if (draggedY < previousSlideCenterY) {
                            this._slideDeck.moveSlide(myIndex, myIndex - 1);
                        }
                    }
                    else if (draggedY > originalY &&
                        myIndex < this._slideDeck.slides.length - 1) {
                        // check downwards
                        const nextSlide = this._slideDeck.slides[myIndex + 1];
                        let nextSlideCenterY = this.previousSlidesHeight(nextSlide) +
                            this.barTotalHeight(nextSlide) / 2;
                        if (draggedY > nextSlideCenterY) {
                            this._slideDeck.moveSlide(myIndex, myIndex + 1);
                        }
                    }
                    return "translate(30," + d3.event.y + ")";
                });
            };
            this.moveDragended = (that, draggedObject) => {
                d3.select(that)
                    .classed("active", false)
                    .attr("transform", (slide) => {
                    return "translate(30," + this.previousSlidesHeight(slide) + ")";
                });
            };
            this.delayDragged = (that, slide) => {
                slide.delay = Math.max(0, d3.event.y) / this._barHeightTimeMultiplier;
                this.update();
            };
            this.delaySubject = (that, slide) => {
                return { y: this.barDelayHeight(slide) };
            };
            this.durationDragged = (that, slide) => {
                slide.duration =
                    Math.max(0, d3.event.y) / this._barHeightTimeMultiplier;
                this.update();
            };
            this.durationSubject = (that, slide) => {
                return { y: this.barDurationHeight(slide) };
            };
            this.onNext = () => {
                this._slideDeck.next();
            };
            this.onPrevious = () => {
                this._slideDeck.previous();
            };
            this.onPlay = () => {
                if (this._player.status === STATUS.IDLE) {
                    this._player.play();
                }
                else {
                    this._player.stop();
                }
                d3.select(d3.event.target).classed("fa-play", d3.select(d3.event.target).classed("fa-play") ? false : true);
                d3.select(d3.event.target).classed("fa-pause", d3.select(d3.event.target).classed("fa-pause") ? false : true);
            };
            this._slideDeck = slideDeck;
            this._root = d3.select(elm);
            this._slideTable = this._root
                .append("svg")
                .attr("class", "slide__table")
                .attr("height", this._tableHeight)
                .attr("width", this._tableWidth);
            this._slideTable
                .append("rect")
                .attr("class", "slides_background_rect")
                .attr("x", 0)
                .attr("y", 0)
                .attr("height", this._tableHeight)
                .attr("width", this._tableWidth);
            this._slideTable
                .append("line")
                .attr("x1", this._lineX1)
                .attr("y1", this._nextSlideY)
                .attr("x2", this._lineX1)
                .attr("stroke", "gray")
                .attr("stroke-width", 2);
            this._slideTable
                .append("circle")
                .attr("class", "currentTime")
                .attr("cx", this._lineX1)
                .attr("cy", this._nextSlideY)
                .attr("r", 3)
                .attr("fill", "red");
            this.setPlaceholder("slide_placeholder");
            this.setPlaceholder("player_placeholder");
            this.setAddButton();
            this.setPreviousButton();
            this.setPlayButton();
            this.setNextButton();
            slideDeck.on("slideAdded", () => this.update());
            slideDeck.on("slideRemoved", () => this.update());
            slideDeck.on("slidesMoved", () => this.update());
            slideDeck.on("slideSelected", () => this.update());
            this._player = new ProvenanceSlidedeckPlayer(this._slideDeck.slides, nextSlide => {
                this._slideDuration = nextSlide.duration;
                this._nextSlideY += this.barTotalHeight(nextSlide);
                this._slideDeck.selectedSlide = nextSlide;
            });
            this.update();
        }
        onMouseEnter() {
            let toolbar = d3.event.target.parentElement.querySelector(".slide_toolbar");
            toolbar.style.display = "block";
        }
        onMouseLeave() {
            let toolbar = d3.event.target.parentElement.querySelector(".slide_toolbar");
            toolbar.style.display = "none";
        }
        moveDragStarted(draggedObject) {
            d3.select(this)
                .raise()
                .classed("active", true);
        }
        barDelayHeight(slide) {
            let calculatedHeight = this._barHeightTimeMultiplier * slide.delay;
            return Math.max(calculatedHeight, 0);
        }
        barDurationHeight(slide) {
            let calculatedHeight = this._barHeightTimeMultiplier * slide.duration;
            return Math.max(calculatedHeight, this._minimumSlideDuration * this._barHeightTimeMultiplier);
        }
        barTotalHeight(slide) {
            let calculatedHeight = this.barDelayHeight(slide) +
                this.barDurationHeight(slide) +
                2 * this._resizebarheight;
            return calculatedHeight;
        }
        previousSlidesHeight(slide) {
            let myIndex = this._slideDeck.slides.indexOf(slide);
            let calculatedHeight = 50;
            for (let i = 0; i < myIndex; i++) {
                calculatedHeight += this.barTotalHeight(this._slideDeck.slides[i]);
            }
            return calculatedHeight;
        }
        updateTimeIndices(slideDeck) {
            this._timeIndexedSlides = [];
            let timeIndex = 0;
            slideDeck.slides.forEach(slide => {
                this._timeIndexedSlides.push({
                    slide: slide,
                    startTime: timeIndex
                });
                timeIndex += slide.delay + slide.duration;
            });
        }
        update() {
            this.updateTimeIndices(this._slideDeck);
            const allExistingNodes = this._slideTable
                .selectAll("g.slide")
                .data(this._slideDeck.slides, (d) => {
                return d.id;
            });
            const newNodes = allExistingNodes
                .enter()
                .append("g")
                .attr("class", "slide")
                .call(d3.drag()
                .clickDistance([2, 2])
                .on("start", this.moveDragStarted)
                .on("drag", firstArgThis(this.moveDragged))
                .on("end", firstArgThis(this.moveDragended)));
            newNodes
                .append("rect")
                .attr("class", "slides_delay_resize")
                .attr("x", this._barPadding)
                .attr("width", this._barWidth - 2 * this._barPadding)
                .attr("height", this._resizebarheight)
                .attr("cursor", "ns-resize")
                .call(d3.drag()
                .subject(firstArgThis(this.delaySubject))
                .on("drag", firstArgThis(this.delayDragged)));
            newNodes
                .append("rect")
                .attr("class", "slides_delay_rect")
                .attr("x", this._barPadding)
                .attr("y", 0)
                .attr("width", this._barWidth - 2 * this._barPadding)
                .on("click", this.onSelect);
            let slideGroup = newNodes
                .append("g")
                .attr("transform", "translate(5,0)")
                .attr("class", "slide_group")
                .on("mouseenter", this.onMouseEnter)
                .on("mouseleave", this.onMouseLeave);
            slideGroup
                .append("rect")
                .attr("class", "slides_rect")
                .attr("width", this._barWidth - 2 * this._barPadding)
                .attr("cursor", "move")
                .on("click", this.onSelect);
            slideGroup
                .append("text")
                .attr("class", "slides_text")
                .attr("x", 2 * this._barPadding)
                .attr("dy", ".35em");
            slideGroup
                .append("text")
                .attr("class", "slides_delaytext")
                .attr("x", 2 * this._barPadding)
                .attr("dy", ".35em");
            let toolbar = slideGroup.append("g").attr("class", "slide_toolbar");
            toolbar
                .append("svg:foreignObject")
                .attr("class", "slides_delete_icon")
                .attr("x", this._toolbarX)
                .attr("cursor", "pointer")
                .attr("width", 20)
                .attr("height", 20)
                .append("xhtml:body")
                .on("click", this.onDelete)
                .html('<i class="fa fa-trash-o"></i>');
            toolbar
                .append("svg:foreignObject")
                .attr("class", "slides_clone_icon")
                .attr("x", this._toolbarX + this._toolbarPadding)
                .attr("cursor", "pointer")
                .attr("width", 20)
                .attr("height", 20)
                .append("xhtml:body")
                .on("click", this.onClone)
                .html('<i class="fa fa-copy"></i>');
            const slidePlaceholder = this._slideTable.select("rect#slide_placeholder");
            const playerPlaceholder = this._slideTable.select("rect#player_placeholder");
            newNodes
                .append("text")
                .attr("class", "slides_durationtext")
                .attr("x", this._barPadding - 30)
                .attr("dy", "-.65em");
            newNodes
                .append("circle")
                .attr("class", "time")
                .attr("cx", 0)
                .attr("r", 3)
                .attr("fill", "black");
            newNodes
                .append("rect")
                .attr("class", "slides_duration_resize")
                .attr("x", this._barPadding)
                .attr("width", this._barWidth - 2 * this._barPadding)
                .attr("height", this._resizebarheight)
                .attr("cursor", "ns-resize")
                .call(d3.drag()
                .subject(firstArgThis(this.durationSubject))
                .on("drag", firstArgThis(this.durationDragged)));
            // Update all nodes
            const allNodes = newNodes
                .merge(allExistingNodes)
                .attr("transform", (slide) => {
                this._previousSlideY = this.previousSlidesHeight(slide);
                return "translate(30," + this.previousSlidesHeight(slide) + ")";
            });
            allNodes
                .select("rect.slides_delay_rect")
                .attr("height", (slide) => {
                return this.barDelayHeight(slide);
            });
            allNodes
                .select("rect.slides_delay_resize")
                .attr("y", (slide) => {
                return this.barDelayHeight(slide);
            });
            slideGroup = allNodes.select("g.slide_group");
            slideGroup
                .select("rect.slides_rect")
                .attr("selected", (slide) => {
                return this._slideDeck.selectedSlide === slide;
            })
                .attr("y", (slide) => {
                return this.barDelayHeight(slide) + this._resizebarheight;
            })
                .attr("height", (slide) => {
                this._placeholderY =
                    this._previousSlideY +
                        this.barDurationHeight(slide) +
                        this.barDelayHeight(slide) +
                        this._resizebarheight;
                return this.barDurationHeight(slide);
            });
            toolbar = allNodes.select("g.slide_toolbar");
            toolbar
                .select("foreignObject.slides_delete_icon")
                .attr("y", (slide) => {
                return (this.barDelayHeight(slide) +
                    this._resizebarheight +
                    2 * this._barPadding);
            });
            toolbar
                .select("foreignObject.slides_clone_icon")
                .attr("y", (slide) => {
                return (this.barDelayHeight(slide) +
                    this._resizebarheight +
                    2 * this._barPadding);
            });
            slideGroup
                .select("text.slides_text")
                .attr("y", (slide) => {
                return (this.barDelayHeight(slide) +
                    this._resizebarheight +
                    2 * this._barPadding);
            })
                .text((slide) => {
                return slide.name;
            });
            slideGroup
                .select("text.slides_delaytext")
                .attr("y", (slide) => {
                return (this.barDelayHeight(slide) +
                    this._resizebarheight +
                    1 * this._barPadding +
                    25);
            })
                .text((slide) => {
                return "transition: " + slide.delay / 1000;
            });
            allNodes.select("circle.time").attr("cy", (slide) => {
                return this.barDelayHeight(slide) + this._resizebarheight;
            });
            allNodes
                .select("rect.slides_duration_resize")
                .attr("y", (slide) => {
                return this.barTotalHeight(slide) - this._resizebarheight;
            });
            allNodes
                .select("text.slides_durationtext")
                .attr("y", (slide) => {
                return (this.barDelayHeight(slide) +
                    this._resizebarheight +
                    4 * this._barPadding -
                    7);
            })
                .text((slide) => {
                return slide.duration / 1000;
            });
            slidePlaceholder.attr("y", this._placeholderY + 20);
            playerPlaceholder.attr("y", 5);
            this._slideTable.select("line").attr("y2", this._placeholderY + 20);
            this._slideTable
                .select("foreignObject.slide_add")
                .attr("y", this._placeholderY + 26);
            this.animate();
            allExistingNodes.exit().remove();
        }
        animate() {
            if (this._player.status === STATUS.PLAYING) {
                this._slideTable
                    .select(".currentTime")
                    .transition()
                    .ease(d3.easeLinear)
                    .duration(this._slideDuration)
                    .attr("cy", this._nextSlideY)
                    .on("end", () => this.isLastSlide());
            }
            else {
                this._slideTable
                    .select(".currentTime")
                    .transition()
                    .ease(d3.easeLinear)
                    .duration(0);
            }
        }
        isLastSlide() {
            if (this._slideDeck.selectedSlide !== null) {
                if (this._slideDeck.slides.indexOf(this._slideDeck.selectedSlide) ===
                    this._slideDeck.slides.length - 1) {
                    setTimeout(() => {
                        this._nextSlideY = 50;
                        this._slideTable
                            .select(".currentTime")
                            .attr("cy", this._nextSlideY);
                        this._slideDeck.selectedSlide = this._slideDeck.slides[0];
                        this._slideTable
                            .select(".fa-pause")
                            .classed("fa-play", true)
                            .classed("fa-pause", false);
                        this._player.stop();
                        this._player.currentSlideIndex = 0;
                    }, 2000);
                }
            }
        }
        setPlaceholder(id) {
            this._slideTable
                .append("rect")
                .attr("id", id)
                .attr("class", "slides_placeholder")
                .attr("x", this._lineX1 + this._barPadding)
                .attr("y", 0)
                .attr("width", this._placeholderWidth)
                .attr("height", this._placeholderHeight);
        }
        setAddButton() {
            this._slideTable
                .append("svg:foreignObject")
                .attr("class", "slide_add")
                .attr("x", (this._tableWidth - 40) / 2)
                .attr("cursor", "pointer")
                .attr("width", 30)
                .attr("height", 30)
                .append("xhtml:body")
                .on("click", this.onAdd)
                .html('<i class="fa fa-file-text-o"></i>');
        }
        setPlayButton() {
            this._slideTable
                .append("svg:foreignObject")
                .attr("id", "slide_play")
                .attr("x", (this._tableWidth - 40) / 2 + 30)
                .attr("y", 10)
                .attr("cursor", "pointer")
                .attr("width", 30)
                .attr("height", 30)
                .append("xhtml:body")
                .on("click", this.onPlay)
                .html('<i class="fa fa-play"></i>');
        }
        setNextButton() {
            this._slideTable
                .append("svg:foreignObject")
                .attr("x", (this._tableWidth - 40) / 2 + 60)
                .attr("y", 10)
                .attr("cursor", "pointer")
                .attr("width", 30)
                .attr("height", 30)
                .append("xhtml:body")
                .on("click", this.onNext)
                .html('<i class="fa fa-forward"></i>');
        }
        setPreviousButton() {
            this._slideTable
                .append("svg:foreignObject")
                .attr("x", (this._tableWidth - 40) / 2 - 10)
                .attr("y", 10)
                .attr("cursor", "pointer")
                .attr("width", 30)
                .attr("height", 30)
                .append("xhtml:body")
                .on("click", this.onPrevious)
                .html('<i class="fa fa-backward"></i>');
        }
    }

    exports.SlideDeckVisualization = SlideDeckVisualization;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=slide-deck-visualization.umd.js.map
