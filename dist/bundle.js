!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=28)}([function(e,t,n){"use strict";var r=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},o=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return r(t(e),n)}),{left:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)<0?r=i+1:o=i}return r},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)>0?o=i:r=i+1}return r}}};var i=o(r);i.right,i.left;var a=Array.prototype;a.slice,a.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var s=function(e){for(var t,n,r,o=e.length,i=-1,a=0;++i<o;)a+=e[i].length;for(n=new Array(a);--o>=0;)for(t=(r=e[o]).length;--t>=0;)n[--a]=r[t];return n};Array.prototype.slice;var c={value:function(){}};function f(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new u(r)}function u(e){this._=e}function h(e,t){for(var n,r=0,o=e.length;r<o;++r)if((n=e[r]).name===t)return n.value}function l(e,t,n){for(var r=0,o=e.length;r<o;++r)if(e[r].name===t){e[r]=c,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}u.prototype=f.prototype={constructor:u,on:function(e,t){var n,r,o=this._,i=(r=o,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),a=-1,s=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++a<s;)if(n=(e=i[a]).type)o[n]=l(o[n],e.name,t);else if(null==t)for(n in o)o[n]=l(o[n],e.name,null);return this}for(;++a<s;)if((n=(e=i[a]).type)&&(n=h(o[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new u(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,o)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,i=r.length;o<i;++o)r[o].value.apply(t,n)}};var d=f,p="http://www.w3.org/1999/xhtml",b={svg:"http://www.w3.org/2000/svg",xhtml:p,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),b.hasOwnProperty(t)?{space:b[t],local:e}:e};var g=function(e){var t=y(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===p&&t.documentElement.namespaceURI===p?t.createElement(e):t.createElementNS(n,e)}})(t)};function m(){}var _=function(e){return null==e?m:function(){return this.querySelector(e)}};function v(){return[]}var w=function(e){return null==e?v:function(){return this.querySelectorAll(e)}},x=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var F=document.documentElement;if(!F.matches){var C=F.webkitMatchesSelector||F.msMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector;x=function(e){return function(){return C.call(this,e)}}}}var A=x,k=function(e){return new Array(e.length)};function E(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}E.prototype={constructor:E,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var T="$";function S(e,t,n,r,o,i){for(var a,s=0,c=t.length,f=i.length;s<f;++s)(a=t[s])?(a.__data__=i[s],r[s]=a):n[s]=new E(e,i[s]);for(;s<c;++s)(a=t[s])&&(o[s]=a)}function M(e,t,n,r,o,i,a){var s,c,f,u={},h=t.length,l=i.length,d=new Array(h);for(s=0;s<h;++s)(c=t[s])&&(d[s]=f=T+a.call(c,c.__data__,s,t),f in u?o[s]=c:u[f]=c);for(s=0;s<l;++s)(c=u[f=T+a.call(e,i[s],s,i)])?(r[s]=c,c.__data__=i[s],u[f]=null):n[s]=new E(e,i[s]);for(s=0;s<h;++s)(c=t[s])&&u[d[s]]===c&&(o[s]=c)}function D(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var N=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function P(e,t){return e.style.getPropertyValue(t)||N(e).getComputedStyle(e,null).getPropertyValue(t)}function O(e){return e.trim().split(/^|\s+/)}function B(e){return e.classList||new R(e)}function R(e){this._node=e,this._names=O(e.getAttribute("class")||"")}function j(e,t){for(var n=B(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function U(e,t){for(var n=B(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}R.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function I(){this.textContent=""}function L(){this.innerHTML=""}function q(){this.nextSibling&&this.parentNode.appendChild(this)}function z(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Y(){return null}function H(){var e=this.parentNode;e&&e.removeChild(this)}function X(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function $(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var V={},W=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(V={mouseenter:"mouseover",mouseleave:"mouseout"}));function G(e,t,n){return e=J(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function J(e,t,n){return function(r){var o=W;W=r;try{e.call(this,this.__data__,t,n)}finally{W=o}}}function Z(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?t.length=o:delete this.__on}}}function K(e,t,n){var r=V.hasOwnProperty(e.type)?G:J;return function(o,i,a){var s,c=this.__on,f=r(t,i,a);if(c)for(var u=0,h=c.length;u<h;++u)if((s=c[u]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=f,s.capture=n),void(s.value=t);this.addEventListener(e.type,f,n),s={type:e.type,name:e.name,value:t,listener:f,capture:n},c?c.push(s):this.__on=[s]}}function Q(e,t,n,r){var o=W;e.sourceEvent=W,W=e;try{return t.apply(n,r)}finally{W=o}}function ee(e,t,n){var r=N(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}var te=[null];function ne(e,t){this._groups=e,this._parents=t}function re(){return new ne([[document.documentElement]],te)}ne.prototype=re.prototype={constructor:ne,select:function(e){"function"!=typeof e&&(e=_(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a,s=t[o],c=s.length,f=r[o]=new Array(c),u=0;u<c;++u)(i=s[u])&&(a=e.call(i,i.__data__,u,s))&&("__data__"in i&&(a.__data__=i.__data__),f[u]=a);return new ne(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=w(e));for(var t=this._groups,n=t.length,r=[],o=[],i=0;i<n;++i)for(var a,s=t[i],c=s.length,f=0;f<c;++f)(a=s[f])&&(r.push(e.call(a,a.__data__,f,s)),o.push(a));return new ne(r,o)},filter:function(e){"function"!=typeof e&&(e=A(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],s=a.length,c=r[o]=[],f=0;f<s;++f)(i=a[f])&&e.call(i,i.__data__,f,a)&&c.push(i);return new ne(r,this._parents)},data:function(e,t){if(!e)return p=new Array(this.size()),u=-1,this.each(function(e){p[++u]=e}),p;var n,r=t?M:S,o=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var a=i.length,s=new Array(a),c=new Array(a),f=new Array(a),u=0;u<a;++u){var h=o[u],l=i[u],d=l.length,p=e.call(h,h&&h.__data__,u,o),b=p.length,y=c[u]=new Array(b),g=s[u]=new Array(b);r(h,l,y,g,f[u]=new Array(d),p,t);for(var m,_,v=0,w=0;v<b;++v)if(m=y[v]){for(v>=w&&(w=v+1);!(_=g[w])&&++w<b;);m._next=_||null}}return(s=new ne(s,o))._enter=c,s._exit=f,s},enter:function(){return new ne(this._enter||this._groups.map(k),this._parents)},exit:function(){return new ne(this._exit||this._groups.map(k),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),s=0;s<i;++s)for(var c,f=t[s],u=n[s],h=f.length,l=a[s]=new Array(h),d=0;d<h;++d)(c=f[d]||u[d])&&(l[d]=c);for(;s<r;++s)a[s]=t[s];return new ne(a,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=D);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,s=n[i],c=s.length,f=o[i]=new Array(c),u=0;u<c;++u)(a=s[u])&&(f[u]=a);f.sort(t)}return new ne(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],a=0,s=i.length;a<s;++a)(o=i[a])&&e.call(o,o.__data__,a,i);return this},attr:function(e,t){var n=y(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):P(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=O(e+"");if(arguments.length<2){for(var r=B(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?j:U)(this,e)}}:t?function(e){return function(){j(this,e)}}:function(e){return function(){U(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?I:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?L:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(q)},lower:function(){return this.each(z)},append:function(e){var t="function"==typeof e?e:g(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:g(e),r=null==t?Y:"function"==typeof t?t:_(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(H)},clone:function(e){return this.select(e?$:X)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,i=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),a=i.length;if(!(arguments.length<2)){for(s=t?K:Z,null==n&&(n=!1),r=0;r<a;++r)this.each(s(i[r],t,n));return this}var s=this.node().__on;if(s)for(var c,f=0,u=s.length;f<u;++f)for(r=0,c=s[f];r<a;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return ee(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return ee(this,e,t)}})(e,t))}};var oe=re,ie=function(e){return"string"==typeof e?new ne([[document.querySelector(e)]],[document.documentElement]):new ne([[e]],te)},ae=0;function se(){this._="@"+(++ae).toString(36)}se.prototype=function(){return new se}.prototype={constructor:se,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}};var ce=function(){for(var e,t=W;e=t.sourceEvent;)t=e;return t},fe=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]},ue=function(e){var t=ce();return t.changedTouches&&(t=t.changedTouches[0]),fe(e,t)},he=function(e,t,n){arguments.length<3&&(n=t,t=ce().changedTouches);for(var r,o=0,i=t?t.length:0;o<i;++o)if((r=t[o]).identifier===n)return fe(e,r);return null};function le(){W.stopImmediatePropagation()}var de=function(){W.preventDefault(),W.stopImmediatePropagation()},pe=function(e){var t=e.document.documentElement,n=ie(e).on("dragstart.drag",de,!0);"onselectstart"in t?n.on("selectstart.drag",de,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};function be(e,t){var n=e.document.documentElement,r=ie(e).on("dragstart.drag",null);t&&(r.on("click.drag",de,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var ye=function(e){return function(){return e}};function ge(e,t,n,r,o,i,a,s,c,f){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=o,this.x=i,this.y=a,this.dx=s,this.dy=c,this._=f}function me(){return!W.button}function _e(){return this.parentNode}function ve(e){return null==e?{x:W.x,y:W.y}:e}function we(){return"ontouchstart"in this}ge.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};var xe=function(){var e,t,n,r,o=me,i=_e,a=ve,s=we,c={},f=d("start","drag","end"),u=0,h=0;function l(e){e.on("mousedown.drag",p).filter(s).on("touchstart.drag",g).on("touchmove.drag",m).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&o.apply(this,arguments)){var a=v("mouse",i.apply(this,arguments),ue,this,arguments);a&&(ie(W.view).on("mousemove.drag",b,!0).on("mouseup.drag",y,!0),pe(W.view),le(),n=!1,e=W.clientX,t=W.clientY,a("start"))}}function b(){if(de(),!n){var r=W.clientX-e,o=W.clientY-t;n=r*r+o*o>h}c.mouse("drag")}function y(){ie(W.view).on("mousemove.drag mouseup.drag",null),be(W.view,n),de(),c.mouse("end")}function g(){if(o.apply(this,arguments)){var e,t,n=W.changedTouches,r=i.apply(this,arguments),a=n.length;for(e=0;e<a;++e)(t=v(n[e].identifier,r,he,this,arguments))&&(le(),t("start"))}}function m(){var e,t,n=W.changedTouches,r=n.length;for(e=0;e<r;++e)(t=c[n[e].identifier])&&(de(),t("drag"))}function _(){var e,t,n=W.changedTouches,o=n.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),e=0;e<o;++e)(t=c[n[e].identifier])&&(le(),t("end"))}function v(e,t,n,r,o){var i,s,h,d=n(t,e),p=f.copy();if(Q(new ge(l,"beforestart",i,e,u,d[0],d[1],0,0,p),function(){return null!=(W.subject=i=a.apply(r,o))&&(s=i.x-d[0]||0,h=i.y-d[1]||0,!0)}))return function a(f){var b,y=d;switch(f){case"start":c[e]=a,b=u++;break;case"end":delete c[e],--u;case"drag":d=n(t,e),b=u}Q(new ge(l,f,i,e,b,d[0]+s,d[1]+h,d[0]-y[0],d[1]-y[1],p),p.apply,p,[f,r,o])}}return l.filter=function(e){return arguments.length?(o="function"==typeof e?e:ye(!!e),l):o},l.container=function(e){return arguments.length?(i="function"==typeof e?e:ye(e),l):i},l.subject=function(e){return arguments.length?(a="function"==typeof e?e:ye(e),l):a},l.touchable=function(e){return arguments.length?(s="function"==typeof e?e:ye(!!e),l):s},l.on=function(){var e=f.on.apply(f,arguments);return e===f?l:e},l.clickDistance=function(e){return arguments.length?(h=(e=+e)*e,l):Math.sqrt(h)},l},Fe=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Ce(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Ae(){}var ke="\\s*([+-]?\\d+)\\s*",Ee="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Se=/^#([0-9a-f]{3})$/,Me=/^#([0-9a-f]{6})$/,De=new RegExp("^rgb\\("+[ke,ke,ke]+"\\)$"),Ne=new RegExp("^rgb\\("+[Te,Te,Te]+"\\)$"),Pe=new RegExp("^rgba\\("+[ke,ke,ke,Ee]+"\\)$"),Oe=new RegExp("^rgba\\("+[Te,Te,Te,Ee]+"\\)$"),Be=new RegExp("^hsl\\("+[Ee,Te,Te]+"\\)$"),Re=new RegExp("^hsla\\("+[Ee,Te,Te,Ee]+"\\)$"),je={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ue(e){var t;return e=(e+"").trim().toLowerCase(),(t=Se.exec(e))?new Ye((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=Me.exec(e))?Ie(parseInt(t[1],16)):(t=De.exec(e))?new Ye(t[1],t[2],t[3],1):(t=Ne.exec(e))?new Ye(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Pe.exec(e))?Le(t[1],t[2],t[3],t[4]):(t=Oe.exec(e))?Le(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Be.exec(e))?Xe(t[1],t[2]/100,t[3]/100,1):(t=Re.exec(e))?Xe(t[1],t[2]/100,t[3]/100,t[4]):je.hasOwnProperty(e)?Ie(je[e]):"transparent"===e?new Ye(NaN,NaN,NaN,0):null}function Ie(e){return new Ye(e>>16&255,e>>8&255,255&e,1)}function Le(e,t,n,r){return r<=0&&(e=t=n=NaN),new Ye(e,t,n,r)}function qe(e){return e instanceof Ae||(e=Ue(e)),e?new Ye((e=e.rgb()).r,e.g,e.b,e.opacity):new Ye}function ze(e,t,n,r){return 1===arguments.length?qe(e):new Ye(e,t,n,null==r?1:r)}function Ye(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function He(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Xe(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Ve(e,t,n,r)}function $e(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Ve)return new Ve(e.h,e.s,e.l,e.opacity);if(e instanceof Ae||(e=Ue(e)),!e)return new Ve;if(e instanceof Ve)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,o=Math.min(t,n,r),i=Math.max(t,n,r),a=NaN,s=i-o,c=(i+o)/2;return s?(a=t===i?(n-r)/s+6*(n<r):n===i?(r-t)/s+2:(t-n)/s+4,s/=c<.5?i+o:2-i-o,a*=60):s=c>0&&c<1?0:a,new Ve(a,s,c,e.opacity)}(e):new Ve(e,t,n,null==r?1:r)}function Ve(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function We(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Fe(Ae,Ue,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Fe(Ye,ze,Ce(Ae,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Ye(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Ye(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+He(this.r)+He(this.g)+He(this.b)},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),Fe(Ve,$e,Ce(Ae,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Ve(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Ve(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new Ye(We(e>=240?e-240:e+120,o,r),We(e,o,r),We(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Ge=Math.PI/180,Je=180/Math.PI,Ze=.96422,Ke=1,Qe=.82521,et=4/29,tt=6/29,nt=3*tt*tt,rt=tt*tt*tt;function ot(e){if(e instanceof at)return new at(e.l,e.a,e.b,e.opacity);if(e instanceof dt){if(isNaN(e.h))return new at(e.l,0,0,e.opacity);var t=e.h*Ge;return new at(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof Ye||(e=qe(e));var n,r,o=ut(e.r),i=ut(e.g),a=ut(e.b),s=st((.2225045*o+.7168786*i+.0606169*a)/Ke);return o===i&&i===a?n=r=s:(n=st((.4360747*o+.3850649*i+.1430804*a)/Ze),r=st((.0139322*o+.0971045*i+.7141733*a)/Qe)),new at(116*s-16,500*(n-s),200*(s-r),e.opacity)}function it(e,t,n,r){return 1===arguments.length?ot(e):new at(e,t,n,null==r?1:r)}function at(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function st(e){return e>rt?Math.pow(e,1/3):e/nt+et}function ct(e){return e>tt?e*e*e:nt*(e-et)}function ft(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function ut(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function ht(e){if(e instanceof dt)return new dt(e.h,e.c,e.l,e.opacity);if(e instanceof at||(e=ot(e)),0===e.a&&0===e.b)return new dt(NaN,0,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*Je;return new dt(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function lt(e,t,n,r){return 1===arguments.length?ht(e):new dt(e,t,n,null==r?1:r)}function dt(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}Fe(at,it,Ce(Ae,{brighter:function(e){return new at(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new at(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new Ye(ft(3.1338561*(t=Ze*ct(t))-1.6168667*(e=Ke*ct(e))-.4906146*(n=Qe*ct(n))),ft(-.9787684*t+1.9161415*e+.033454*n),ft(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),Fe(dt,lt,Ce(Ae,{brighter:function(e){return new dt(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new dt(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return ot(this).rgb()}}));var pt=-.29227,bt=-.90649,yt=1.97294,gt=yt*bt,mt=1.78277*yt,_t=1.78277*pt- -.14861*bt;function vt(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof wt)return new wt(e.h,e.s,e.l,e.opacity);e instanceof Ye||(e=qe(e));var t=e.r/255,n=e.g/255,r=e.b/255,o=(_t*r+gt*t-mt*n)/(_t+gt-mt),i=r-o,a=(yt*(n-o)-pt*i)/bt,s=Math.sqrt(a*a+i*i)/(yt*o*(1-o)),c=s?Math.atan2(a,i)*Je-120:NaN;return new wt(c<0?c+360:c,s,o,e.opacity)}(e):new wt(e,t,n,null==r?1:r)}function wt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function xt(e,t,n,r,o){var i=e*e,a=i*e;return((1-3*e+3*i-a)*t+(4-6*i+3*a)*n+(1+3*e+3*i-3*a)*r+a*o)/6}Fe(wt,vt,Ce(Ae,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new wt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new wt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*Ge,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),o=Math.sin(e);return new Ye(255*(t+n*(-.14861*r+1.78277*o)),255*(t+n*(pt*r+bt*o)),255*(t+n*(yt*r)),this.opacity)}}));var Ft=function(e){return function(){return e}};function Ct(e,t){return function(n){return e+n*t}}function At(e,t){var n=t-e;return n?Ct(e,n>180||n<-180?n-360*Math.round(n/360):n):Ft(isNaN(e)?t:e)}function kt(e){return 1==(e=+e)?Et:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Ft(isNaN(t)?n:t)}}function Et(e,t){var n=t-e;return n?Ct(e,n):Ft(isNaN(e)?t:e)}var Tt=function e(t){var n=kt(t);function r(e,t){var r=n((e=ze(e)).r,(t=ze(t)).r),o=n(e.g,t.g),i=n(e.b,t.b),a=Et(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=o(t),e.b=i(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function St(e){return function(t){var n,r,o=t.length,i=new Array(o),a=new Array(o),s=new Array(o);for(n=0;n<o;++n)r=ze(t[n]),i[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return i=e(i),a=e(a),s=e(s),r.opacity=1,function(e){return r.r=i(e),r.g=a(e),r.b=s(e),r+""}}}var Mt=St(function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),o=e[r],i=e[r+1],a=r>0?e[r-1]:2*o-i,s=r<t-1?e[r+2]:2*i-o;return xt((n-r/t)*t,a,o,i,s)}}),Dt=(St(function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),o=e[(r+t-1)%t],i=e[r%t],a=e[(r+1)%t],s=e[(r+2)%t];return xt((n-r/t)*t,o,i,a,s)}}),function(e,t){return t-=e=+e,function(n){return e+t*n}}),Nt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pt=new RegExp(Nt.source,"g");var Ot,Bt,Rt,jt,Ut=function(e,t){var n,r,o,i=Nt.lastIndex=Pt.lastIndex=0,a=-1,s=[],c=[];for(e+="",t+="";(n=Nt.exec(e))&&(r=Pt.exec(t));)(o=r.index)>i&&(o=t.slice(i,o),s[a]?s[a]+=o:s[++a]=o),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,c.push({i:a,x:Dt(n,r)})),i=Pt.lastIndex;return i<t.length&&(o=t.slice(i),s[a]?s[a]+=o:s[++a]=o),s.length<2?c[0]?function(e){return function(t){return e(t)+""}}(c[0].x):function(e){return function(){return e}}(t):(t=c.length,function(e){for(var n,r=0;r<t;++r)s[(n=c[r]).i]=n.x(e);return s.join("")})},It=180/Math.PI,Lt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},qt=function(e,t,n,r,o,i){var a,s,c;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(c=e*n+t*r)&&(n-=e*c,r-=t*c),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,c/=s),e*r<t*n&&(e=-e,t=-t,c=-c,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(t,e)*It,skewX:Math.atan(c)*It,scaleX:a,scaleY:s}};function zt(e,t,n,r){function o(e){return e.length?e.pop()+" ":""}return function(i,a){var s=[],c=[];return i=e(i),a=e(a),function(e,r,o,i,a,s){if(e!==o||r!==i){var c=a.push("translate(",null,t,null,n);s.push({i:c-4,x:Dt(e,o)},{i:c-2,x:Dt(r,i)})}else(o||i)&&a.push("translate("+o+t+i+n)}(i.translateX,i.translateY,a.translateX,a.translateY,s,c),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Dt(e,t)})):t&&n.push(o(n)+"rotate("+t+r)}(i.rotate,a.rotate,s,c),function(e,t,n,i){e!==t?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Dt(e,t)}):t&&n.push(o(n)+"skewX("+t+r)}(i.skewX,a.skewX,s,c),function(e,t,n,r,i,a){if(e!==n||t!==r){var s=i.push(o(i)+"scale(",null,",",null,")");a.push({i:s-4,x:Dt(e,n)},{i:s-2,x:Dt(t,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,s,c),i=a=null,function(e){for(var t,n=-1,r=c.length;++n<r;)s[(t=c[n]).i]=t.x(e);return s.join("")}}}var Yt=zt(function(e){return"none"===e?Lt:(Ot||(Ot=document.createElement("DIV"),Bt=document.documentElement,Rt=document.defaultView),Ot.style.transform=e,e=Rt.getComputedStyle(Bt.appendChild(Ot),null).getPropertyValue("transform"),Bt.removeChild(Ot),e=e.slice(7,-1).split(","),qt(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),Ht=zt(function(e){return null==e?Lt:(jt||(jt=document.createElementNS("http://www.w3.org/2000/svg","g")),jt.setAttribute("transform",e),(e=jt.transform.baseVal.consolidate())?(e=e.matrix,qt(e.a,e.b,e.c,e.d,e.e,e.f)):Lt)},", ",")",")");Math.SQRT2;function Xt(e){return function(t,n){var r=e((t=$e(t)).h,(n=$e(n)).h),o=Et(t.s,n.s),i=Et(t.l,n.l),a=Et(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=o(e),t.l=i(e),t.opacity=a(e),t+""}}}Xt(At),Xt(Et);function $t(e){return function(t,n){var r=e((t=lt(t)).h,(n=lt(n)).h),o=Et(t.c,n.c),i=Et(t.l,n.l),a=Et(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=o(e),t.l=i(e),t.opacity=a(e),t+""}}}$t(At),$t(Et);function Vt(e){return function t(n){function r(t,r){var o=e((t=vt(t)).h,(r=vt(r)).h),i=Et(t.s,r.s),a=Et(t.l,r.l),s=Et(t.opacity,r.opacity);return function(e){return t.h=o(e),t.s=i(e),t.l=a(Math.pow(e,n)),t.opacity=s(e),t+""}}return n=+n,r.gamma=t,r}(1)}Vt(At);var Wt=Vt(Et);var Gt,Jt,Zt=0,Kt=0,Qt=0,en=1e3,tn=0,nn=0,rn=0,on="object"==typeof performance&&performance.now?performance:Date,an="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function sn(){return nn||(an(cn),nn=on.now()+rn)}function cn(){nn=0}function fn(){this._call=this._time=this._next=null}function un(e,t,n){var r=new fn;return r.restart(e,t,n),r}function hn(){nn=(tn=on.now())+rn,Zt=Kt=0;try{!function(){sn(),++Zt;for(var e,t=Gt;t;)(e=nn-t._time)>=0&&t._call.call(null,e),t=t._next;--Zt}()}finally{Zt=0,function(){var e,t,n=Gt,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Gt=t);Jt=e,dn(r)}(),nn=0}}function ln(){var e=on.now(),t=e-tn;t>en&&(rn-=t,tn=e)}function dn(e){Zt||(Kt&&(Kt=clearTimeout(Kt)),e-nn>24?(e<1/0&&(Kt=setTimeout(hn,e-on.now()-rn)),Qt&&(Qt=clearInterval(Qt))):(Qt||(tn=on.now(),Qt=setInterval(ln,en)),Zt=1,an(hn)))}fn.prototype=un.prototype={constructor:fn,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?sn():+n)+(null==t?0:+t),this._next||Jt===this||(Jt?Jt._next=this:Gt=this,Jt=this),this._call=e,this._time=n,dn()},stop:function(){this._call&&(this._call=null,this._time=1/0,dn())}};var pn=function(e,t,n){var r=new fn;return t=null==t?0:+t,r.restart(function(n){r.stop(),e(n+t)},t,n),r},bn=d("start","end","interrupt"),yn=[],gn=0,mn=1,_n=2,vn=3,wn=4,xn=5,Fn=6,Cn=function(e,t,n,r,o,i){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,o=e.__transition;function i(c){var f,u,h,l;if(n.state!==mn)return s();for(f in o)if((l=o[f]).name===n.name){if(l.state===vn)return pn(i);l.state===wn?(l.state=Fn,l.timer.stop(),l.on.call("interrupt",e,e.__data__,l.index,l.group),delete o[f]):+f<t&&(l.state=Fn,l.timer.stop(),delete o[f])}if(pn(function(){n.state===vn&&(n.state=wn,n.timer.restart(a,n.delay,n.time),a(c))}),n.state=_n,n.on.call("start",e,e.__data__,n.index,n.group),n.state===_n){for(n.state=vn,r=new Array(h=n.tween.length),f=0,u=-1;f<h;++f)(l=n.tween[f].value.call(e,e.__data__,n.index,n.group))&&(r[++u]=l);r.length=u+1}}function a(t){for(var o=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(s),n.state=xn,1),i=-1,a=r.length;++i<a;)r[i].call(null,o);n.state===xn&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){for(var r in n.state=Fn,n.timer.stop(),delete o[t],o)return;delete e.__transition}o[t]=n,n.timer=un(function(e){n.state=mn,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)},0,n.time)}(e,n,{name:t,index:r,group:o,on:bn,tween:yn,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:gn})};function An(e,t){var n=En(e,t);if(n.state>gn)throw new Error("too late; already scheduled");return n}function kn(e,t){var n=En(e,t);if(n.state>_n)throw new Error("too late; already started");return n}function En(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var Tn=function(e,t){var n,r,o,i=e.__transition,a=!0;if(i){for(o in t=null==t?null:t+"",i)(n=i[o]).name===t?(r=n.state>_n&&n.state<xn,n.state=Fn,n.timer.stop(),r&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete i[o]):a=!1;a&&delete e.__transition}};function Sn(e,t,n){var r=e._id;return e.each(function(){var e=kn(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return En(e,r).value[t]}}var Mn=function(e,t){var n;return("number"==typeof t?Dt:t instanceof Ue?Tt:(n=Ue(t))?(t=n,Tt):Ut)(e,t)};var Dn=oe.prototype.constructor;var Nn=0;function Pn(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function On(){return++Nn}var Bn=oe.prototype;function Rn(e){return+e}Pn.prototype=function(e){return oe().transition(e)}.prototype={constructor:Pn,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=_(e));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var s,c,f=r[a],u=f.length,h=i[a]=new Array(u),l=0;l<u;++l)(s=f[l])&&(c=e.call(s,s.__data__,l,f))&&("__data__"in s&&(c.__data__=s.__data__),h[l]=c,Cn(h[l],t,n,l,h,En(s,n)));return new Pn(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=w(e));for(var r=this._groups,o=r.length,i=[],a=[],s=0;s<o;++s)for(var c,f=r[s],u=f.length,h=0;h<u;++h)if(c=f[h]){for(var l,d=e.call(c,c.__data__,h,f),p=En(c,n),b=0,y=d.length;b<y;++b)(l=d[b])&&Cn(l,t,n,b,d,p);i.push(d),a.push(c)}return new Pn(i,a,t,n)},filter:function(e){"function"!=typeof e&&(e=A(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var i,a=t[o],s=a.length,c=r[o]=[],f=0;f<s;++f)(i=a[f])&&e.call(i,i.__data__,f,a)&&c.push(i);return new Pn(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,o=n.length,i=Math.min(r,o),a=new Array(r),s=0;s<i;++s)for(var c,f=t[s],u=n[s],h=f.length,l=a[s]=new Array(h),d=0;d<h;++d)(c=f[d]||u[d])&&(l[d]=c);for(;s<r;++s)a[s]=t[s];return new Pn(a,this._parents,this._name,this._id)},selection:function(){return new Dn(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=On(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,s=r[i],c=s.length,f=0;f<c;++f)if(a=s[f]){var u=En(a,t);Cn(a,e,n,f,s,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new Pn(r,this._parents,e,n)},call:Bn.call,nodes:Bn.nodes,node:Bn.node,size:Bn.size,empty:Bn.empty,each:Bn.each,on:function(e,t){var n=this._id;return arguments.length<2?En(this.node(),n).on.on(e):this.each(function(e,t,n){var r,o,i=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?An:kn;return function(){var a=i(this,e),s=a.on;s!==r&&(o=(r=s).copy()).on(t,n),a.on=o}}(n,e,t))},attr:function(e,t){var n=y(e),r="transform"===n?Ht:Mn;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var r,o,i;return function(){var a,s=n(this);if(null!=s)return(a=this.getAttributeNS(e.space,e.local))===s?null:a===r&&s===o?i:i=t(r=a,o=s);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var r,o,i;return function(){var a,s=n(this);if(null!=s)return(a=this.getAttribute(e))===s?null:a===r&&s===o?i:i=t(r=a,o=s);this.removeAttribute(e)}})(n,r,Sn(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var r,o;return function(){var i=this.getAttributeNS(e.space,e.local);return i===n?null:i===r?o:o=t(r=i,n)}}:function(e,t,n){var r,o;return function(){var i=this.getAttribute(e);return i===n?null:i===r?o:o=t(r=i,n)}})(n,r,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=y(e);return this.tween(n,(r.local?function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttributeNS(e.space,e.local,r(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttribute(e,r(t))}}return n._value=t,n})(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Yt:Mn;return null==t?this.styleTween(e,function(e,t){var n,r,o;return function(){var i=P(this,e),a=(this.style.removeProperty(e),P(this,e));return i===a?null:i===n&&a===r?o:o=t(n=i,r=a)}}(e,r)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var r,o,i;return function(){var a=P(this,e),s=n(this);return null==s&&(this.style.removeProperty(e),s=P(this,e)),a===s?null:a===r&&s===o?i:i=t(r=a,o=s)}}(e,r,Sn(this,"style."+e,t)):function(e,t,n){var r,o;return function(){var i=P(this,e);return i===n?null:i===r?o:o=t(r=i,n)}}(e,r,t+""),n)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function(e,t,n){function r(){var r=this,o=t.apply(r,arguments);return o&&function(t){r.style.setProperty(e,o(t),n)}}return r._value=t,r}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Sn(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,o=En(this.node(),n).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===e)return r.value;return null}return this.each((null==t?function(e,t){var n,r;return function(){var o=kn(this,e),i=o.tween;if(i!==n)for(var a=0,s=(r=n=i).length;a<s;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}o.tween=r}}:function(e,t,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=kn(this,e),a=i.tween;if(a!==r){o=(r=a).slice();for(var s={name:t,value:n},c=0,f=o.length;c<f;++c)if(o[c].name===t){o[c]=s;break}c===f&&o.push(s)}i.tween=o}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){An(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){An(this,e).delay=t}})(t,e)):En(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){kn(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){kn(this,e).duration=t}})(t,e)):En(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){kn(this,e).ease=t}}(t,e)):En(this.node(),t).ease}};(function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n})(3),function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),Math.PI;(function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n})(1.70158),function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158);var jn=2*Math.PI,Un=(function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=jn);function o(e){return t*Math.pow(2,10*--e)*Math.sin((r-e)/n)}return o.amplitude=function(t){return e(t,n*jn)},o.period=function(n){return e(t,n)},o}(1,.3),function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=jn);function o(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+r)/n)}return o.amplitude=function(t){return e(t,n*jn)},o.period=function(n){return e(t,n)},o}(1,.3),function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=jn);function o(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((r-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((r+e)/n))/2}return o.amplitude=function(t){return e(t,n*jn)},o.period=function(n){return e(t,n)},o}(1,.3),{time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}});function In(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Un.time=sn(),Un;return n}oe.prototype.interrupt=function(e){return this.each(function(){Tn(this,e)})},oe.prototype.transition=function(e){var t,n;e instanceof Pn?(t=e._id,e=e._name):(t=On(),(n=Un).time=sn(),e=null==e?null:e+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,s=r[i],c=s.length,f=0;f<c;++f)(a=s[f])&&Cn(a,e,t,f,s,n||In(a,t));return new Pn(r,this._parents,e,t)};["e","w"].map(Ln),["n","s"].map(Ln),["n","e","s","w","nw","ne","se","sw"].map(Ln);function Ln(e){return{type:e}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var qn=Math.PI,zn=2*qn,Yn=zn-1e-6;function Hn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Xn(){return new Hn}Hn.prototype=Xn.prototype={constructor:Hn,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,o,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(e,t,n,r,o){e=+e,t=+t,n=+n,r=+r,o=+o;var i=this._x1,a=this._y1,s=n-e,c=r-t,f=i-e,u=a-t,h=f*f+u*u;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(h>1e-6)if(Math.abs(u*s-c*f)>1e-6&&o){var l=n-i,d=r-a,p=s*s+c*c,b=l*l+d*d,y=Math.sqrt(p),g=Math.sqrt(h),m=o*Math.tan((qn-Math.acos((p+h-b)/(2*y*g)))/2),_=m/g,v=m/y;Math.abs(_-1)>1e-6&&(this._+="L"+(e+_*f)+","+(t+_*u)),this._+="A"+o+","+o+",0,0,"+ +(u*l>f*d)+","+(this._x1=e+v*s)+","+(this._y1=t+v*c)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,o,i){e=+e,t=+t;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),c=e+a,f=t+s,u=1^i,h=i?r-o:o-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),n&&(h<0&&(h=h%zn+zn),h>Yn?this._+="A"+n+","+n+",0,1,"+u+","+(e-a)+","+(t-s)+"A"+n+","+n+",0,1,"+u+","+(this._x1=c)+","+(this._y1=f):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=qn)+","+u+","+(this._x1=e+n*Math.cos(o))+","+(this._y1=t+n*Math.sin(o))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};function $n(){}function Vn(e,t){var n=new $n;if(e instanceof $n)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,o=-1,i=e.length;if(null==t)for(;++o<i;)n.set(o,e[o]);else for(;++o<i;)n.set(t(r=e[o],o,e),r)}else if(e)for(var a in e)n.set(a,e[a]);return n}$n.prototype=Vn.prototype={constructor:$n,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Wn=Vn;function Gn(){}var Jn=Wn.prototype;function Zn(e,t){var n=new Gn;if(e instanceof Gn)e.each(function(e){n.add(e)});else if(e){var r=-1,o=e.length;if(null==t)for(;++r<o;)n.add(e[r]);else for(;++r<o;)n.add(t(e[r],r,e))}return n}Gn.prototype=Zn.prototype={constructor:Gn,has:Jn.has,add:function(e){return this["$"+(e+="")]=e,this},remove:Jn.remove,clear:Jn.clear,values:Jn.keys,size:Jn.size,empty:Jn.empty,each:Jn.each};Array.prototype.slice;var Kn={},Qn={},er=34,tr=10,nr=13;function rr(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}var or=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,o=[],i=e.length,a=0,s=0,c=i<=0,f=!1;function u(){if(c)return Qn;if(f)return f=!1,Kn;var t,r,o=a;if(e.charCodeAt(o)===er){for(;a++<i&&e.charCodeAt(a)!==er||e.charCodeAt(++a)===er;);return(t=a)>=i?c=!0:(r=e.charCodeAt(a++))===tr?f=!0:r===nr&&(f=!0,e.charCodeAt(a)===tr&&++a),e.slice(o+1,t-1).replace(/""/g,'"')}for(;a<i;){if((r=e.charCodeAt(t=a++))===tr)f=!0;else if(r===nr)f=!0,e.charCodeAt(a)===tr&&++a;else if(r!==n)continue;return e.slice(o,t)}return c=!0,e.slice(o,i)}for(e.charCodeAt(i-1)===tr&&--i,e.charCodeAt(i-1)===nr&&--i;(r=u())!==Qn;){for(var h=[];r!==Kn&&r!==Qn;)h.push(r),r=u();t&&null==(h=t(h,s++))||o.push(h)}return o}function o(t){return t.map(i).join(e)}function i(e){return null==e?"":t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,o,i=r(e,function(e,r){if(n)return n(e,r-1);o=e,n=t?function(e,t){var n=rr(e);return function(r,o){return t(n(r),o,e)}}(e,t):rr(e)});return i.columns=o||[],i},parseRows:r,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var r in e)r in t||n.push(t[r]=r)}),n}(t)),[n.map(i).join(e)].concat(t.map(function(t){return n.map(function(e){return i(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(o).join("\n")}}},ir=or(","),ar=ir.parse,sr=(ir.parseRows,ir.format,ir.formatRows,or("\t")),cr=sr.parse;sr.parseRows,sr.format,sr.formatRows;function fr(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var ur=function(e,t){return fetch(e,t).then(fr)};function hr(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),ur(t,n).then(function(t){return e(t,r)})}}hr(ar),hr(cr);function lr(e){return function(t,n){return ur(t,n).then(function(t){return(new DOMParser).parseFromString(t,e)})}}lr("application/xml"),lr("text/html"),lr("image/svg+xml");function dr(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var o,i,a,s,c,f,u,h,l,d=e._root,p={data:r},b=e._x0,y=e._y0,g=e._x1,m=e._y1;if(!d)return e._root=p,e;for(;d.length;)if((f=t>=(i=(b+g)/2))?b=i:g=i,(u=n>=(a=(y+m)/2))?y=a:m=a,o=d,!(d=d[h=u<<1|f]))return o[h]=p,e;if(s=+e._x.call(null,d.data),c=+e._y.call(null,d.data),t===s&&n===c)return p.next=d,o?o[h]=p:e._root=p,e;do{o=o?o[h]=new Array(4):e._root=new Array(4),(f=t>=(i=(b+g)/2))?b=i:g=i,(u=n>=(a=(y+m)/2))?y=a:m=a}while((h=u<<1|f)==(l=(c>=a)<<1|s>=i));return o[l]=d,o[h]=p,e}var pr=function(e,t,n,r,o){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=o};function br(e){return e[0]}function yr(e){return e[1]}function gr(e,t,n){var r=new mr(null==t?br:t,null==n?yr:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function mr(e,t,n,r,o,i){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function _r(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var vr=gr.prototype=mr.prototype;vr.copy=function(){var e,t,n=new mr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=_r(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var o=0;o<4;++o)(t=r.source[o])&&(t.length?e.push({source:t,target:r.target[o]=new Array(4)}):r.target[o]=_r(t));return n},vr.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return dr(this.cover(t,n),t,n,e)},vr.addAll=function(e){var t,n,r,o,i=e.length,a=new Array(i),s=new Array(i),c=1/0,f=1/0,u=-1/0,h=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(o=+this._y.call(null,t))||(a[n]=r,s[n]=o,r<c&&(c=r),r>u&&(u=r),o<f&&(f=o),o>h&&(h=o));for(u<c&&(c=this._x0,u=this._x1),h<f&&(f=this._y0,h=this._y1),this.cover(c,f).cover(u,h),n=0;n<i;++n)dr(this,a[n],s[n],e[n]);return this},vr.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(n))o=(n=Math.floor(e))+1,i=(r=Math.floor(t))+1;else{if(!(n>e||e>o||r>t||t>i))return this;var a,s,c=o-n,f=this._root;switch(s=(t<(r+i)/2)<<1|e<(n+o)/2){case 0:do{(a=new Array(4))[s]=f,f=a}while(i=r+(c*=2),e>(o=n+c)||t>i);break;case 1:do{(a=new Array(4))[s]=f,f=a}while(i=r+(c*=2),(n=o-c)>e||t>i);break;case 2:do{(a=new Array(4))[s]=f,f=a}while(r=i-(c*=2),e>(o=n+c)||r>t);break;case 3:do{(a=new Array(4))[s]=f,f=a}while(r=i-(c*=2),(n=o-c)>e||r>t)}this._root&&this._root.length&&(this._root=f)}return this._x0=n,this._y0=r,this._x1=o,this._y1=i,this},vr.data=function(){var e=[];return this.visit(function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)}),e},vr.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},vr.find=function(e,t,n){var r,o,i,a,s,c,f,u=this._x0,h=this._y0,l=this._x1,d=this._y1,p=[],b=this._root;for(b&&p.push(new pr(b,u,h,l,d)),null==n?n=1/0:(u=e-n,h=t-n,l=e+n,d=t+n,n*=n);c=p.pop();)if(!(!(b=c.node)||(o=c.x0)>l||(i=c.y0)>d||(a=c.x1)<u||(s=c.y1)<h))if(b.length){var y=(o+a)/2,g=(i+s)/2;p.push(new pr(b[3],y,g,a,s),new pr(b[2],o,g,y,s),new pr(b[1],y,i,a,g),new pr(b[0],o,i,y,g)),(f=(t>=g)<<1|e>=y)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var m=e-+this._x.call(null,b.data),_=t-+this._y.call(null,b.data),v=m*m+_*_;if(v<n){var w=Math.sqrt(n=v);u=e-w,h=t-w,l=e+w,d=t+w,r=b.data}}return r},vr.remove=function(e){if(isNaN(i=+this._x.call(null,e))||isNaN(a=+this._y.call(null,e)))return this;var t,n,r,o,i,a,s,c,f,u,h,l,d=this._root,p=this._x0,b=this._y0,y=this._x1,g=this._y1;if(!d)return this;if(d.length)for(;;){if((f=i>=(s=(p+y)/2))?p=s:y=s,(u=a>=(c=(b+g)/2))?b=c:g=c,t=d,!(d=d[h=u<<1|f]))return this;if(!d.length)break;(t[h+1&3]||t[h+2&3]||t[h+3&3])&&(n=t,l=h)}for(;d.data!==e;)if(r=d,!(d=d.next))return this;return(o=d.next)&&delete d.next,r?(o?r.next=o:delete r.next,this):t?(o?t[h]=o:delete t[h],(d=t[0]||t[1]||t[2]||t[3])&&d===(t[3]||t[2]||t[1]||t[0])&&!d.length&&(n?n[l]=d:this._root=d),this):(this._root=o,this)},vr.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},vr.root=function(){return this._root},vr.size=function(){var e=0;return this.visit(function(t){if(!t.length)do{++e}while(t=t.next)}),e},vr.visit=function(e){var t,n,r,o,i,a,s=[],c=this._root;for(c&&s.push(new pr(c,this._x0,this._y0,this._x1,this._y1));t=s.pop();)if(!e(c=t.node,r=t.x0,o=t.y0,i=t.x1,a=t.y1)&&c.length){var f=(r+i)/2,u=(o+a)/2;(n=c[3])&&s.push(new pr(n,f,u,i,a)),(n=c[2])&&s.push(new pr(n,r,u,f,a)),(n=c[1])&&s.push(new pr(n,f,o,i,u)),(n=c[0])&&s.push(new pr(n,r,o,f,u))}return this},vr.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new pr(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var o=t.node;if(o.length){var i,a=t.x0,s=t.y0,c=t.x1,f=t.y1,u=(a+c)/2,h=(s+f)/2;(i=o[0])&&n.push(new pr(i,a,s,u,h)),(i=o[1])&&n.push(new pr(i,u,s,c,h)),(i=o[2])&&n.push(new pr(i,a,h,u,f)),(i=o[3])&&n.push(new pr(i,u,h,c,f))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},vr.x=function(e){return arguments.length?(this._x=e,this):this._x},vr.y=function(e){return arguments.length?(this._y=e,this):this._y};Math.PI,Math.sqrt(5);var wr=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},xr=function(e){return(e=wr(Math.abs(e)))?e[1]:NaN},Fr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Cr(e){return new Ar(e)}function Ar(e){if(!(t=Fr.exec(e)))throw new Error("invalid format: "+e);var t;this.fill=t[1]||" ",this.align=t[2]||">",this.sign=t[3]||"-",this.symbol=t[4]||"",this.zero=!!t[5],this.width=t[6]&&+t[6],this.comma=!!t[7],this.precision=t[8]&&+t[8].slice(1),this.trim=!!t[9],this.type=t[10]||""}Cr.prototype=Ar.prototype,Ar.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var kr,Er,Tr=function(e){e:for(var t,n=e.length,r=1,o=-1;r<n;++r)switch(e[r]){case".":o=t=r;break;case"0":0===o&&(o=r),t=r;break;default:if(o>0){if(!+e[r])break e;o=0}}return o>0?e.slice(0,o)+e.slice(t+1):e},Sr=function(e,t){var n=wr(e,t);if(!n)return e+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},Mr={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Sr(100*e,t)},r:Sr,s:function(e,t){var n=wr(e,t);if(!n)return e+"";var r=n[0],o=n[1],i=o-(kr=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+wr(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Dr=function(e){return e},Nr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Er=function(e){var t,n,r=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,r){for(var o=e.length,i=[],a=0,s=t[0],c=0;o>0&&s>0&&(c+s+1>r&&(s=Math.max(1,r-c)),i.push(e.substring(o-=s,o+s)),!((c+=s+1)>r));)s=t[a=(a+1)%t.length];return i.reverse().join(n)}):Dr,o=e.currency,i=e.decimal,a=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):Dr,s=e.percent||"%";function c(e){var t=(e=Cr(e)).fill,n=e.align,c=e.sign,f=e.symbol,u=e.zero,h=e.width,l=e.comma,d=e.precision,p=e.trim,b=e.type;"n"===b?(l=!0,b="g"):Mr[b]||(null==d&&(d=12),p=!0,b="g"),(u||"0"===t&&"="===n)&&(u=!0,t="0",n="=");var y="$"===f?o[0]:"#"===f&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",g="$"===f?o[1]:/[%p]/.test(b)?s:"",m=Mr[b],_=/[defgprs%]/.test(b);function v(e){var o,s,f,v=y,w=g;if("c"===b)w=m(e)+w,e="";else{var x=(e=+e)<0;if(e=m(Math.abs(e),d),p&&(e=Tr(e)),x&&0==+e&&(x=!1),v=(x?"("===c?c:"-":"-"===c||"("===c?"":c)+v,w=("s"===b?Nr[8+kr/3]:"")+w+(x&&"("===c?")":""),_)for(o=-1,s=e.length;++o<s;)if(48>(f=e.charCodeAt(o))||f>57){w=(46===f?i+e.slice(o+1):e.slice(o))+w,e=e.slice(0,o);break}}l&&!u&&(e=r(e,1/0));var F=v.length+e.length+w.length,C=F<h?new Array(h-F+1).join(t):"";switch(l&&u&&(e=r(C+e,C.length?h-w.length:1/0),C=""),n){case"<":e=v+e+w+C;break;case"=":e=v+C+e+w;break;case"^":e=C.slice(0,F=C.length>>1)+v+e+w+C.slice(F);break;default:e=C+v+e+w}return a(e)}return d=null==d?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),v.toString=function(){return e+""},v}return{format:c,formatPrefix:function(e,t){var n=c(((e=Cr(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(xr(t)/3))),o=Math.pow(10,-r),i=Nr[8+r/3];return function(e){return n(o*e)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Er.format,Er.formatPrefix;var Pr=function(){return new Or};function Or(){this.reset()}Or.prototype={constructor:Or,reset:function(){this.s=this.t=0},add:function(e){Rr(Br,e,this.t),Rr(this,Br.s,this.s),this.s?this.t+=Br.t:this.s=Br.t},valueOf:function(){return this.s}};var Br=new Or;function Rr(e,t,n){var r=e.s=t+n,o=r-t,i=r-o;e.t=t-i+(n-o)}var jr=1e-6,Ur=Math.PI,Ir=Ur/2,Lr=Ur/4,qr=2*Ur,zr=Ur/180,Yr=Math.abs,Hr=Math.atan,Xr=Math.atan2,$r=Math.cos,Vr=(Math.ceil,Math.exp),Wr=(Math.floor,Math.log),Gr=(Math.pow,Math.sin),Jr=(Math.sign,Math.sqrt),Zr=Math.tan;function Kr(e){return e>1?0:e<-1?Ur:Math.acos(e)}function Qr(e){return e>1?Ir:e<-1?-Ir:Math.asin(e)}function eo(){}Pr(),Pr();function to(e){var t=e[0],n=e[1],r=$r(n);return[r*$r(t),r*Gr(t),Gr(n)]}function no(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function ro(e){var t=Jr(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}Pr();function oo(e,t){return[Yr(e)>Ur?e+Math.round(-e/qr)*qr:e,t]}oo.invert=oo;var io=function(){var e,t=[];return{point:function(t,n){e.push([t,n])},lineStart:function(){t.push(e=[])},lineEnd:eo,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},ao=function(e,t){return Yr(e[0]-t[0])<jr&&Yr(e[1]-t[1])<jr};function so(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var co=function(e,t,n,r,o){var i,a,s=[],c=[];if(e.forEach(function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],a=e[t];if(ao(r,a)){for(o.lineStart(),i=0;i<t;++i)o.point((r=e[i])[0],r[1]);o.lineEnd()}else s.push(n=new so(r,e,null,!0)),c.push(n.o=new so(r,null,n,!1)),s.push(n=new so(a,e,null,!1)),c.push(n.o=new so(a,null,n,!0))}}),s.length){for(c.sort(t),fo(s),fo(c),i=0,a=c.length;i<a;++i)c[i].e=n=!n;for(var f,u,h=s[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;f=l.z,o.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(i=0,a=f.length;i<a;++i)o.point((u=f[i])[0],u[1]);else r(l.x,l.n.x,1,o);l=l.n}else{if(d)for(f=l.p.z,i=f.length-1;i>=0;--i)o.point((u=f[i])[0],u[1]);else r(l.x,l.p.x,-1,o);l=l.p}f=(l=l.o).z,d=!d}while(!l.v);o.lineEnd()}}};function fo(e){if(t=e.length){for(var t,n,r=0,o=e[0];++r<t;)o.n=n=e[r],n.p=o,o=n;o.n=n=e[0],n.p=o}}var uo=Pr(),ho=function(e,t){var n=t[0],r=t[1],o=Gr(r),i=[Gr(n),-$r(n),0],a=0,s=0;uo.reset(),1===o?r=Ir+jr:-1===o&&(r=-Ir-jr);for(var c=0,f=e.length;c<f;++c)if(h=(u=e[c]).length)for(var u,h,l=u[h-1],d=l[0],p=l[1]/2+Lr,b=Gr(p),y=$r(p),g=0;g<h;++g,d=_,b=w,y=x,l=m){var m=u[g],_=m[0],v=m[1]/2+Lr,w=Gr(v),x=$r(v),F=_-d,C=F>=0?1:-1,A=C*F,k=A>Ur,E=b*w;if(uo.add(Xr(E*C*Gr(A),y*x+E*$r(A))),a+=k?F+C*qr:F,k^d>=n^_>=n){var T=no(to(l),to(m));ro(T);var S=no(i,T);ro(S);var M=(k^F>=0?-1:1)*Qr(S[2]);(r>M||r===M&&(T[0]||T[1]))&&(s+=k^F>=0?1:-1)}}return(a<-jr||a<jr&&uo<-jr)^1&s},lo=function(e,t,n,r){return function(o){var i,a,c,f=t(o),u=io(),h=t(u),l=!1,d={point:p,lineStart:y,lineEnd:g,polygonStart:function(){d.point=m,d.lineStart=_,d.lineEnd=v,a=[],i=[]},polygonEnd:function(){d.point=p,d.lineStart=y,d.lineEnd=g,a=s(a);var e=ho(i,r);a.length?(l||(o.polygonStart(),l=!0),co(a,bo,e,n,o)):e&&(l||(o.polygonStart(),l=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),l&&(o.polygonEnd(),l=!1),a=i=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function p(t,n){e(t,n)&&o.point(t,n)}function b(e,t){f.point(e,t)}function y(){d.point=b,f.lineStart()}function g(){d.point=p,f.lineEnd()}function m(e,t){c.push([e,t]),h.point(e,t)}function _(){h.lineStart(),c=[]}function v(){m(c[0][0],c[0][1]),h.lineEnd();var e,t,n,r,s=h.clean(),f=u.result(),d=f.length;if(c.pop(),i.push(c),c=null,d)if(1&s){if((t=(n=f[0]).length-1)>0){for(l||(o.polygonStart(),l=!0),o.lineStart(),e=0;e<t;++e)o.point((r=n[e])[0],r[1]);o.lineEnd()}}else d>1&&2&s&&f.push(f.pop().concat(f.shift())),a.push(f.filter(po))}return d}};function po(e){return e.length>1}function bo(e,t){return((e=e.x)[0]<0?e[1]-Ir-jr:Ir-e[1])-((t=t.x)[0]<0?t[1]-Ir-jr:Ir-t[1])}lo(function(){return!0},function(e){var t,n=NaN,r=NaN,o=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(i,a){var s=i>0?Ur:-Ur,c=Yr(i-n);Yr(c-Ur)<jr?(e.point(n,r=(r+a)/2>0?Ir:-Ir),e.point(o,r),e.lineEnd(),e.lineStart(),e.point(s,r),e.point(i,r),t=0):o!==s&&c>=Ur&&(Yr(n-o)<jr&&(n-=o*jr),Yr(i-s)<jr&&(i-=s*jr),r=function(e,t,n,r){var o,i,a=Gr(e-n);return Yr(a)>jr?Hr((Gr(t)*(i=$r(r))*Gr(n)-Gr(r)*(o=$r(t))*Gr(e))/(o*i*a)):(t+r)/2}(n,r,i,a),e.point(o,r),e.lineEnd(),e.lineStart(),e.point(s,r),t=0),e.point(n=i,r=a),o=s},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}},function(e,t,n,r){var o;if(null==e)o=n*Ir,r.point(-Ur,o),r.point(0,o),r.point(Ur,o),r.point(Ur,0),r.point(Ur,-o),r.point(0,-o),r.point(-Ur,-o),r.point(-Ur,0),r.point(-Ur,o);else if(Yr(e[0]-t[0])>jr){var i=e[0]<t[0]?Ur:-Ur;o=n*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(t[0],t[1])},[-Ur,-Ir]);Pr();Pr(),Pr();function yo(e){this._context=e}yo.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,qr)}},result:eo};Pr();function go(){this._string=[]}function mo(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}go.prototype={_radius:4.5,_circle:mo(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=mo(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}};function _o(e){return function(t){var n=new vo;for(var r in e)n[r]=e[r];return n.stream=t,n}}function vo(){}vo.prototype={constructor:vo,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};$r(30*zr);_o({point:function(e,t){this.stream.point(e*zr,t*zr)}});function wo(e){return function(t,n){var r=$r(t),o=$r(n),i=e(r*o);return[i*o*Gr(t),i*Gr(n)]}}function xo(e){return function(t,n){var r=Jr(t*t+n*n),o=e(r),i=Gr(o),a=$r(o);return[Xr(t*i,r*a),Qr(r&&n*i/r)]}}var Fo=wo(function(e){return Jr(2/(1+e))});Fo.invert=xo(function(e){return 2*Qr(e/2)});var Co=wo(function(e){return(e=Kr(e))&&e/Gr(e)});Co.invert=xo(function(e){return e});function Ao(e,t){return[e,Wr(Zr((Ir+t)/2))]}Ao.invert=function(e,t){return[e,2*Hr(Vr(t))-Ir]};function ko(e,t){return[e,t]}ko.invert=ko;var Eo=1.340264,To=-.081106,So=893e-6,Mo=.003796,Do=Jr(3)/2;function No(e,t){var n=Qr(Do*Gr(t)),r=n*n,o=r*r*r;return[e*$r(n)/(Do*(Eo+3*To*r+o*(7*So+9*Mo*r))),n*(Eo+To*r+o*(So+Mo*r))]}No.invert=function(e,t){for(var n,r=t,o=r*r,i=o*o*o,a=0;a<12&&(i=(o=(r-=n=(r*(Eo+To*o+i*(So+Mo*o))-t)/(Eo+3*To*o+i*(7*So+9*Mo*o)))*r)*o*o,!(Yr(n)<1e-12));++a);return[Do*e*(Eo+3*To*o+i*(7*So+9*Mo*o))/$r(r),Qr(Gr(r)/Do)]};function Po(e,t){var n=$r(t),r=$r(e)*n;return[n*Gr(e)/r,Gr(t)/r]}Po.invert=xo(Hr);function Oo(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Oo.invert=function(e,t){var n,r=t,o=25;do{var i=r*r,a=i*i;r-=n=(r*(1.007226+i*(.015085+a*(.028874*i-.044475-.005916*a)))-t)/(1.007226+i*(.045255+a*(.259866*i-.311325-.005916*11*a)))}while(Yr(n)>jr&&--o>0);return[e/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};function Bo(e,t){return[$r(t)*Gr(e),Gr(t)]}Bo.invert=xo(Qr);function Ro(e,t){var n=$r(t),r=1+$r(e)*n;return[n*Gr(e)/r,Gr(t)/r]}Ro.invert=xo(function(e){return 2*Hr(e)});function jo(e,t){return[Wr(Zr((Ir+t)/2)),-e]}jo.invert=function(e,t){return[-t,2*Hr(Vr(e))-Ir]};function Uo(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function Io(e,t){var n,r,o,i,a,s=new Yo(e),c=+e.value&&(s.value=e.value),f=[s];for(null==t&&(t=Lo);n=f.pop();)if(c&&(n.value=+n.data.value),(o=t(n.data))&&(a=o.length))for(n.children=new Array(a),i=a-1;i>=0;--i)f.push(r=n.children[i]=new Yo(o[i])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(zo)}function Lo(e){return e.children}function qo(e){e.data=e.data.data}function zo(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function Yo(e){this.data=e,this.depth=this.height=0,this.parent=null}Yo.prototype=Io.prototype={constructor:Yo,count:function(){return this.eachAfter(Uo)},each:function(e){var t,n,r,o,i=this,a=[i];do{for(t=a.reverse(),a=[];i=t.pop();)if(e(i),n=i.children)for(r=0,o=n.length;r<o;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(e){for(var t,n,r,o=this,i=[o],a=[];o=i.pop();)if(a.push(o),t=o.children)for(n=0,r=t.length;n<r;++n)i.push(t[n]);for(;o=a.pop();)e(o);return this},eachBefore:function(e){for(var t,n,r=this,o=[r];r=o.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)o.push(t[n]);return this},sum:function(e){return this.eachAfter(function(t){for(var n=+e(t.data)||0,r=t.children,o=r&&r.length;--o>=0;)n+=r[o].value;t.value=n})},sort:function(e){return this.eachBefore(function(t){t.children&&t.children.sort(e)})},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),o=null;for(e=n.pop(),t=r.pop();e===t;)o=e,e=n.pop(),t=r.pop();return o}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var o=r.length;e!==n;)r.splice(o,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){var e=[];return this.each(function(t){e.push(t)}),e},leaves:function(){var e=[];return this.eachBefore(function(t){t.children||e.push(t)}),e},links:function(){var e=this,t=[];return e.each(function(n){n!==e&&t.push({source:n.parent,target:n})}),t},copy:function(){return Io(this).eachBefore(qo)}};Array.prototype.slice;var Ho=function(e,t,n,r,o){for(var i,a=e.children,s=-1,c=a.length,f=e.value&&(r-t)/e.value;++s<c;)(i=a[s]).y0=n,i.y1=o,i.x0=t,i.x1=t+=i.value*f};function Xo(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}Xo.prototype=Object.create(Yo.prototype);var $o=function(e,t,n,r,o){for(var i,a=e.children,s=-1,c=a.length,f=e.value&&(o-n)/e.value;++s<c;)(i=a[s]).x0=t,i.x1=r,i.y0=n,i.y1=n+=i.value*f},Vo=(1+Math.sqrt(5))/2;function Wo(e,t,n,r,o,i){for(var a,s,c,f,u,h,l,d,p,b,y,g=[],m=t.children,_=0,v=0,w=m.length,x=t.value;_<w;){c=o-n,f=i-r;do{u=m[v++].value}while(!u&&v<w);for(h=l=u,y=u*u*(b=Math.max(f/c,c/f)/(x*e)),p=Math.max(l/y,y/h);v<w;++v){if(u+=s=m[v].value,s<h&&(h=s),s>l&&(l=s),y=u*u*b,(d=Math.max(l/y,y/h))>p){u-=s;break}p=d}g.push(a={value:u,dice:c<f,children:m.slice(_,v)}),a.dice?Ho(a,n,r,o,x?r+=f*u/x:i):$o(a,n,r,x?n+=c*u/x:o,i),x-=u,_=v}return g}(function e(t){function n(e,n,r,o,i){Wo(t,e,n,r,o,i)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n})(Vo),function e(t){function n(e,n,r,o,i){if((a=e._squarify)&&a.ratio===t)for(var a,s,c,f,u,h=-1,l=a.length,d=e.value;++h<l;){for(c=(s=a[h]).children,f=s.value=0,u=c.length;f<u;++f)s.value+=c[f].value;s.dice?Ho(s,n,r,o,r+=(i-r)*s.value/d):$o(s,n,r,n+=(o-n)*s.value/d,i),d-=s.value}else e._squarify=a=Wo(t,e,n,r,o,i),a.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Vo);var Go=function(){return Math.random()},Jo=(function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(Go),function e(t){function n(e,n){var r,o;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,o=r*r+i*i}while(!o||o>1);return e+n*i*Math.sqrt(-2*Math.log(o)/o)}}return n.source=e,n}(Go)),Zo=(function e(t){function n(){var e=Jo.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(Go),function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(Go)),Ko=(function e(t){function n(e){var n=Zo.source(t)(e);return function(){return n()/e}}return n.source=e,n}(Go),function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(Go),Array.prototype);Ko.map,Ko.slice;var Qo=new Date,ei=new Date;function ti(e,t,n,r){function o(t){return e(t=new Date(+t)),t}return o.floor=o,o.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},o.round=function(e){var t=o(e),n=o.ceil(e);return e-t<n-e?t:n},o.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},o.range=function(n,r,i){var a,s=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return s;do{s.push(a=new Date(+n)),t(n,i),e(n)}while(a<n&&n<r);return s},o.filter=function(n){return ti(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})},n&&(o.count=function(t,r){return Qo.setTime(+t),ei.setTime(+r),e(Qo),e(ei),Math.floor(n(Qo,ei))},o.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?o.filter(r?function(t){return r(t)%e==0}:function(t){return o.count(0,t)%e==0}):o:null}),o}var ni=ti(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});ni.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?ti(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):ni:null};ni.range;var ri=6e4,oi=6048e5,ii=ti(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),ai=(ii.range,ti(function(e){e.setTime(Math.floor(e/ri)*ri)},function(e,t){e.setTime(+e+t*ri)},function(e,t){return(t-e)/ri},function(e){return e.getMinutes()})),si=(ai.range,ti(function(e){var t=e.getTimezoneOffset()*ri%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()})),ci=(si.range,ti(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*ri)/864e5},function(e){return e.getDate()-1})),fi=ci;ci.range;function ui(e){return ti(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*ri)/oi})}var hi=ui(0),li=ui(1),di=ui(2),pi=ui(3),bi=ui(4),yi=ui(5),gi=ui(6),mi=(hi.range,li.range,di.range,pi.range,bi.range,yi.range,gi.range,ti(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()})),_i=(mi.range,ti(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()}));_i.every=function(e){return isFinite(e=Math.floor(e))&&e>0?ti(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};var vi=_i,wi=(_i.range,ti(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*ri)},function(e,t){return(t-e)/ri},function(e){return e.getUTCMinutes()})),xi=(wi.range,ti(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()})),Fi=(xi.range,ti(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1})),Ci=Fi;Fi.range;function Ai(e){return ti(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/oi})}var ki=Ai(0),Ei=Ai(1),Ti=Ai(2),Si=Ai(3),Mi=Ai(4),Di=Ai(5),Ni=Ai(6),Pi=(ki.range,Ei.range,Ti.range,Si.range,Mi.range,Di.range,Ni.range,ti(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()})),Oi=(Pi.range,ti(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()}));Oi.every=function(e){return isFinite(e=Math.floor(e))&&e>0?ti(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var Bi=Oi;Oi.range;function Ri(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function ji(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Ui(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}var Ii,Li,qi,zi={"-":"",_:" ",0:"0"},Yi=/^\s*\d+/,Hi=/^%/,Xi=/[\\^$*+?|[\]().{}]/g;function $i(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(t)+o:o)}function Vi(e){return e.replace(Xi,"\\$&")}function Wi(e){return new RegExp("^(?:"+e.map(Vi).join("|")+")","i")}function Gi(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Ji(e,t,n){var r=Yi.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Zi(e,t,n){var r=Yi.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function Ki(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function Qi(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function ea(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function ta(e,t,n){var r=Yi.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function na(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function ra(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function oa(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function ia(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function aa(e,t,n){var r=Yi.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function sa(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function ca(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function fa(e,t,n){var r=Yi.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function ua(e,t,n){var r=Yi.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function ha(e,t,n){var r=Yi.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function la(e,t,n){var r=Hi.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function da(e,t,n){var r=Yi.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function pa(e,t,n){var r=Yi.exec(t.slice(n));return r?(e.Q=1e3*+r[0],n+r[0].length):-1}function ba(e,t){return $i(e.getDate(),t,2)}function ya(e,t){return $i(e.getHours(),t,2)}function ga(e,t){return $i(e.getHours()%12||12,t,2)}function ma(e,t){return $i(1+fi.count(vi(e),e),t,3)}function _a(e,t){return $i(e.getMilliseconds(),t,3)}function va(e,t){return _a(e,t)+"000"}function wa(e,t){return $i(e.getMonth()+1,t,2)}function xa(e,t){return $i(e.getMinutes(),t,2)}function Fa(e,t){return $i(e.getSeconds(),t,2)}function Ca(e){var t=e.getDay();return 0===t?7:t}function Aa(e,t){return $i(hi.count(vi(e),e),t,2)}function ka(e,t){var n=e.getDay();return e=n>=4||0===n?bi(e):bi.ceil(e),$i(bi.count(vi(e),e)+(4===vi(e).getDay()),t,2)}function Ea(e){return e.getDay()}function Ta(e,t){return $i(li.count(vi(e),e),t,2)}function Sa(e,t){return $i(e.getFullYear()%100,t,2)}function Ma(e,t){return $i(e.getFullYear()%1e4,t,4)}function Da(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+$i(t/60|0,"0",2)+$i(t%60,"0",2)}function Na(e,t){return $i(e.getUTCDate(),t,2)}function Pa(e,t){return $i(e.getUTCHours(),t,2)}function Oa(e,t){return $i(e.getUTCHours()%12||12,t,2)}function Ba(e,t){return $i(1+Ci.count(Bi(e),e),t,3)}function Ra(e,t){return $i(e.getUTCMilliseconds(),t,3)}function ja(e,t){return Ra(e,t)+"000"}function Ua(e,t){return $i(e.getUTCMonth()+1,t,2)}function Ia(e,t){return $i(e.getUTCMinutes(),t,2)}function La(e,t){return $i(e.getUTCSeconds(),t,2)}function qa(e){var t=e.getUTCDay();return 0===t?7:t}function za(e,t){return $i(ki.count(Bi(e),e),t,2)}function Ya(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Mi(e):Mi.ceil(e),$i(Mi.count(Bi(e),e)+(4===Bi(e).getUTCDay()),t,2)}function Ha(e){return e.getUTCDay()}function Xa(e,t){return $i(Ei.count(Bi(e),e),t,2)}function $a(e,t){return $i(e.getUTCFullYear()%100,t,2)}function Va(e,t){return $i(e.getUTCFullYear()%1e4,t,4)}function Wa(){return"+0000"}function Ga(){return"%"}function Ja(e){return+e}function Za(e){return Math.floor(+e/1e3)}!function(e){Ii=function(e){var t=e.dateTime,n=e.date,r=e.time,o=e.periods,i=e.days,a=e.shortDays,s=e.months,c=e.shortMonths,f=Wi(o),u=Gi(o),h=Wi(i),l=Gi(i),d=Wi(a),p=Gi(a),b=Wi(s),y=Gi(s),g=Wi(c),m=Gi(c),_={a:function(e){return a[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return c[e.getMonth()]},B:function(e){return s[e.getMonth()]},c:null,d:ba,e:ba,f:va,H:ya,I:ga,j:ma,L:_a,m:wa,M:xa,p:function(e){return o[+(e.getHours()>=12)]},Q:Ja,s:Za,S:Fa,u:Ca,U:Aa,V:ka,w:Ea,W:Ta,x:null,X:null,y:Sa,Y:Ma,Z:Da,"%":Ga},v={a:function(e){return a[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return c[e.getUTCMonth()]},B:function(e){return s[e.getUTCMonth()]},c:null,d:Na,e:Na,f:ja,H:Pa,I:Oa,j:Ba,L:Ra,m:Ua,M:Ia,p:function(e){return o[+(e.getUTCHours()>=12)]},Q:Ja,s:Za,S:La,u:qa,U:za,V:Ya,w:Ha,W:Xa,x:null,X:null,y:$a,Y:Va,Z:Wa,"%":Ga},w={a:function(e,t,n){var r=d.exec(t.slice(n));return r?(e.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=l[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=g.exec(t.slice(n));return r?(e.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=b.exec(t.slice(n));return r?(e.m=y[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return C(e,t,n,r)},d:ia,e:ia,f:ha,H:sa,I:sa,j:aa,L:ua,m:oa,M:ca,p:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.p=u[r[0].toLowerCase()],n+r[0].length):-1},Q:da,s:pa,S:fa,u:Zi,U:Ki,V:Qi,w:Ji,W:ea,x:function(e,t,r){return C(e,n,t,r)},X:function(e,t,n){return C(e,r,t,n)},y:na,Y:ta,Z:ra,"%":la};function x(e,t){return function(n){var r,o,i,a=[],s=-1,c=0,f=e.length;for(n instanceof Date||(n=new Date(+n));++s<f;)37===e.charCodeAt(s)&&(a.push(e.slice(c,s)),null!=(o=zi[r=e.charAt(++s)])?r=e.charAt(++s):o="e"===r?" ":"0",(i=t[r])&&(r=i(n,o)),a.push(r),c=s+1);return a.push(e.slice(c,s)),a.join("")}}function F(e,t){return function(n){var r,o,i=Ui(1900);if(C(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(o=(r=ji(Ui(i.y))).getUTCDay(),r=o>4||0===o?Ei.ceil(r):Ei(r),r=Ci.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(o=(r=t(Ui(i.y))).getDay(),r=o>4||0===o?li.ceil(r):li(r),r=fi.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?ji(Ui(i.y)).getUTCDay():t(Ui(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,ji(i)):t(i)}}function C(e,t,n,r){for(var o,i,a=0,s=t.length,c=n.length;a<s;){if(r>=c)return-1;if(37===(o=t.charCodeAt(a++))){if(o=t.charAt(a++),!(i=w[o in zi?t.charAt(a++):o])||(r=i(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return _.x=x(n,_),_.X=x(r,_),_.c=x(t,_),v.x=x(n,v),v.X=x(r,v),v.c=x(t,v),{format:function(e){var t=x(e+="",_);return t.toString=function(){return e},t},parse:function(e){var t=F(e+="",Ri);return t.toString=function(){return e},t},utcFormat:function(e){var t=x(e+="",v);return t.toString=function(){return e},t},utcParse:function(e){var t=F(e,ji);return t.toString=function(){return e},t}}}(e),Ii.format,Ii.parse,Li=Ii.utcFormat,qi=Ii.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Li("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||qi("%Y-%m-%dT%H:%M:%S.%LZ");var Ka=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n},Qa=(Ka("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ka("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Ka("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Ka("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ka("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Ka("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Ka("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Ka("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ka("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(e){return Mt(e[e.length-1])});Qa(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ka)),Qa(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ka)),Qa(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ka)),Qa(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ka)),Qa(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ka)),Qa(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ka)),Qa(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ka)),Qa(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ka)),Qa(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ka)),Qa(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ka)),Qa(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ka)),Qa(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ka)),Qa(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ka)),Qa(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ka)),Qa(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ka)),Qa(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ka)),Qa(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ka)),Qa(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ka)),Qa(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ka)),Qa(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ka)),Qa(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ka)),Qa(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ka)),Qa(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ka)),Qa(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ka)),Qa(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ka)),Qa(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ka)),Qa(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ka)),Wt(vt(300,.5,0),vt(-240,.5,1)),Wt(vt(-100,.75,.35),vt(80,1.5,.8)),Wt(vt(260,.75,.35),vt(80,1.5,.8)),vt(),ze(),Math.PI,Math.PI;function es(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}es(Ka("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),es(Ka("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),es(Ka("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),es(Ka("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var ts=1e-12,ns=Math.PI,rs=2*ns;function os(e){this._context=e}os.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var is=function(e){return new os(e)};ss(is);function as(e){this._curve=e}function ss(e){function t(t){return new as(e(t))}return t._curve=e,t}as.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}};Array.prototype.slice;Math.sqrt(1/3);var cs=Math.sin(ns/10)/Math.sin(7*ns/10),fs=(Math.sin(rs/10),Math.cos(rs/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function us(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function hs(e){this._context=e}hs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:us(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:us(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function ls(e){this._context=e}ls.prototype={areaStart:fs,areaEnd:fs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:us(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function ds(e){this._context=e}ds.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:us(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function ps(e,t){this._basis=new hs(e),this._beta=t}ps.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,o=e[0],i=t[0],a=e[n]-o,s=t[n]-i,c=-1;++c<=n;)r=c/n,this._basis.point(this._beta*e[c]+(1-this._beta)*(o+r*a),this._beta*t[c]+(1-this._beta)*(i+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};(function e(t){function n(e){return 1===t?new hs(e):new ps(e,t)}return n.beta=function(t){return e(+t)},n})(.85);function bs(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function ys(e,t){this._context=e,this._k=(1-t)/6}ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:bs(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:bs(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return new ys(e,t)}return n.tension=function(t){return e(+t)},n})(0);function gs(e,t){this._context=e,this._k=(1-t)/6}gs.prototype={areaStart:fs,areaEnd:fs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:bs(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return new gs(e,t)}return n.tension=function(t){return e(+t)},n})(0);function ms(e,t){this._context=e,this._k=(1-t)/6}ms.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:bs(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return new ms(e,t)}return n.tension=function(t){return e(+t)},n})(0);function _s(e,t,n){var r=e._x1,o=e._y1,i=e._x2,a=e._y2;if(e._l01_a>ts){var s=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,c=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*s-e._x0*e._l12_2a+e._x2*e._l01_2a)/c,o=(o*s-e._y0*e._l12_2a+e._y2*e._l01_2a)/c}if(e._l23_a>ts){var f=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,u=3*e._l23_a*(e._l23_a+e._l12_a);i=(i*f+e._x1*e._l23_2a-t*e._l12_2a)/u,a=(a*f+e._y1*e._l23_2a-n*e._l12_2a)/u}e._context.bezierCurveTo(r,o,i,a,e._x2,e._y2)}function vs(e,t){this._context=e,this._alpha=t}vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:_s(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return t?new vs(e,t):new ys(e,0)}return n.alpha=function(t){return e(+t)},n})(.5);function ws(e,t){this._context=e,this._alpha=t}ws.prototype={areaStart:fs,areaEnd:fs,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:_s(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return t?new ws(e,t):new gs(e,0)}return n.alpha=function(t){return e(+t)},n})(.5);function xs(e,t){this._context=e,this._alpha=t}xs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:_s(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};(function e(t){function n(e){return t?new xs(e,t):new ms(e,0)}return n.alpha=function(t){return e(+t)},n})(.5);function Fs(e){this._context=e}Fs.prototype={areaStart:fs,areaEnd:fs,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};function Cs(e){return e<0?-1:1}function As(e,t,n){var r=e._x1-e._x0,o=t-e._x1,i=(e._y1-e._y0)/(r||o<0&&-0),a=(n-e._y1)/(o||r<0&&-0),s=(i*o+a*r)/(r+o);return(Cs(i)+Cs(a))*Math.min(Math.abs(i),Math.abs(a),.5*Math.abs(s))||0}function ks(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Es(e,t,n){var r=e._x0,o=e._y0,i=e._x1,a=e._y1,s=(i-r)/3;e._context.bezierCurveTo(r+s,o+s*t,i-s,a-s*n,i,a)}function Ts(e){this._context=e}function Ss(e){this._context=new Ms(e)}function Ms(e){this._context=e}function Ds(e){this._context=e}function Ns(e){var t,n,r=e.length-1,o=new Array(r),i=new Array(r),a=new Array(r);for(o[0]=0,i[0]=2,a[0]=e[0]+2*e[1],t=1;t<r-1;++t)o[t]=1,i[t]=4,a[t]=4*e[t]+2*e[t+1];for(o[r-1]=2,i[r-1]=7,a[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=o[t]/i[t-1],i[t]-=n,a[t]-=n*a[t-1];for(o[r-1]=a[r-1]/i[r-1],t=r-2;t>=0;--t)o[t]=(a[t]-o[t+1])/i[t];for(i[r-1]=(e[r]+o[r-1])/2,t=0;t<r-1;++t)i[t]=2*e[t+1]-o[t+1];return[o,i]}Ts.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Es(this,this._t0,ks(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Es(this,ks(this,n=As(this,e,t)),n);break;default:Es(this,this._t0,n=As(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(Ss.prototype=Object.create(Ts.prototype)).point=function(e,t){Ts.prototype.point.call(this,t,e)},Ms.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,o,i){this._context.bezierCurveTo(t,e,r,n,i,o)}},Ds.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=Ns(e),o=Ns(t),i=0,a=1;a<n;++i,++a)this._context.bezierCurveTo(r[0][i],o[0][i],r[1][i],o[1][i],e[a],t[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};function Ps(e,t){this._context=e,this._t=t}Ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};function Os(){this._=null}function Bs(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function Rs(e,t){var n=t,r=t.R,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function js(e,t){var n=t,r=t.L,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Us(e){for(;e.L;)e=e.L;return e}Os.prototype={constructor:Os,insert:function(e,t){var n,r,o;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=Us(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.R&&(Rs(this,n),n=(e=n).U),n.C=!1,r.C=!0,js(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.L&&(js(this,n),n=(e=n).U),n.C=!1,r.C=!0,Rs(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,o=e.U,i=e.L,a=e.R;if(n=i?a?Us(a):i:a,o?o.L===e?o.L=n:o.R=n:this._=n,i&&a?(r=n.C,n.C=e.C,n.L=i,i.U=n,n!==a?(o=n.U,n.U=e.U,e=n.R,o.L=e,n.R=a,a.U=n):(n.U=o,o=n,e=n.R)):(r=e.C,e=n),e&&(e.U=o),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===o.L){if((t=o.R).C&&(t.C=!1,o.C=!0,Rs(this,o),t=o.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,js(this,t),t=o.R),t.C=o.C,o.C=t.R.C=!1,Rs(this,o),e=this._;break}}else if((t=o.L).C&&(t.C=!1,o.C=!0,js(this,o),t=o.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,Rs(this,t),t=o.L),t.C=o.C,o.C=t.L.C=!1,js(this,o),e=this._;break}t.C=!0,e=o,o=o.U}while(!e.C);e&&(e.C=!1)}}};var Is=Os;function Ls(e,t,n,r){var o=[null,null],i=uc.push(o)-1;return o.left=e,o.right=t,n&&zs(o,e,t,n),r&&zs(o,t,e,r),cc[e.index].halfedges.push(i),cc[t.index].halfedges.push(i),o}function qs(e,t,n){var r=[t,n];return r.left=e,r}function zs(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function Ys(e,t,n,r,o){var i,a=e[0],s=e[1],c=a[0],f=a[1],u=0,h=1,l=s[0]-c,d=s[1]-f;if(i=t-c,l||!(i>0)){if(i/=l,l<0){if(i<u)return;i<h&&(h=i)}else if(l>0){if(i>h)return;i>u&&(u=i)}if(i=r-c,l||!(i<0)){if(i/=l,l<0){if(i>h)return;i>u&&(u=i)}else if(l>0){if(i<u)return;i<h&&(h=i)}if(i=n-f,d||!(i>0)){if(i/=d,d<0){if(i<u)return;i<h&&(h=i)}else if(d>0){if(i>h)return;i>u&&(u=i)}if(i=o-f,d||!(i<0)){if(i/=d,d<0){if(i>h)return;i>u&&(u=i)}else if(d>0){if(i<u)return;i<h&&(h=i)}return!(u>0||h<1)||(u>0&&(e[0]=[c+u*l,f+u*d]),h<1&&(e[1]=[c+h*l,f+h*d]),!0)}}}}}function Hs(e,t,n,r,o){var i=e[1];if(i)return!0;var a,s,c=e[0],f=e.left,u=e.right,h=f[0],l=f[1],d=u[0],p=u[1],b=(h+d)/2,y=(l+p)/2;if(p===l){if(b<t||b>=r)return;if(h>d){if(c){if(c[1]>=o)return}else c=[b,n];i=[b,o]}else{if(c){if(c[1]<n)return}else c=[b,o];i=[b,n]}}else if(s=y-(a=(h-d)/(p-l))*b,a<-1||a>1)if(h>d){if(c){if(c[1]>=o)return}else c=[(n-s)/a,n];i=[(o-s)/a,o]}else{if(c){if(c[1]<n)return}else c=[(o-s)/a,o];i=[(n-s)/a,n]}else if(l<p){if(c){if(c[0]>=r)return}else c=[t,a*t+s];i=[r,a*r+s]}else{if(c){if(c[0]<t)return}else c=[r,a*r+s];i=[t,a*t+s]}return e[0]=c,e[1]=i,!0}function Xs(e,t){var n=e.site,r=t.left,o=t.right;return n===o&&(o=r,r=n),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(n===r?(r=t[1],o=t[0]):(r=t[0],o=t[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function $s(e,t){return t[+(t.left!==e.site)]}function Vs(e,t){return t[+(t.left===e.site)]}var Ws,Gs=[];function Js(){Bs(this),this.x=this.y=this.arc=this.site=this.cy=null}function Zs(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,o=e.site,i=n.site;if(r!==i){var a=o[0],s=o[1],c=r[0]-a,f=r[1]-s,u=i[0]-a,h=i[1]-s,l=2*(c*h-f*u);if(!(l>=-lc)){var d=c*c+f*f,p=u*u+h*h,b=(h*d-f*p)/l,y=(c*p-u*d)/l,g=Gs.pop()||new Js;g.arc=e,g.site=o,g.x=b+a,g.y=(g.cy=y+s)+Math.sqrt(b*b+y*y),e.circle=g;for(var m=null,_=fc._;_;)if(g.y<_.y||g.y===_.y&&g.x<=_.x){if(!_.L){m=_.P;break}_=_.L}else{if(!_.R){m=_;break}_=_.R}fc.insert(m,g),m||(Ws=g)}}}}function Ks(e){var t=e.circle;t&&(t.P||(Ws=t.N),fc.remove(t),Gs.push(t),Bs(t),e.circle=null)}var Qs=[];function ec(){Bs(this),this.edge=this.site=this.circle=null}function tc(e){var t=Qs.pop()||new ec;return t.site=e,t}function nc(e){Ks(e),sc.remove(e),Qs.push(e),Bs(e)}function rc(e){var t=e.circle,n=t.x,r=t.cy,o=[n,r],i=e.P,a=e.N,s=[e];nc(e);for(var c=i;c.circle&&Math.abs(n-c.circle.x)<hc&&Math.abs(r-c.circle.cy)<hc;)i=c.P,s.unshift(c),nc(c),c=i;s.unshift(c),Ks(c);for(var f=a;f.circle&&Math.abs(n-f.circle.x)<hc&&Math.abs(r-f.circle.cy)<hc;)a=f.N,s.push(f),nc(f),f=a;s.push(f),Ks(f);var u,h=s.length;for(u=1;u<h;++u)f=s[u],c=s[u-1],zs(f.edge,c.site,f.site,o);c=s[0],(f=s[h-1]).edge=Ls(c.site,f.site,null,o),Zs(c),Zs(f)}function oc(e){for(var t,n,r,o,i=e[0],a=e[1],s=sc._;s;)if((r=ic(s,a)-i)>hc)s=s.L;else{if(!((o=i-ac(s,a))>hc)){r>-hc?(t=s.P,n=s):o>-hc?(t=s,n=s.N):t=n=s;break}if(!s.R){t=s;break}s=s.R}!function(e){cc[e.index]={site:e,halfedges:[]}}(e);var c=tc(e);if(sc.insert(t,c),t||n){if(t===n)return Ks(t),n=tc(t.site),sc.insert(c,n),c.edge=n.edge=Ls(t.site,c.site),Zs(t),void Zs(n);if(n){Ks(t),Ks(n);var f=t.site,u=f[0],h=f[1],l=e[0]-u,d=e[1]-h,p=n.site,b=p[0]-u,y=p[1]-h,g=2*(l*y-d*b),m=l*l+d*d,_=b*b+y*y,v=[(y*m-d*_)/g+u,(l*_-b*m)/g+h];zs(n.edge,f,p,v),c.edge=Ls(f,e,null,v),n.edge=Ls(e,p,null,v),Zs(t),Zs(n)}else c.edge=Ls(t.site,c.site)}}function ic(e,t){var n=e.site,r=n[0],o=n[1],i=o-t;if(!i)return r;var a=e.P;if(!a)return-1/0;var s=(n=a.site)[0],c=n[1],f=c-t;if(!f)return s;var u=s-r,h=1/i-1/f,l=u/f;return h?(-l+Math.sqrt(l*l-2*h*(u*u/(-2*f)-c+f/2+o-i/2)))/h+r:(r+s)/2}function ac(e,t){var n=e.N;if(n)return ic(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var sc,cc,fc,uc,hc=1e-6,lc=1e-12;function dc(e,t){return t[1]-e[1]||t[0]-e[0]}function pc(e,t){var n,r,o,i=e.sort(dc).pop();for(uc=[],cc=new Array(e.length),sc=new Is,fc=new Is;;)if(o=Ws,i&&(!o||i[1]<o.y||i[1]===o.y&&i[0]<o.x))i[0]===n&&i[1]===r||(oc(i),n=i[0],r=i[1]),i=e.pop();else{if(!o)break;rc(o.arc)}if(function(){for(var e,t,n,r,o=0,i=cc.length;o<i;++o)if((e=cc[o])&&(r=(t=e.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=Xs(e,uc[t[n]]);for(a.sort(function(e,t){return s[t]-s[e]}),n=0;n<r;++n)s[n]=t[a[n]];for(n=0;n<r;++n)t[n]=s[n]}}(),t){var a=+t[0][0],s=+t[0][1],c=+t[1][0],f=+t[1][1];!function(e,t,n,r){for(var o,i=uc.length;i--;)Hs(o=uc[i],e,t,n,r)&&Ys(o,e,t,n,r)&&(Math.abs(o[0][0]-o[1][0])>hc||Math.abs(o[0][1]-o[1][1])>hc)||delete uc[i]}(a,s,c,f),function(e,t,n,r){var o,i,a,s,c,f,u,h,l,d,p,b,y=cc.length,g=!0;for(o=0;o<y;++o)if(i=cc[o]){for(a=i.site,s=(c=i.halfedges).length;s--;)uc[c[s]]||c.splice(s,1);for(s=0,f=c.length;s<f;)p=(d=Vs(i,uc[c[s]]))[0],b=d[1],h=(u=$s(i,uc[c[++s%f]]))[0],l=u[1],(Math.abs(p-h)>hc||Math.abs(b-l)>hc)&&(c.splice(s,0,uc.push(qs(a,d,Math.abs(p-e)<hc&&r-b>hc?[e,Math.abs(h-e)<hc?l:r]:Math.abs(b-r)<hc&&n-p>hc?[Math.abs(l-r)<hc?h:n,r]:Math.abs(p-n)<hc&&b-t>hc?[n,Math.abs(h-n)<hc?l:t]:Math.abs(b-t)<hc&&p-e>hc?[Math.abs(l-t)<hc?h:e,t]:null))-1),++f);f&&(g=!1)}if(g){var m,_,v,w=1/0;for(o=0,g=null;o<y;++o)(i=cc[o])&&(v=(m=(a=i.site)[0]-e)*m+(_=a[1]-t)*_)<w&&(w=v,g=i);if(g){var x=[e,t],F=[e,r],C=[n,r],A=[n,t];g.halfedges.push(uc.push(qs(a=g.site,x,F))-1,uc.push(qs(a,F,C))-1,uc.push(qs(a,C,A))-1,uc.push(qs(a,A,x))-1)}}for(o=0;o<y;++o)(i=cc[o])&&(i.halfedges.length||delete cc[o])}(a,s,c,f)}this.edges=uc,this.cells=cc,sc=fc=uc=cc=null}pc.prototype={constructor:pc,polygons:function(){var e=this.edges;return this.cells.map(function(t){var n=t.halfedges.map(function(n){return $s(t,e[n])});return n.data=t.site.data,n})},triangles:function(){var e=[],t=this.edges;return this.cells.forEach(function(n,r){if(i=(o=n.halfedges).length)for(var o,i,a,s,c,f,u=n.site,h=-1,l=t[o[i-1]],d=l.left===u?l.right:l.left;++h<i;)a=d,d=(l=t[o[h]]).left===u?l.right:l.left,a&&d&&r<a.index&&r<d.index&&(c=a,f=d,((s=u)[0]-f[0])*(c[1]-s[1])-(s[0]-c[0])*(f[1]-s[1])<0)&&e.push([u.data,a.data,d.data])}),e},links:function(){return this.edges.filter(function(e){return e.right}).map(function(e){return{source:e.left.data,target:e.right.data}})},find:function(e,t,n){for(var r,o,i=this,a=i._found||0,s=i.cells.length;!(o=i.cells[a]);)if(++a>=s)return null;var c=e-o.site[0],f=t-o.site[1],u=c*c+f*f;do{o=i.cells[r=a],a=null,o.halfedges.forEach(function(n){var r=i.edges[n],s=r.left;if(s!==o.site&&s||(s=r.right)){var c=e-s[0],f=t-s[1],h=c*c+f*f;h<u&&(u=h,a=s.index)}})}while(null!==a);return i._found=r,null==n||u<=n*n?o.site:null}};function bc(e,t,n){this.k=e,this.x=t,this.y=n}bc.prototype={constructor:bc,scale:function(e){return 1===e?this:new bc(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new bc(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new bc(1,0,0);bc.prototype;n.d(t,"a",function(){return xe}),n.d(t,"b",function(){return Rn}),n.d(t,"d",function(){return Io}),n.d(t,"e",function(){return ie}),n.d(t,"c",function(){return W})},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){var r,o=n(62),i=n(22),a=n(64),s=n(65),c=n(66);"undefined"!=typeof ArrayBuffer&&(r=n(67));var f="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),u="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),h=f||u;t.protocol=3;var l=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(l),p={type:"error",data:"parser error"},b=n(68);function y(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(e,n,r,o){"function"==typeof n&&(o=n,n=!1),"function"==typeof r&&(o=r,r=null);var i=void 0===e.data?void 0:e.data.buffer||e.data;if("undefined"!=typeof ArrayBuffer&&i instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=l[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(e,n,o);if(void 0!==b&&i instanceof b)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(h)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){t.encodePacket({type:e.type,data:o.result},n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=l[e.type];var i=new b([o.buffer,e.data]);return r(i)}(e,n,o);if(i&&i.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(e,o);var a=l[e.type];return void 0!==e.data&&(a+=r?c.encode(String(e.data),{strict:!1}):String(e.data)),o(""+a)},t.encodeBase64Packet=function(e,n){var r,o="b"+t.packets[e.type];if(void 0!==b&&e.data instanceof b){var i=new FileReader;return i.onload=function(){var e=i.result.split(",")[1];n(o+e)},i.readAsDataURL(e.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(t){for(var a=new Uint8Array(e.data),s=new Array(a.length),c=0;c<a.length;c++)s[c]=a[c];r=String.fromCharCode.apply(null,s)}return o+=btoa(r),n(o)},t.decodePacket=function(e,n,r){if(void 0===e)return p;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=c.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return p;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:p}o=new Uint8Array(e)[0];var i=a(e,1);return b&&"blob"===n&&(i=new b([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&b&&(o=new b([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return b&&!h?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");y(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(p,0,1);for(var i,a,s="",c=0,f=e.length;c<f;c++){var u=e.charAt(c);if(":"===u){if(""===s||s!=(i=Number(s)))return r(p,0,1);if(s!=(a=e.substr(c+1,i)).length)return r(p,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),p.type===o.type&&p.data===o.data)return r(p,0,1);if(!1===r(o,c+i,f))return}c+=i,s=""}else s+=u}return""!==s?r(p,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));y(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){y(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,b){var s=new b([t.buffer,a.buffer,e]);n(null,s)}})},function(e,t){return n(new b(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),c=0===s[0],f="",u=1;255!==s[u];u++){if(f.length>310)return r(p,0,1);f+=s[u]}o=a(o,2+f.length),f=parseInt(f);var h=a(o,0,f);if(c)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(e){var l=new Uint8Array(h);h="";for(u=0;u<l.length;u++)h+=String.fromCharCode(l[u])}i.push(h),o=a(o,f)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(51)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(9))},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(69)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(9))},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),c=null,f=0,u=[],h=n(36);function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(m(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function p(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function b(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return g(t,e.attrs),p(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function m(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=f++;n=c||(c=y(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=h(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){b(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){b(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return l(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&l(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var _,v=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,f=[],u=!1,h=-1;function l(){u&&c&&(u=!1,c.length?f=c.concat(f):h=-1,f.length&&d())}function d(){if(!u){var e=s(l);u=!0;for(var t=f.length;t;){for(c=f,f=[];++h<t;)c&&c[h].run();h=-1,t=f.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function b(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new p(e,t)),1!==f.length||u||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=b,o.addListener=b,o.once=b,o.off=b,o.removeListener=b,o.removeAllListeners=b,o.emit=b,o.prependListener=b,o.prependOnceListener=b,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=365.25*i;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var c,f=typeof e;if("string"===f&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===f&&!1===isNaN(e))return t.long?s(c=e,i,"day")||s(c,o,"hour")||s(c,r,"minute")||s(c,n,"second")||c+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){var r=n(52)("socket.io-parser"),o=n(1),i=n(54),a=n(16),s=n(17);function c(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=c,t.Decoder=h;var f=t.ERROR+'"encode error"';function u(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return f;n+=o}return r("encoded %j as %s",e,n),n}function h(){this.reconstructor=null}function l(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}c.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,function(e){var n=i.deconstructPacket(e),r=u(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([u(e)])},o(h.prototype),h.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var c=e.charAt(n+1);if(""!==c&&Number(c)==c){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var f=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),u=!1!==f&&(o.type===t.ERROR||a(f));if(!u)return d("invalid payload");o.data=f}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new l(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},h.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},l.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},l.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(55),o=n(56),i=n(57);function a(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return f(this,e,t,n)}function f(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=l(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(c.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):l(e,t);if("Buffer"===t.type&&i(t.data))return l(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(u(t),e=s(e,t<0?0:0|d(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function l(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return L(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(e).length;default:if(r)return L(e).length;t=(""+t).toLowerCase(),r=!0}}function b(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function y(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,s=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,c/=2,n/=2}function f(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var u=-1;for(i=n;i<s;i++)if(f(e,i)===f(t,-1===u?0:i-u)){if(-1===u&&(u=i),i-u+1===c)return u*a}else-1!==u&&(i-=i-u),u=-1}else for(n+c>s&&(n=s-c),i=n;i>=0;i--){for(var h=!0,l=0;l<c;l++)if(f(e,i+l)!==f(t,l)){h=!1;break}if(h)return i}return-1}function m(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function _(e,t,n,r){return z(L(t,e.length-n),e,n,r)}function v(e,t,n,r){return z(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function w(e,t,n,r){return v(e,t,n,r)}function x(e,t,n,r){return z(q(t),e,n,r)}function F(e,t,n,r){return z(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function C(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function A(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,c,f=e[o],u=null,h=f>239?4:f>223?3:f>191?2:1;if(o+h<=n)switch(h){case 1:f<128&&(u=f);break;case 2:128==(192&(i=e[o+1]))&&(c=(31&f)<<6|63&i)>127&&(u=c);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(c=(15&f)<<12|(63&i)<<6|63&a)>2047&&(c<55296||c>57343)&&(u=c);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(c=(15&f)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&c<1114112&&(u=c)}null===u?(u=65533,h=1):u>65535&&(u-=65536,r.push(u>>>10&1023|55296),u=56320|1023&u),r.push(u),o+=h}return function(e){var t=e.length;if(t<=k)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=k));return n}(r)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return f(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return function(e,t,n,r){return u(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},c.allocUnsafe=function(e){return h(null,e)},c.allocUnsafeSlow=function(e){return h(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!c.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return S(this,t,n);case"utf8":case"utf-8":return A(this,t,n);case"ascii":return E(this,t,n);case"latin1":case"binary":return T(this,t,n);case"base64":return C(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(i,a),f=this.slice(r,o),u=e.slice(t,n),h=0;h<s;++h)if(f[h]!==u[h]){i=f[h],a=u[h];break}return i<a?-1:a<i?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return m(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return v(this,e,t,n);case"latin1":case"binary":return w(this,e,t,n);case"base64":return x(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function E(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function S(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=I(e[i]);return o}function M(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,o,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function P(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function O(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function B(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(e,t,n,r,i){return i||B(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function j(e,t,n,r,i){return i||B(e,0,n,8),o.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;n=new c(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},c.prototype.readUInt8=function(e,t){return t||D(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||D(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||D(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||D(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||D(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||D(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||D(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||D(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||D(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):O(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):O(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):O(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):O(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return R(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return R(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return j(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return j(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=c.isBuffer(e)?e:L(new c(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function I(e){return e<16?"0"+e.toString(16):e.toString(16)}function L(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function q(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(18))},function(e,t,n){var r=n(60);e.exports=function(e){var t=e.xdomain,n=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(e){}if(!t)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},function(e,t,n){var r=n(2),o=n(1);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.isReactNative=e.isReactNative,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},c=14;c--;)s[r[c]]=a[c]||"";return-1!=o&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.isBuffer(e)||r&&(e instanceof ArrayBuffer||o(e))};var n="function"==typeof t&&"function"==typeof t.isBuffer,r="function"==typeof ArrayBuffer,o=function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}}).call(this,n(12).Buffer)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(58),o=n(25),i=n(1),a=n(11),s=n(26),c=n(27),f=n(4)("socket.io-client:manager"),u=n(24),h=n(74),l=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)l.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)l.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(f("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;f("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=s(n,"open",function(){o.onopen(),e&&e()}),a=s(n,"error",function(t){if(f("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var c=this._timeout;f("connect attempt will timeout after %d",c);var u=setTimeout(function(){f("connect attempt timed out after %d",c),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",c)},c);this.subs.push({destroy:function(){clearTimeout(u)}})}return this.subs.push(i),this.subs.push(a),this},d.prototype.onopen=function(){f("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(s(e,"data",c(this,"ondata"))),this.subs.push(s(e,"ping",c(this,"onping"))),this.subs.push(s(e,"pong",c(this,"onpong"))),this.subs.push(s(e,"error",c(this,"onerror"))),this.subs.push(s(e,"close",c(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",c(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){f("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&i()}function i(){~u(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(e){var t=u(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){f("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){f("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){f("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){f("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)f("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();f("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(f("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(f("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(f("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){var r=n(13),o=n(61),i=n(70),a=n(71);t.polling=function(e){var t=!1,n=!1,a=!1!==e.jsonp;if("undefined"!=typeof location){var s="https:"===location.protocol,c=location.port;c||(c=s?443:80),t=e.hostname!==location.hostname||c!==e.port,n=e.secure!==s}if(e.xdomain=t,e.xscheme=n,"open"in new r(e)&&!e.forceJSONP)return new o(e);if(!a)throw new Error("JSONP disabled");return new i(e)},t.websocket=a},function(e,t,n){var r=n(14),o=n(5),i=n(2),a=n(6),s=n(23),c=n(7)("engine.io-client:polling");e.exports=u;var f=null!=new(n(13))({xdomain:!1}).responseType;function u(e){var t=e&&e.forceBase64;f&&!t||(this.supportsBinary=!1),r.call(this,e)}a(u,r),u.prototype.name="polling",u.prototype.doOpen=function(){this.poll()},u.prototype.pause=function(e){var t=this;function n(){c("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(c("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){c("pre-pause polling complete"),--r||n()})),this.writable||(c("we are currently writing - waiting to pause"),r++,this.once("drain",function(){c("pre-pause writing complete"),--r||n()}))}else n()},u.prototype.poll=function(){c("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},u.prototype.onData=function(e){var t=this;c("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():c('ignoring poll - transport state "%s"',this.readyState))},u.prototype.doClose=function(){var e=this;function t(){c("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(c("transport open - closing"),t()):(c("transport not open - deferring close"),this.once("open",t))},u.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},u.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(t){var r=n(63),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,s=n.length;o<s;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||a&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var c in n)if(Object.prototype.hasOwnProperty.call(n,c)&&e(n[c]))return!0;return!1}}).call(this,n(12).Buffer)},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,c=0;function f(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function u(){var e=f(+new Date);return e!==r?(s=0,r=e):e+"."+f(s++)}for(;c<i;c++)a[o[c]]=c;u.encode=f,u.decode=function(e){var t=0;for(c=0;c<e.length;c++)t=t*i+a[e.charAt(c)];return t},e.exports=u},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(11),o=n(1),i=n(73),a=n(26),s=n(27),c=n(4)("socket.io-client:socket"),f=n(5),u=n(22);e.exports=d;var h={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},l=o.prototype.emit;function d(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",s(this,"onopen")),a(e,"packet",s(this,"onpacket")),a(e,"close",s(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(h.hasOwnProperty(e))return l.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:u(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(c("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(c("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?f.encode(this.query):this.query;c("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){c("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];c("emitting event %j",t),null!=e.id&&(c("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?l.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);c("sending ack %j",o),t.packet({type:u(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(c("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):c("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)l.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){c("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(c("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this;Object.defineProperty(t,"__esModule",{value:!0});var a=n(29),s=n(31),c=n(32),f=n(33);n(34),n(37),n(39);var u,h=n(49),l=document.getElementById("vis"),d=document.getElementById("state"),p=new s.ProvenanceGraph({name:"FileChange",version:"1.0.0"}),b=new s.ActionFunctionRegistry,y=new s.ProvenanceTracker(b,p),g=new s.ProvenanceGraphTraverser(b,p),m=new a.FileChange(p,b,y,g),_=document.getElementById("play");console.log("Try to logon...");var v=h.connect("http://localhost:8082");v.on("connected",function(e){console.log("Connected User?",e.accept)});v.on("fileChanged",function(e){return r(i,void 0,void 0,function(){var t;return o(this,function(n){switch(n.label){case 0:return console.log("typeof data: "+typeof e),e&&0!==e.length?(console.log(e),"comment_changed"!=(t=new a.DataTypes(e)).type&&"comment_remove"!=t.type?[3,2]:[4,y.applyAction({do:"comment",doArguments:[t.address,t.newComment,t.functionAddr],undo:"comment",undoArguments:[t.address,t.oldComment,t.functionAddr],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"comment"}})]):[3,24];case 1:return n.sent().label="comment "+t.address,[3,24];case 2:return"view"!=t.type?[3,4]:[4,y.applyAction({do:"view",doArguments:[t.address,t.view],undo:"view",undoArguments:[t.oldaddress,t.oldview],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"view"}})];case 3:return n.sent().label="view "+t.view+" "+t.address,[3,24];case 4:return"func_name_updated"!=t.type?[3,6]:(console.log("Func_name_updated"),[4,y.applyAction({do:"funcName",doArguments:[t.address,t.newFuncName],undo:"funcName",undoArguments:[t.address,t.oldFuncName],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"func_name_updated"}})]);case 5:return n.sent().label="func_name "+t.type,[3,24];case 6:return"func_name_type_updated"!=t.type?[3,8]:(console.log("Func_name_type_updated"),[4,y.applyAction({do:"funcNameType",doArguments:[t.address,t.newFuncName,t.newFuncType],undo:"funcNameType",undoArguments:[t.address,t.oldFuncName,t.oldFuncType],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"func_name_type_updated"}})]);case 7:return n.sent().label="func_name_type "+t.type,[3,24];case 8:return"func_type_updated"!=t.type?[3,10]:(console.log("Func_type_updated"),[4,y.applyAction({do:"funcType",doArguments:[t.address,t.newFuncType],undo:"funcType",undoArguments:[t.address,t.oldFuncType],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"func_type_updated"}})]);case 9:return n.sent().label="func_type "+t.type,[3,24];case 10:return"func_removed"!=t.type?[3,12]:[4,y.applyAction({do:"undefineFunc",doArguments:[t.functionAddr],undo:"defineFunc",undoArguments:[t.functionName,t.functionAddr],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"func_removed"}})];case 11:return n.sent().label="func_removed "+t.type,[3,24];case 12:return"func_added"!=t.type?[3,14]:[4,y.applyAction({do:"defineFunc",doArguments:[t.functionName,t.functionAddr],undo:"undefineFunc",undoArguments:[t.functionAddr],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"func_added"}})];case 13:return n.sent().label="func_removed "+t.type,[3,24];case 14:return"type_defined"!=t.type?[3,16]:[4,y.applyAction({do:"addType",doArguments:[t.typeName,t.typeDefined],undo:"removeType",undoArguments:[t.typeName],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"type_defined"}})];case 15:return n.sent().label="type_defined "+t.type,[3,24];case 16:return"type_undefined"!=t.type?[3,18]:[4,y.applyAction({do:"removeType",doArguments:[t.typeName],undo:"addType",undoArguments:[t.typeName,t.typeDefined],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"type_undefined"}})];case 17:return n.sent().label="type_undefined "+t.type,[3,24];case 18:return"data_written"!=t.type?[3,20]:[4,y.applyAction({do:"dataWritten",doArguments:[t.address,t.dataNew],undo:"dataWritten",undoArguments:[t.address,t.dataOld],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"data_written"}})];case 19:return n.sent().label="data_written "+t.type,[3,24];case 20:return"highlight"!=t.type?[3,22]:[4,y.applyAction({do:"highlight",doArguments:[t.address,t.colorNew],undo:"highlight",undoArguments:[t.address,t.colorOld],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"highlight"}})];case 21:return n.sent().label="highlight "+t.type,[3,24];case 22:return"var_type_updated"!=t.type&&"var_updated"!=t.type&&"var_name_updated"!=t.type?[3,24]:[4,y.applyAction({do:"funcVar",doArguments:[t.functionAddr,t.newVarType,t.newVarName,t.index],undo:"funcVar",undoArguments:[t.functionAddr,t.oldVarType,t.oldVarName,t.index],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"varNameType_updated"}})];case 23:n.sent().label="varNameType_updated",n.label=24;case 24:return[2]}})})});p.on("currentChanged",function(e){d.innerHTML=m.currentState()}),m.setupBasicGraph().then(function(){new c.ProvenanceTreeVisualization(g,l);var e=new s.ProvenanceSlidedeck({name:"fileChange",version:"1.0.0"},g);new f.SlideDeckVisualization(e,document.getElementById("slidedeck_root"));u=new s.ProvenanceSlidedeckPlayer(e.slides,function(t){return e.selectedSlide=t}),_.addEventListener("click",function(){u.setSlideIndex(e.slides.indexOf(e.selectedSlide)),u.play()})})},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(30),s=function(){function e(){this.method="Starting..."}return e.prototype.funcName=function(e,t){return o(this,void 0,void 0,function(){var n,r;return i(this,function(o){switch(o.label){case 0:return this.method="funcName",console.log("FileChangeApp "+this.method),"FuncName",(n=new a.XmlRpcRequest("http://localhost:1337/RPC2","FuncName")).addParam(e),n.addParam(t),[4,n.send()];case 1:return r=o.sent(),console.log(r),[2]}})})},e.prototype.funcType=function(e,t){return o(this,void 0,void 0,function(){var n,r;return i(this,function(o){switch(o.label){case 0:return this.method="funcType",console.log("FileChangeApp "+this.method),"FuncType",(n=new a.XmlRpcRequest("http://localhost:1337/RPC2","FuncType")).addParam(e),n.addParam(t),[4,n.send()];case 1:return r=o.sent(),console.log(r),[2]}})})},e.prototype.funcVar=function(e,t,n,r){return o(this,void 0,void 0,function(){var o,s;return i(this,function(i){switch(i.label){case 0:return this.method="varNameType","FuncVar",(o=new a.XmlRpcRequest("http://localhost:1337/RPC2","FuncVar")).addParam(e),o.addParam(t),o.addParam(n),o.addParam(r),[4,o.send()];case 1:return s=i.sent(),console.log(s),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.comment=function(e,t,n){return o(this,void 0,void 0,function(){var r,o;return i(this,function(i){switch(i.label){case 0:return this.method="comment","MakeComm",(r=new a.XmlRpcRequest("http://localhost:1337/RPC2","MakeComm")).addParam(e),r.addParam(t),r.addParam(n),[4,r.send()];case 1:return o=i.sent(),console.log(o),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.highlight=function(e,t){return o(this,void 0,void 0,function(){var n,r;return i(this,function(o){switch(o.label){case 0:return this.method="highlight","SetColor",(n=new a.XmlRpcRequest("http://localhost:1337/RPC2","SetColor")).addParam(e),n.addParam(t),[4,n.send()];case 1:return r=o.sent(),console.log(r),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.defineFunc=function(e){return o(this,void 0,void 0,function(){var t,n;return i(this,function(r){switch(r.label){case 0:return this.method="defineFunc","DefineFunc",(t=new a.XmlRpcRequest("http://localhost:1337/RPC2","DefineFunc")).addParam(e),[4,t.send()];case 1:return n=r.sent(),console.log(n),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.undefineFunc=function(e){return o(this,void 0,void 0,function(){var t,n;return i(this,function(r){switch(r.label){case 0:return this.method="undefineFunc","UndefineFunc",(t=new a.XmlRpcRequest("http://localhost:1337/RPC2","UndefineFunc")).addParam(e),[4,t.send()];case 1:return n=r.sent(),console.log(n),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.dataWritten=function(e,t){return o(this,void 0,void 0,function(){var n,r;return i(this,function(o){switch(o.label){case 0:return this.method="dataWritten","WriteData",(n=new a.XmlRpcRequest("http://localhost:1337/RPC2","WriteData")).addParam(e),n.addParam(t),[4,n.send()];case 1:return r=o.sent(),console.log(r),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.addType=function(e,t){return o(this,void 0,void 0,function(){var n,r;return i(this,function(o){switch(o.label){case 0:return this.method="addType","AddType",(n=new a.XmlRpcRequest("http://localhost:1337/RPC2","AddType")).addParam(e),n.addParam(t),[4,n.send()];case 1:return r=o.sent(),console.log(r),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.removeType=function(e){return o(this,void 0,void 0,function(){var t,n;return i(this,function(r){switch(r.label){case 0:return this.method="removeType","RemoveType",(t=new a.XmlRpcRequest("http://localhost:1337/RPC2","RemoveType")).addParam(e),[4,t.send()];case 1:return n=r.sent(),console.log(n),console.log("FileChangeApp "+this.method),[2]}})})},e.prototype.view=function(e,t){return o(this,void 0,void 0,function(){var n,r;return i(this,function(o){switch(o.label){case 0:return this.method="view","Jump",(n=new a.XmlRpcRequest("http://localhost:1337/RPC2","Jump")).addParam(e),n.addParam(t),[4,n.send()];case 1:return r=o.sent(),console.log(r),console.log("FileChangeApp "+this.method),[2]}})})},e}(),c=function(){function e(e){this.datablock=e,this.parseJSON(this.datablock)}return e.prototype.parseJSON=function(e){var t=JSON.parse(e);"func_name_updated"==Object.values(t)[5]||"func_type_updated"==Object.values(t)[5]||"func_name_type_updated"==Object.values(t)[5]?(this.oldFuncName=Object.values(t)[2],this.type=Object.values(t)[5],this.newFuncName=Object.values(t)[1],this.address=Object.values(t)[0],this.oldFuncType=Object.values(t)[2],this.newFuncType=Object.values(t)[3],this.view=Object.values(t)[6],console.log(this.type+" "+this.newFuncName+" "+this.newFuncType)):"comment_changed"==Object.values(t)[4]||"comment_remove"==Object.values(t)[4]?(this.address=Object.values(t)[0],this.newComment=Object.values(t)[1],this.oldComment=Object.values(t)[2],this.functionAddr=Object.values(t)[3],this.type=Object.values(t)[4],this.view=Object.values(t)[5],console.log(this.type+" "+this.newComment+" "+this.oldComment+" "+this.address)):"var_type_updated"==Object.values(t)[3]||"var_updated"==Object.values(t)[3]||"var_name_updated"==Object.values(t)[3]?(this.functionAddr=Object.values(t)[0],this.functionName=Object.values(t)[1],this.index=Object.values(t)[2],this.type=Object.values(t)[3],this.newVarName=Object.values(t)[4],this.oldVarName=Object.values(t)[5],this.newVarType=Object.values(t)[6],this.oldVarType=Object.values(t)[7],this.view=Object.values(t)[8],console.log(this.type+" "+this.functionAddr+" "+this.newVarName+" "+this.newVarType)):"data_written"==Object.values(t)[4]?(this.type=Object.values(t)[4],this.address=Object.values(t)[0],this.dataNew=Object.values(t)[1],this.dataOld=Object.values(t)[2],this.length=Object.values(t)[3],this.view=Object.values(t)[5],console.log(this.type+" "+this.address+" "+this.dataNew)):"highlight"==Object.values(t)[4]?(this.address=Object.values(t)[0],this.colorNew=Object.values(t)[1],this.colorOld=Object.values(t)[2],this.functionAddr=Object.values(t)[3],this.type=Object.values(t)[4],this.view=Object.values(t)[5],console.log(this.type+" "+this.address+" "+this.colorNew)):"func_removed"==Object.values(t)[2]||"func_added"==Object.values(t)[2]?(this.functionAddr=Object.values(t)[0],this.functionName=Object.values(t)[1],this.type=Object.values(t)[2],this.view=Object.values(t)[3],console.log(this.type+" "+this.functionAddr+" "+this.functionName)):"type_defined"==Object.values(t)[1]||"type_undefined"==Object.values(t)[1]?(this.typeName=Object.values(t)[0],this.type=Object.values(t)[1],this.typeDefined=Object.values(t)[2],this.view=Object.values(t)[3],console.log(this.type+" "+this.typeName+" "+this.typeDefined)):"bv.file.view"==Object.values(t)[0]&&(this.view=Object.values(t)[0],this.oldview=Object.values(t)[1],this.oldaddress=Object.values(t)[2],this.type=Object.values(t)[3],this.address=Object.values(t)[4],console.log(this.view+" "+this.oldview+" "+this.address+" "+this.oldaddress))},e}();t.DataTypes=c;var f=function(){function e(e,t,n,r){this.graph=e,this.registry=t,this.tracker=n,this.traverser=r,this.app=new s,this.registry.register("funcName",this.app.funcName,this.app),this.registry.register("funcType",this.app.funcType,this.app),this.registry.register("comment",this.app.comment,this.app),this.registry.register("funcVar",this.app.funcVar,this.app),this.registry.register("dataWritten",this.app.dataWritten,this.app),this.registry.register("highlight",this.app.highlight,this.app),this.registry.register("defineFunc",this.app.defineFunc,this.app),this.registry.register("undefineFunc",this.app.undefineFunc,this.app),this.registry.register("addType",this.app.addType,this.app),this.registry.register("removeType",this.app.removeType,this.app),this.registry.register("view",this.app.view,this.app)}return e.prototype.makeActionAndApply=function(e,t,n,a,s,c){return o(this,void 0,void 0,function(){var o,f,u;return i(this,function(i){switch(i.label){case 0:return f={do:n,doArguments:a,metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:n}},o=e?r({},f,{undo:s,undoArguments:c}):r({},f),[4,this.tracker.applyAction(o)];case 1:return(u=i.sent()).label=t,[2,u]}})})},e.prototype.currentState=function(){return this.app.method},e.prototype.setupBasicGraph=function(){return o(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.makeActionAndApply(!0,"view Graph:PE","view",["0x401000","Graph:PE"],"view",["0x401000","Graph:PE"])];case 1:return e.sent(),[2]}})})},e}();t.FileChange=f},function(e,t,n){"use strict";
/*!
 *	Mimic (XML-RPC Client for JavaScript) v2.3 
 *	Copyright (C) 2005-2013 Carlos Eduardo Goncalves (cadu.goncalves@gmail.com)
 *
 *	Mimic is dual licensed under the MIT (http://opensource.org/licenses/mit-license.php) 
 * 	and GPLv3 (http://opensource.org/licenses/gpl-3.0.html) licenses.
 */
function r(){}n.r(t),n.d(t,"XmlRpcRequest",function(){return o}),r.PROLOG='<?xml version="1.0"?>\n',r.REQUEST="<methodCall>\n<methodName>${METHOD}</methodName>\n<params>\n${DATA}</params>\n</methodCall>",r.PARAM="<param>\n<value>\n${DATA}</value>\n</param>\n",r.ARRAY="<array>\n<data>\n${DATA}</data>\n</array>\n",r.STRUCT="<struct>\n${DATA}</struct>\n",r.MEMBER="<member>\n${DATA}</member>\n",r.NAME="<name>${DATA}</name>\n",r.VALUE="<value>\n${DATA}</value>\n",r.SCALAR="<${TYPE}>${DATA}</${TYPE}>\n",r.getDataTag=function(e){try{var t=typeof e;switch(t.toLowerCase()){case"number":t=Math.round(e)==e?"int":"double";break;case"object":t=e.constructor==s?"base64":e.constructor==String?"string":e.constructor==Boolean?"boolean":e.constructor==Array?"array":e.constructor==Date?"dateTime.iso8601":e.constructor==Number?Math.round(e)==e?"int":"double":"struct"}return t}catch(e){return null}},r.getTagData=function(e){var t=null;switch(e){case"struct":t=new Object;break;case"array":t=new Array;break;case"datetime.iso8601":t=new Date;break;case"boolean":t=new Boolean;break;case"int":case"i4":case"double":t=new Number;break;case"string":t=new String;break;case"base64":t=new s}return t};const o=function(e,t){this.serviceUrl=e,this.methodName=t,this.crossDomain=!1,this.withCredentials=!1,this.params=[],this.headers={}};function i(e){this.xmlData=e}function a(){}function s(e){this.bytes=e}o.prototype.addParam=function(e){switch((typeof e).toLowerCase()){case"function":return;case"object":if(!e.constructor.name)return}this.params.push(e)},o.prototype.clearParams=function(){this.params.splice(0,this.params.length)},o.prototype.setHeader=function(e,t){t?this.headers[e]=t:delete this.headers[e]},o.prototype.send=function(){var e,t,n="",o=0;for(o=0;o<this.params.length;o++)n+=r.PARAM.replace("${DATA}",this.marshal(this.params[o]));for(o in e=r.REQUEST.replace("${METHOD}",this.methodName),e=r.PROLOG+e.replace("${DATA}",n),(t=a.buildXHR(this.crossDomain)).open("POST",this.serviceUrl,!1),this.headers)this.headers.hasOwnProperty(o)&&t.setRequestHeader(o,this.headers[o]);return this.withCredentials&&"withCredentials"in t&&(t.withCredentials=!0),t.send(a.buildDOM(e)),new i(t.responseXML)},o.prototype.marshal=function(e){var t,n,o,i=r.getDataTag(e),a=r.SCALAR.replace(/\$\{TYPE\}/g,i),s="";switch(i){case"struct":for(n in o="",e)t="",t+=r.NAME.replace("${DATA}",n),t+=r.VALUE.replace("${DATA}",this.marshal(e[n])),o+=r.MEMBER.replace("${DATA}",t);s=r.STRUCT.replace("${DATA}",o);break;case"array":for(t="",n=0;n<e.length;n++)t+=r.VALUE.replace("${DATA}",this.marshal(e[n]));s=r.ARRAY.replace("${DATA}",t);break;case"dateTime.iso8601":s=a.replace("${DATA}",e.toIso8601());break;case"boolean":s=a.replace("${DATA}",1==e?1:0);break;case"base64":s=a.replace("${DATA}",e.encode());break;default:s=a.replace("${DATA}",e)}return s},i.prototype.isFault=function(){return this.faultValue},i.prototype.parseXML=function(){var e,t;for(t=this.xmlData.childNodes.length,this.faultValue=void 0,this.currentIsName=!1,this.propertyName="",this.params=[],e=0;e<t;e++)this.unmarshal(this.xmlData.childNodes[e],0);return this.params[0]},i.prototype.unmarshal=function(e,t){var n,o,i,a;if(1==e.nodeType){switch(n=null,o=e.tagName.toLowerCase()){case"fault":this.faultValue=!0;break;case"name":this.currentIsName=!0;break;default:n=r.getTagData(o)}if(null!=n&&(this.params.push(n),"struct"==o||"array"==o)){if(this.params.length>1)switch(r.getDataTag(this.params[t])){case"struct":this.params[t][this.propertyName]=this.params[this.params.length-1];break;case"array":this.params[t].push(this.params[this.params.length-1])}t=this.params.length-1}for(a=e.childNodes.length,i=0;i<a;i++)this.unmarshal(e.childNodes[i],t)}if(3==e.nodeType&&/[^\t\n\r ]/.test(e.nodeValue))if(1==this.currentIsName)this.propertyName=e.nodeValue,this.currentIsName=!1;else{switch(r.getDataTag(this.params[this.params.length-1])){case"dateTime.iso8601":this.params[this.params.length-1]=Date.fromIso8601(e.nodeValue);break;case"boolean":this.params[this.params.length-1]="1"==e.nodeValue;break;case"int":case"double":this.params[this.params.length-1]=new Number(e.nodeValue);break;case"string":this.params[this.params.length-1]=new String(e.nodeValue);break;case"base64":this.params[this.params.length-1]=new s(e.nodeValue)}if(this.params.length>1)switch(r.getDataTag(this.params[t])){case"struct":this.params[t][this.propertyName]=this.params[this.params.length-1];break;case"array":this.params[t].push(this.params[this.params.length-1])}}},a.buildXHR=function(e){return e?"undefined"!=typeof XDomainRequest?new XDomainRequest:new XMLHttpRequest:"undefined"!=typeof XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP")},a.buildDOM=function(e){var t,n,r;if("undefined"!=typeof DOMParser)return(t=new DOMParser).parseFromString(e,"text/xml");for(n=["Microsoft.XMLDOM","MSXML2.DOMDocument","MSXML.DOMDocument"],r=0;r<n.length;r++)try{return(t=new ActiveXObject(n[r])).loadXML(e),t}catch(e){}return null},Date.prototype.toIso8601=function(){var e=this.getYear(),t=this.getMonth()+1,n=this.getDate();return e<1900&&(e+=1900),t<10&&(t="0"+t),n<10&&(n="0"+n),e+t+n+"T"+this.toTimeString().substr(0,8)},Date.fromIso8601=function(e){var t=e.substr(0,4),n=e.substr(4,2),r=e.substr(6,2),o=e.substr(9,2),i=e.substr(12,2),a=e.substr(15,2);return new Date(t,n-1,r,o,i,a,0)},s.CHAR_MAP="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",s.prototype.encode=function(){if("function"==typeof btoa)return btoa(this.bytes);var e=[],t=[],n=[],r=0,o=0;for(o=0;o<this.bytes.length;o+=3)e[0]=this.bytes.charCodeAt(o),e[1]=this.bytes.charCodeAt(o+1),e[2]=this.bytes.charCodeAt(o+2),t[0]=e[0]>>2,t[1]=(3&e[0])<<4|e[1]>>4,t[2]=(15&e[1])<<2|e[2]>>6,t[3]=63&e[2],isNaN(e[1])?t[2]=t[3]=64:isNaN(e[2])&&(t[3]=64),n[r++]=s.CHAR_MAP.charAt(t[0])+s.CHAR_MAP.charAt(t[1])+s.CHAR_MAP.charAt(t[2])+s.CHAR_MAP.charAt(t[3]);return n.join("")},s.prototype.decode=function(){if("function"==typeof atob)return atob(this.bytes);for(var e=[],t=[],n=[],r=0,o=0;this.bytes.length%4!=0;)this.bytes+="=";for(o=0;o<this.bytes.length;o+=4)t[0]=s.CHAR_MAP.indexOf(this.bytes.charAt(o)),t[1]=s.CHAR_MAP.indexOf(this.bytes.charAt(o+1)),t[2]=s.CHAR_MAP.indexOf(this.bytes.charAt(o+2)),t[3]=s.CHAR_MAP.indexOf(this.bytes.charAt(o+3)),e[0]=t[0]<<2|t[1]>>4,e[1]=(15&t[1])<<4|t[2]>>2,e[2]=(3&t[2])<<6|t[3],n[r++]=String.fromCharCode(e[0]),64!=t[2]&&(n[r++]=String.fromCharCode(e[1])),64!=t[3]&&(n[r++]=String.fromCharCode(e[2]));return n.join("")}},function(e,t,n){"use strict";n.r(t),n.d(t,"ActionFunctionRegistry",function(){return r}),n.d(t,"ProvenanceGraph",function(){return l}),n.d(t,"restoreProvenanceGraph",function(){return d}),n.d(t,"serializeProvenanceGraph",function(){return p}),n.d(t,"ProvenanceTracker",function(){return b}),n.d(t,"ProvenanceGraphTraverser",function(){return m}),n.d(t,"ProvenanceSlide",function(){return _}),n.d(t,"ProvenanceSlidedeck",function(){return v}),n.d(t,"STATUS",function(){return g}),n.d(t,"ProvenanceSlidedeckPlayer",function(){return w}),n.d(t,"generateUUID",function(){return s}),n.d(t,"generateTimestamp",function(){return c}),n.d(t,"isStateNode",function(){return f}),n.d(t,"isReversibleAction",function(){return u});var r=function(){function e(){this.functionRegistry={}}return e.prototype.register=function(e,t,n){if(void 0===n&&(n=null),this.functionRegistry[e])throw new Error("Function already registered");this.functionRegistry[e]={func:t,thisArg:n}},e.prototype.getFunctionByName=function(e){if(!this.functionRegistry[e])throw new Error("Function not found in registry");return this.functionRegistry[e]},e}(),o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function i(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())})}function a(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function s(){var e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:3&n|8).toString(16)})}function c(){return(new Date).getTime()}function f(e){return"parent"in e}function u(e){return"undo"in e}function h(e){return e=e||Object.create(null),{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t,n){(e[t]||[]).slice().map(function(e){e(n)})}}}var l=function(){function e(e,t,n){void 0===t&&(t="Unknown"),this._nodes={},this._mitt=h(),this.application=e,this.root=n||{id:s(),label:"Root",metadata:{createdBy:t,createdOn:c()},children:[],artifacts:{}},this.addNode(this.root),this._current=this.root}return e.prototype.addNode=function(e){if(this._nodes[e.id])throw new Error("Node already added");this._nodes[e.id]=e,this._mitt.emit("nodeAdded",e)},e.prototype.getNode=function(e){if(!this._nodes[e])throw new Error("Node id not found");return this._nodes[e]},Object.defineProperty(e.prototype,"current",{get:function(){return this._current},set:function(e){if(!this._nodes[e.id])throw new Error("Node id not found");this._current=e,this._mitt.emit("currentChanged",e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nodes",{get:function(){return this._nodes},enumerable:!0,configurable:!0}),e.prototype.emitNodeChangedEvent=function(e){if(!this._nodes[e.id])throw new Error("Node id not found");this._mitt.emit("nodeChanged",e)},e.prototype.on=function(e,t){this._mitt.on(e,t)},e.prototype.off=function(e,t){this._mitt.off(e,t)},e}();function d(e){for(var t={},n=0,r=e.nodes;n<r.length;n++){var i=r[n];t[i.id]=o({},i)}for(var a=0,s=Object.keys(t);a<s.length;a++){var c=s[a];(i=t[c]).children=i.children.map(function(e){return t[e]}),"parent"in i&&(i.parent=t[i.parent])}var f=new l(e.application);return f._nodes=t,f._current=t[e.current],f.root=t[e.root],f}function p(e){return{nodes:Object.keys(e.nodes).map(function(t){var n=e.getNode(t),r=o({},n);return f(n)&&(r.parent=n.parent.id),r.children=n.children.map(function(e){return e.id}),r}),root:e.root.id,application:e.application,current:e.current.id}}var b=function(){function e(e,t,n){void 0===n&&(n="Unknown"),this.acceptActions=!0,this.registry=e,this.graph=t,this.username=n}return e.prototype.applyAction=function(e,t){return void 0===t&&(t=!1),i(this,void 0,void 0,function(){var n,r,o,i,f,u,h=this;return a(this,function(a){switch(a.label){case 0:return this.acceptActions?(n=function(t,n){return{id:s(),label:e.do,metadata:{createdBy:h.username,createdOn:c()},action:e,actionResult:n,parent:t,children:[],artifacts:{}}},o=this.graph.current,t?(r=n(this.graph.current,null),[3,3]):[3,1]):[2,Promise.resolve(this.graph.current)];case 1:return i=e.do,[4,(f=this.registry.getFunctionByName(i)).func.apply(f.thisArg,e.doArguments)];case 2:u=a.sent(),r=n(o,u),a.label=3;case 3:return o.children.push(r),this.graph.addNode(r),this.graph.current=r,[2,r]}})})},e}();function y(e,t){if(f(e)&&e.parent===t)return!0;if(f(t)&&t.parent!==e)throw new Error("Unconnected nodes, you probably should not be using this function");return!1}var g,m=function(){function e(e,t,n){void 0===n&&(n=null),this.trackingWhenTraversing=!1,this.registry=e,this.graph=t,this.tracker=n}return e.prototype.executeFunctions=function(e,t){return i(this,void 0,void 0,function(){var n,r,o,i;return a(this,function(a){switch(a.label){case 0:r=0,a.label=1;case 1:return r<e.length?(o=e[r],i=void 0,this.tracker&&this.tracker.acceptActions&&!this.trackingWhenTraversing?(this.tracker.acceptActions=!1,i=o.func.apply(o.thisArg,t[r]),this.tracker.acceptActions=!0):i=o.func.apply(o.thisArg,t[r]),[4,i]):[3,4];case 2:n=a.sent(),a.label=3;case 3:return r++,[3,1];case 4:return[2,n]}})})},e.prototype.toStateNode=function(e){return i(this,void 0,void 0,function(){var t,n,r,o,i,s,c;return a(this,function(a){switch(a.label){case 0:if(t=this.graph.current,n=this.graph.getNode(e),t===n)return[2,Promise.resolve(t)];if(!function e(t,n,r,o){if(void 0===o&&(o=t),t&&t===n)return r.unshift(t),!0;if(t){var i=t.children.slice();f(t)&&i.push(t.parent);for(var a=0,s=i;a<s.length;a++){var c=s[a];if(c!==o&&e(c,n,r,t))return r.unshift(t),!0}}return!1}(t,n,r=[]))throw new Error("No path to target node found in graph");return o=this.getFunctionsAndArgsFromTrack(r),i=o.functionsToDo,s=o.argumentsToDo,[4,this.executeFunctions(i,s)];case 1:return c=a.sent(),this.graph.current=n,[2,c]}})})},e.prototype.getFunctionsAndArgsFromTrack=function(e){for(var t=[],n=[],r=0;r<e.length-1;r++){var o=e[r],i=e[r+1];if(y(o,i)){if(!f(o))throw new Error("Going up from root? unreachable error ... i hope");if(!u(o.action))throw new Error("trying to undo an Irreversible action");var a=this.registry.getFunctionByName(o.action.undo);t.push(a),n.push(o.action.undoArguments)}else{if(!f(i))throw new Error("Going down to the root? unreachable error ... i hope");var s=this.registry.getFunctionByName(i.action.do);t.push(s),n.push(i.action.doArguments)}}return{functionsToDo:t,argumentsToDo:n}},e}(),_=function(){function e(e,t,n,r,o){void 0===r&&(r=[]),void 0===o&&(o=null),this._id=s(),this._name=e,this._duration=t,this._delay=n,this._annotations=r,this._node=o}return Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"node",{get:function(){return this._node},set:function(e){this._node=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this._name},set:function(e){this._name=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"duration",{get:function(){return this._duration},set:function(e){this._duration=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"delay",{get:function(){return this._delay},set:function(e){this._delay=e},enumerable:!0,configurable:!0}),e.prototype.addAnnotation=function(e){this._annotations.push(e)},e.prototype.removeAnnotation=function(e){var t=this._annotations.indexOf(e);this._annotations.splice(t,1)},Object.defineProperty(e.prototype,"annotations",{get:function(){return this._annotations},enumerable:!0,configurable:!0}),e}(),v=function(){function e(e,t){this._slides=[],this._captainPlaceholder=new _("Captain Placeholder",0,0),this._mitt=h(),this._application=e,this._graph=t.graph,this._traverser=t,this._selectedSlide=null}return Object.defineProperty(e.prototype,"application",{get:function(){return this._application},enumerable:!0,configurable:!0}),e.prototype.addSlide=function(e,t){if((!t||isNaN(t)||!Number.isInteger(t)||t>this._slides.length||t<0)&&(t=this._slides.length),e&&this._slides.indexOf(e)>=0)throw new Error("Cannot add a slide that is already in the deck");if(!e){var n=this._graph.current;e=new _(n.label,1,0,[],n)}return 0===this._slides.length&&(this._selectedSlide=e),this._slides.splice(t,0,e),this._mitt.emit("slideAdded",e),e},e.prototype.removeSlideAtIndex=function(e){var t=this._slides.splice(e,1);this._selectedSlide===t[0]&&(this.selectedSlide=null),this._mitt.emit("slideRemoved",t[0])},e.prototype.removeSlide=function(e){this.removeSlideAtIndex(this._slides.indexOf(e))},Object.defineProperty(e.prototype,"selectedSlide",{get:function(){return this._selectedSlide},set:function(e){e&&e.node&&this._traverser.toStateNode(e.node.id),this._selectedSlide=e,this._mitt.emit("slideSelected",e)},enumerable:!0,configurable:!0}),e.prototype.moveSlide=function(e,t){if(t<0||t>this.slides.length-1)throw new Error("target index out of bounds");if(t>=this._slides.length)for(var n=t-this._slides.length+1;n--;)this._slides.push(this._captainPlaceholder);this._slides.splice(t,0,this._slides.splice(e,1)[0]),this._mitt.emit("slidesMoved",this._slides)},e.prototype.startTime=function(e){for(var t=this._slides.indexOf(e),n=0,r=0;r<t;r++)n+=this._slides[r].delay,n+=this._slides[r].duration;return n},e.prototype.slideAtTime=function(e){for(var t=0,n=null;e>=0&&t<this.slides.length;){var r=(n=this.slides[t]).delay+n.duration;if(e-r<0)break;e-=r,t++}return n},Object.defineProperty(e.prototype,"slides",{get:function(){return this._slides},enumerable:!0,configurable:!0}),e.prototype.next=function(){if(null!==this._selectedSlide){var e=this._slides.indexOf(this._selectedSlide);e<this._slides.length-1?(e+=1,this.selectedSlide=this._slides[e]):this.selectedSlide=this._slides[0]}},e.prototype.previous=function(){if(null!==this._selectedSlide){var e=this._slides.indexOf(this._selectedSlide);e>0?(e-=1,this.selectedSlide=this._slides[e]):this.selectedSlide=this._slides[this._slides.length-1]}},Object.defineProperty(e.prototype,"graph",{get:function(){return this._graph},enumerable:!0,configurable:!0}),e.prototype.on=function(e,t){this._mitt.on(e,t)},e.prototype.off=function(e,t){this._mitt.off(e,t)},e}();!function(e){e[e.IDLE=0]="IDLE",e[e.PLAYING=1]="PLAYING"}(g||(g={}));var w=function(){function e(e,t){this._selectCallback=t,this._slides=e,this._currentSlideIndex=0,this._status=g.IDLE}return e.prototype.setSlideIndex=function(e){this._currentSlideIndex=e},Object.defineProperty(e.prototype,"slides",{get:function(){return this._slides},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentSlideIndex",{get:function(){return this._currentSlideIndex},set:function(e){this._currentSlideIndex=e},enumerable:!0,configurable:!0}),e.prototype.play=function(){return i(this,void 0,void 0,function(){var e,t,n=this;return a(this,function(r){switch(r.label){case 0:if(e=function(){return n._status===g.PLAYING&&n._currentSlideIndex<n._slides.length-1},this._status!==g.IDLE)return[3,4];this._status=g.PLAYING,this._selectCallback(this._slides[this._currentSlideIndex]),r.label=1;case 1:return t=this._slides[this._currentSlideIndex],[4,(o=t.duration,new Promise(function(e){return setTimeout(e,o)}))];case 2:r.sent(),e()&&(this._currentSlideIndex+=1,this._selectCallback(this._slides[this._currentSlideIndex])),r.label=3;case 3:if(e())return[3,1];r.label=4;case 4:return this._status=g.IDLE,[2]}var o})})},e.prototype.next=function(){this._currentSlideIndex+=1,this._selectCallback(this._slides[this._currentSlideIndex])},Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.stop=function(){this._status=g.IDLE},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"ProvenanceTreeVisualization",function(){return a});var r=n(0);!function(){function e(e,t,n){var r,o;void 0===t&&(t="Unknown"),this._nodes={},this._mitt=(r=r||Object.create(null),{on:function(e,t){(r[e]||(r[e]=[])).push(t)},off:function(e,t){r[e]&&r[e].splice(r[e].indexOf(t)>>>0,1)},emit:function(e,t){(r[e]||[]).slice().map(function(e){e(t)})}}),this.application=e,this.root=n||{id:(o=(new Date).getTime(),"undefined"!=typeof performance&&"function"==typeof performance.now&&(o+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=(o+16*Math.random())%16|0;return o=Math.floor(o/16),("x"===e?t:3&t|8).toString(16)})),label:"Root",metadata:{createdBy:t,createdOn:(new Date).getTime()},children:[],artifacts:{}},this.addNode(this.root),this._current=this.root}e.prototype.addNode=function(e){if(this._nodes[e.id])throw new Error("Node already added");this._nodes[e.id]=e,this._mitt.emit("nodeAdded",e)},e.prototype.getNode=function(e){if(!this._nodes[e])throw new Error("Node id not found");return this._nodes[e]},Object.defineProperty(e.prototype,"current",{get:function(){return this._current},set:function(e){if(!this._nodes[e.id])throw new Error("Node id not found");this._current=e,this._mitt.emit("currentChanged",e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nodes",{get:function(){return this._nodes},enumerable:!0,configurable:!0}),e.prototype.emitNodeChangedEvent=function(e){if(!this._nodes[e.id])throw new Error("Node id not found");this._mitt.emit("nodeChanged",e)},e.prototype.on=function(e,t){this._mitt.on(e,t)},e.prototype.off=function(e,t){this._mitt.off(e,t)}}();function o(e,t){return e.maxDescendantDepth>t.maxDescendantDepth?-1:e.maxDescendantDepth<t.maxDescendantDepth?1:0}function i(){var e=5,t=50,n=[];var r=Object.assign(function(r,i){var a=r,s=i;a.leaves().forEach(function(e){e.ancestors().forEach(function(t){(!t.maxDescendantDepth||e.depth>t.maxDescendantDepth)&&(t.maxDescendantDepth=e.depth)})});var c=s;s.leaves().forEach(function(e){c.depth<e.depth&&(c=e)}),function e(t,r){t.xOffset=r,n[t.depth]=r,t.children&&t.leaves().sort(o).forEach(function(o){if(void 0===o.xOffset){var i=Math.max.apply(null,n.slice(t.depth,o.depth+1));e(o,r>i?r:i+1)}}),t.parent&&void 0===t.parent.xOffset&&e(t.parent,r)}(c,0);var f=Math.max.apply(null,n),u=Math.max.apply(null,a.leaves().map(function(e){return e.depth}));return a.each(function(n){!function(n,r,o){n.x=0===r?e:e-e/r*n.xOffset,n.y=0===o?t:t/o*n.depth}(n,f,u)}),a},{size:function(n){return n?(e=+n[0],t=+n[1],r):[e,t]}});return r}var a=function(){function e(e,t){var n=this;this.traverser=e,this.svg=Object(r.e)(t).append("svg").attr("viewBox","-10 -10 130 130").attr("style","width: 100%; height: 100%"),e.graph.on("currentChanged",function(){return n.update()}),this.update()}return e.prototype.update=function(){var e=this,t=Object(r.d)(this.traverser.graph.root),n=i().size([50,100]),o=t;t.each(function(t){t.data===e.traverser.graph.current&&(o=t)});var a=n(t,o),s=a.descendants(),c=this.svg.selectAll("g.node").data(s,function(e){return e.data.id}),f=c.enter().append("g").attr("class","node").attr("transform",function(e){return"translate("+e.x+", "+e.y+")"}).on("click",function(t){return e.traverser.toStateNode(t.data.id)});f.append("circle").attr("r",2),f.append("text").text(function(e){return"parent"in e.data?e.data.label:""}).attr("style","font-size: 8px").attr("x",7).attr("y",3),f.merge(c).attr("class","node").filter(function(e){return 0===e.xOffset}).attr("class","node branch-active").filter(function(t){return t.data===e.traverser.graph.current}).attr("class","node branch-active node-active"),f.merge(c).transition().duration(500).attr("transform",function(e){return"translate("+e.x+", "+e.y+")"});var u=function(e){var t=[e.source,e.target],n=t[0],r=t[1];return"M"+n.x+","+n.y+"C"+n.x+","+(n.y+r.y)/2+" "+r.x+","+(n.y+r.y)/2+" "+r.x+","+r.y},h=this.svg.selectAll("path.link").data(a.links(),function(e){return e.target.data.id}),l=h.enter().insert("path","g").attr("d",u);h.merge(l).attr("class","link").filter(function(e){return 0===e.target.xOffset}).attr("class","link active"),h.merge(l).transition().duration(500).attr("d",u)},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"SlideDeckVisualization",function(){return h});var r=n(0);function o(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function i(){var e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:3&n|8).toString(16)})}function a(e){return e=e||Object.create(null),{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t,n){(e[t]||[]).slice().map(function(e){e(n)})}}}!function(){function e(e,t,n){void 0===t&&(t="Unknown"),this._nodes={},this._mitt=a(),this.application=e,this.root=n||{id:i(),label:"Root",metadata:{createdBy:t,createdOn:(new Date).getTime()},children:[],artifacts:{}},this.addNode(this.root),this._current=this.root}e.prototype.addNode=function(e){if(this._nodes[e.id])throw new Error("Node already added");this._nodes[e.id]=e,this._mitt.emit("nodeAdded",e)},e.prototype.getNode=function(e){if(!this._nodes[e])throw new Error("Node id not found");return this._nodes[e]},Object.defineProperty(e.prototype,"current",{get:function(){return this._current},set:function(e){if(!this._nodes[e.id])throw new Error("Node id not found");this._current=e,this._mitt.emit("currentChanged",e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nodes",{get:function(){return this._nodes},enumerable:!0,configurable:!0}),e.prototype.emitNodeChangedEvent=function(e){if(!this._nodes[e.id])throw new Error("Node id not found");this._mitt.emit("nodeChanged",e)},e.prototype.on=function(e,t){this._mitt.on(e,t)},e.prototype.off=function(e,t){this._mitt.off(e,t)}}();var s,c=function(){function e(e,t,n,r,o){void 0===r&&(r=[]),void 0===o&&(o=null),this._id=i(),this._name=e,this._duration=t,this._delay=n,this._annotations=r,this._node=o}return Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"node",{get:function(){return this._node},set:function(e){this._node=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this._name},set:function(e){this._name=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"duration",{get:function(){return this._duration},set:function(e){this._duration=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"delay",{get:function(){return this._delay},set:function(e){this._delay=e},enumerable:!0,configurable:!0}),e.prototype.addAnnotation=function(e){this._annotations.push(e)},e.prototype.removeAnnotation=function(e){var t=this._annotations.indexOf(e);this._annotations.splice(t,1)},Object.defineProperty(e.prototype,"annotations",{get:function(){return this._annotations},enumerable:!0,configurable:!0}),e}();!function(){function e(e,t){this._slides=[],this._captainPlaceholder=new c("Captain Placeholder",0,0),this._mitt=a(),this._application=e,this._graph=t.graph,this._traverser=t,this._selectedSlide=null}Object.defineProperty(e.prototype,"application",{get:function(){return this._application},enumerable:!0,configurable:!0}),e.prototype.addSlide=function(e,t){if((!t||isNaN(t)||!Number.isInteger(t)||t>this._slides.length||t<0)&&(t=this._slides.length),e&&this._slides.indexOf(e)>=0)throw new Error("Cannot add a slide that is already in the deck");if(!e){var n=this._graph.current;e=new c(n.label,1,0,[],n)}return 0===this._slides.length&&(this._selectedSlide=e),this._slides.splice(t,0,e),this._mitt.emit("slideAdded",e),e},e.prototype.removeSlideAtIndex=function(e){var t=this._slides.splice(e,1);this._selectedSlide===t[0]&&(this.selectedSlide=null),this._mitt.emit("slideRemoved",t[0])},e.prototype.removeSlide=function(e){this.removeSlideAtIndex(this._slides.indexOf(e))},Object.defineProperty(e.prototype,"selectedSlide",{get:function(){return this._selectedSlide},set:function(e){e&&e.node&&this._traverser.toStateNode(e.node.id),this._selectedSlide=e,this._mitt.emit("slideSelected",e)},enumerable:!0,configurable:!0}),e.prototype.moveSlide=function(e,t){if(t<0||t>this.slides.length-1)throw new Error("target index out of bounds");if(t>=this._slides.length)for(var n=t-this._slides.length+1;n--;)this._slides.push(this._captainPlaceholder);this._slides.splice(t,0,this._slides.splice(e,1)[0]),this._mitt.emit("slidesMoved",this._slides)},e.prototype.startTime=function(e){for(var t=this._slides.indexOf(e),n=0,r=0;r<t;r++)n+=this._slides[r].delay,n+=this._slides[r].duration;return n},e.prototype.slideAtTime=function(e){for(var t=0,n=null;e>=0&&t<this.slides.length;){var r=(n=this.slides[t]).delay+n.duration;if(e-r<0)break;e-=r,t++}return n},Object.defineProperty(e.prototype,"slides",{get:function(){return this._slides},enumerable:!0,configurable:!0}),e.prototype.next=function(){if(null!==this._selectedSlide){var e=this._slides.indexOf(this._selectedSlide);e<this._slides.length-1?(e+=1,this.selectedSlide=this._slides[e]):this.selectedSlide=this._slides[0]}},e.prototype.previous=function(){if(null!==this._selectedSlide){var e=this._slides.indexOf(this._selectedSlide);e>0?(e-=1,this.selectedSlide=this._slides[e]):this.selectedSlide=this._slides[this._slides.length-1]}},Object.defineProperty(e.prototype,"graph",{get:function(){return this._graph},enumerable:!0,configurable:!0}),e.prototype.on=function(e,t){this._mitt.on(e,t)},e.prototype.off=function(e,t){this._mitt.off(e,t)}}();!function(e){e[e.IDLE=0]="IDLE",e[e.PLAYING=1]="PLAYING"}(s||(s={}));var f=function(){function e(e,t){this._selectCallback=t,this._slides=e,this._currentSlideIndex=0,this._status=s.IDLE}return e.prototype.setSlideIndex=function(e){this._currentSlideIndex=e},Object.defineProperty(e.prototype,"slides",{get:function(){return this._slides},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentSlideIndex",{get:function(){return this._currentSlideIndex},set:function(e){this._currentSlideIndex=e},enumerable:!0,configurable:!0}),e.prototype.play=function(){return e=this,t=void 0,r=function(){var e,t,n=this;return o(this,function(r){switch(r.label){case 0:if(e=function(){return n._status===s.PLAYING&&n._currentSlideIndex<n._slides.length-1},this._status!==s.IDLE)return[3,4];this._status=s.PLAYING,this._selectCallback(this._slides[this._currentSlideIndex]),r.label=1;case 1:return t=this._slides[this._currentSlideIndex],[4,(o=t.duration,new Promise(function(e){return setTimeout(e,o)}))];case 2:r.sent(),e()&&(this._currentSlideIndex+=1,this._selectCallback(this._slides[this._currentSlideIndex])),r.label=3;case 3:if(e())return[3,1];r.label=4;case 4:return this._status=s.IDLE,[2]}var o})},new((n=void 0)||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}c((r=r.apply(e,t||[])).next())});var e,t,n,r},e.prototype.next=function(){this._currentSlideIndex+=1,this._selectCallback(this._slides[this._currentSlideIndex])},Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.stop=function(){this._status=s.IDLE},e}();function u(e){return function(...t){return e(this,...t)}}class h{constructor(e,t){this._tableHeight=1e3,this._tableWidth=300,this._minimumSlideDuration=5e3,this._barHeightTimeMultiplier=.01,this._barWidth=270,this._barPadding=5,this._resizebarheight=5,this._previousSlideY=0,this._lineX1=30,this._placeholderWidth=this._tableWidth-40,this._placeholderY=50,this._placeholderHeight=30,this._maxSlides=20,this._toolbarX=200,this._toolbarY=10,this._toolbarPadding=20,this._slideDuration=1e3,this._timeIndexedSlides=[],this._nextSlideY=50,this._index=(e=>this._slideDeck.slides.indexOf(e)),this.onDelete=(e=>{this._slideDeck.removeSlide(e)}),this.onSelect=(e=>{r.c.defaultPrevented||(this._slideDeck.selectedSlide=e)}),this.onAdd=(()=>{let e=this._slideDeck;const t=e.graph.current,n=new c(t.label,1e3,0,[],t);e.addSlide(n,e.selectedSlide?e.slides.indexOf(e.selectedSlide)+1:e.slides.length)}),this.onClone=(e=>{let t=this._slideDeck;const n=new c(e.name,1e3,0,[],e.node);t.addSlide(n,t.selectedSlide?t.slides.indexOf(t.selectedSlide)+1:t.slides.length)}),this.moveDragged=((e,t)=>{Object(r.e)(e).attr("transform",e=>{const t=this.previousSlidesHeight(e),n=r.c.y,o=this._slideDeck.slides.indexOf(e);if(n<t&&o>0){const e=this._slideDeck.slides[o-1];n<this.previousSlidesHeight(e)+this.barTotalHeight(e)/2&&this._slideDeck.moveSlide(o,o-1)}else if(n>t&&o<this._slideDeck.slides.length-1){const e=this._slideDeck.slides[o+1];n>this.previousSlidesHeight(e)+this.barTotalHeight(e)/2&&this._slideDeck.moveSlide(o,o+1)}return"translate(30,"+r.c.y+")"})}),this.moveDragended=((e,t)=>{Object(r.e)(e).classed("active",!1).attr("transform",e=>"translate(30,"+this.previousSlidesHeight(e)+")")}),this.delayDragged=((e,t)=>{t.delay=Math.max(0,r.c.y)/this._barHeightTimeMultiplier,this.update()}),this.delaySubject=((e,t)=>({y:this.barDelayHeight(t)})),this.durationDragged=((e,t)=>{t.duration=Math.max(0,r.c.y)/this._barHeightTimeMultiplier,this.update()}),this.durationSubject=((e,t)=>({y:this.barDurationHeight(t)})),this.onNext=(()=>{this._slideDeck.next()}),this.onPrevious=(()=>{this._slideDeck.previous()}),this.onPlay=(()=>{this._player.status===s.IDLE?this._player.play():this._player.stop(),Object(r.e)(r.c.target).classed("fa-play",!Object(r.e)(r.c.target).classed("fa-play")),Object(r.e)(r.c.target).classed("fa-pause",!Object(r.e)(r.c.target).classed("fa-pause"))}),this._slideDeck=e,this._root=Object(r.e)(t),this._slideTable=this._root.append("svg").attr("class","slide__table").attr("height",this._tableHeight).attr("width",this._tableWidth),this._slideTable.append("rect").attr("class","slides_background_rect").attr("x",0).attr("y",0).attr("height",this._tableHeight).attr("width",this._tableWidth),this._slideTable.append("line").attr("x1",this._lineX1).attr("y1",this._nextSlideY).attr("x2",this._lineX1).attr("stroke","gray").attr("stroke-width",2),this._slideTable.append("circle").attr("class","currentTime").attr("cx",this._lineX1).attr("cy",this._nextSlideY).attr("r",3).attr("fill","red"),this.setPlaceholder("slide_placeholder"),this.setPlaceholder("player_placeholder"),this.setAddButton(),this.setPreviousButton(),this.setPlayButton(),this.setNextButton(),e.on("slideAdded",()=>this.update()),e.on("slideRemoved",()=>this.update()),e.on("slidesMoved",()=>this.update()),e.on("slideSelected",()=>this.update()),this._player=new f(this._slideDeck.slides,e=>{this._slideDuration=e.duration,this._nextSlideY+=this.barTotalHeight(e),this._slideDeck.selectedSlide=e}),this.update()}onMouseEnter(){r.c.target.parentElement.querySelector(".slide_toolbar").style.display="block"}onMouseLeave(){r.c.target.parentElement.querySelector(".slide_toolbar").style.display="none"}moveDragStarted(e){Object(r.e)(this).raise().classed("active",!0)}barDelayHeight(e){let t=this._barHeightTimeMultiplier*e.delay;return Math.max(t,0)}barDurationHeight(e){let t=this._barHeightTimeMultiplier*e.duration;return Math.max(t,this._minimumSlideDuration*this._barHeightTimeMultiplier)}barTotalHeight(e){return this.barDelayHeight(e)+this.barDurationHeight(e)+2*this._resizebarheight}previousSlidesHeight(e){let t=this._slideDeck.slides.indexOf(e),n=50;for(let e=0;e<t;e++)n+=this.barTotalHeight(this._slideDeck.slides[e]);return n}updateTimeIndices(e){this._timeIndexedSlides=[];let t=0;e.slides.forEach(e=>{this._timeIndexedSlides.push({slide:e,startTime:t}),t+=e.delay+e.duration})}update(){this.updateTimeIndices(this._slideDeck);const e=this._slideTable.selectAll("g.slide").data(this._slideDeck.slides,e=>e.id),t=e.enter().append("g").attr("class","slide").call(Object(r.a)().clickDistance([2,2]).on("start",this.moveDragStarted).on("drag",u(this.moveDragged)).on("end",u(this.moveDragended)));t.append("rect").attr("class","slides_delay_resize").attr("x",this._barPadding).attr("width",this._barWidth-2*this._barPadding).attr("height",this._resizebarheight).attr("cursor","ns-resize").call(Object(r.a)().subject(u(this.delaySubject)).on("drag",u(this.delayDragged))),t.append("rect").attr("class","slides_delay_rect").attr("x",this._barPadding).attr("y",0).attr("width",this._barWidth-2*this._barPadding).on("click",this.onSelect);let n=t.append("g").attr("transform","translate(5,0)").attr("class","slide_group").on("mouseenter",this.onMouseEnter).on("mouseleave",this.onMouseLeave);n.append("rect").attr("class","slides_rect").attr("width",this._barWidth-2*this._barPadding).attr("cursor","move").on("click",this.onSelect),n.append("text").attr("class","slides_text").attr("x",2*this._barPadding).attr("dy",".35em"),n.append("text").attr("class","slides_delaytext").attr("x",2*this._barPadding).attr("dy",".35em");let o=n.append("g").attr("class","slide_toolbar");o.append("svg:foreignObject").attr("class","slides_delete_icon").attr("x",this._toolbarX).attr("cursor","pointer").attr("width",20).attr("height",20).append("xhtml:body").on("click",this.onDelete).html('<i class="fa fa-trash-o"></i>'),o.append("svg:foreignObject").attr("class","slides_clone_icon").attr("x",this._toolbarX+this._toolbarPadding).attr("cursor","pointer").attr("width",20).attr("height",20).append("xhtml:body").on("click",this.onClone).html('<i class="fa fa-copy"></i>');const i=this._slideTable.select("rect#slide_placeholder"),a=this._slideTable.select("rect#player_placeholder");t.append("text").attr("class","slides_durationtext").attr("x",this._barPadding-30).attr("dy","-.65em"),t.append("circle").attr("class","time").attr("cx",0).attr("r",3).attr("fill","black"),t.append("rect").attr("class","slides_duration_resize").attr("x",this._barPadding).attr("width",this._barWidth-2*this._barPadding).attr("height",this._resizebarheight).attr("cursor","ns-resize").call(Object(r.a)().subject(u(this.durationSubject)).on("drag",u(this.durationDragged)));const s=t.merge(e).attr("transform",e=>(this._previousSlideY=this.previousSlidesHeight(e),"translate(30,"+this.previousSlidesHeight(e)+")"));s.select("rect.slides_delay_rect").attr("height",e=>this.barDelayHeight(e)),s.select("rect.slides_delay_resize").attr("y",e=>this.barDelayHeight(e)),(n=s.select("g.slide_group")).select("rect.slides_rect").attr("selected",e=>this._slideDeck.selectedSlide===e).attr("y",e=>this.barDelayHeight(e)+this._resizebarheight).attr("height",e=>(this._placeholderY=this._previousSlideY+this.barDurationHeight(e)+this.barDelayHeight(e)+this._resizebarheight,this.barDurationHeight(e))),(o=s.select("g.slide_toolbar")).select("foreignObject.slides_delete_icon").attr("y",e=>this.barDelayHeight(e)+this._resizebarheight+2*this._barPadding),o.select("foreignObject.slides_clone_icon").attr("y",e=>this.barDelayHeight(e)+this._resizebarheight+2*this._barPadding),n.select("text.slides_text").attr("y",e=>this.barDelayHeight(e)+this._resizebarheight+2*this._barPadding).text(e=>e.name),n.select("text.slides_delaytext").attr("y",e=>this.barDelayHeight(e)+this._resizebarheight+1*this._barPadding+25).text(e=>"transition: "+e.delay/1e3),s.select("circle.time").attr("cy",e=>this.barDelayHeight(e)+this._resizebarheight),s.select("rect.slides_duration_resize").attr("y",e=>this.barTotalHeight(e)-this._resizebarheight),s.select("text.slides_durationtext").attr("y",e=>this.barDelayHeight(e)+this._resizebarheight+4*this._barPadding-7).text(e=>e.duration/1e3),i.attr("y",this._placeholderY+20),a.attr("y",5),this._slideTable.select("line").attr("y2",this._placeholderY+20),this._slideTable.select("foreignObject.slide_add").attr("y",this._placeholderY+26),this.animate(),e.exit().remove()}animate(){this._player.status===s.PLAYING?this._slideTable.select(".currentTime").transition().ease(r.b).duration(this._slideDuration).attr("cy",this._nextSlideY).on("end",()=>this.isLastSlide()):this._slideTable.select(".currentTime").transition().ease(r.b).duration(0)}isLastSlide(){null!==this._slideDeck.selectedSlide&&this._slideDeck.slides.indexOf(this._slideDeck.selectedSlide)===this._slideDeck.slides.length-1&&setTimeout(()=>{this._nextSlideY=50,this._slideTable.select(".currentTime").attr("cy",this._nextSlideY),this._slideDeck.selectedSlide=this._slideDeck.slides[0],this._slideTable.select(".fa-pause").classed("fa-play",!0).classed("fa-pause",!1),this._player.stop(),this._player.currentSlideIndex=0},2e3)}setPlaceholder(e){this._slideTable.append("rect").attr("id",e).attr("class","slides_placeholder").attr("x",this._lineX1+this._barPadding).attr("y",0).attr("width",this._placeholderWidth).attr("height",this._placeholderHeight)}setAddButton(){this._slideTable.append("svg:foreignObject").attr("class","slide_add").attr("x",(this._tableWidth-40)/2).attr("cursor","pointer").attr("width",30).attr("height",30).append("xhtml:body").on("click",this.onAdd).html('<i class="fa fa-file-text-o"></i>')}setPlayButton(){this._slideTable.append("svg:foreignObject").attr("id","slide_play").attr("x",(this._tableWidth-40)/2+30).attr("y",10).attr("cursor","pointer").attr("width",30).attr("height",30).append("xhtml:body").on("click",this.onPlay).html('<i class="fa fa-play"></i>')}setNextButton(){this._slideTable.append("svg:foreignObject").attr("x",(this._tableWidth-40)/2+60).attr("y",10).attr("cursor","pointer").attr("width",30).attr("height",30).append("xhtml:body").on("click",this.onNext).html('<i class="fa fa-forward"></i>')}setPreviousButton(){this._slideTable.append("svg:foreignObject").attr("x",(this._tableWidth-40)/2-10).attr("y",10).attr("cursor","pointer").attr("width",30).attr("height",30).append("xhtml:body").on("click",this.onPrevious).html('<i class="fa fa-backward"></i>')}}},function(e,t,n){var r=n(35);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r=n(38);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"html,\n* {\n  box-sizing: border-box; }\n\nhtml,\nbody {\n  position: relative;\n  margin: 0 0 0 0;\n  -webkit-flex-direction: column;\n  flex-direction: column; }\n\n#vis {\n  border: 2px solid lightgrey;\n  border-radius: 5px;\n  margin: 2px;\n  margin-top: 0;\n  font-size: 18px;\n  margin-bottom: 0.1em;\n  color: yellow;\n  vertical-align: middle;\n  font-size: 80%;\n  line-height: 1;\n  top: -1px;\n  height: 300px;\n  width: 300px;\n  text-size-adjust: 100%; }\n  #vis * {\n    border: none; }\n\n.node {\n  fill: lightsteelblue;\n  stroke: steelblue;\n  cursor: pointer; }\n  .node circle {\n    stroke-width: .1%; }\n  .node.branch-active {\n    fill: yellow;\n    background-color: #ccc; }\n    .node.branch-active text {\n      display: block; }\n  .node.node-active {\n    fill: blue;\n    stroke: darkblue;\n    font-weight: bold; }\n  .node text {\n    display: none;\n    fill: black;\n    stroke-width: 0.2px;\n    font-family: sans-serif; }\n\n.link {\n  fill: none;\n  stroke: black;\n  stroke-width: 0.5px; }\n  .link.active {\n    stroke: black; }\n\n.intent_multiply {\n  fill: red; }\n\n.intent_add {\n  fill: green; }\n\n.intent_subtract {\n  fill: indigo; }\n",""])},function(e,t,n){var r=n(40);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(3)(!1)).i(n(41),""),t.push([e.i,'#slideDeck {\n    height: 400px;\n    overflow-y: scroll;\n}\n::-webkit-scrollbar {\n    display: none;\n}\ndiv.slidedeck__slide {\n    background-color: #ccc;\n    margin-bottom: 0.5em;\n    border: 1px solid black;\n}\n\ntable.slides__table {\n    width: 300px;\n}\n\ntable.slides__table tr.selected {\n    background-color: #00b8d9;\n}\n.add {\n    font-family: "FontAwesome";\n}\n\ndiv.slidedeck__slide[draggable="true"] {\n    background-color: #00b8d9;\n}\n\n.slides_background_rect {\n    fill: #ffffff;\n    stroke: #aaaaaa;\n}\n\n.slides_delay_rect {\n    fill: #dddddd;\n    stroke: #dddddd;\n}\n\n.slides_delay_resize,\n.slides_duration_resize {\n    fill: white;\n}\n\n.slides_rect {\n    fill: #f0f0f0;\n    stroke: #dddddd;\n    rx: 5px;\n    ry: 5px;\n}\n\n.slides_rect[selected="true"] {\n    fill: #00b8d9;\n    stroke: #dddddd;\n}\n\n.slides_text {\n    fill: #000000;\n}\n\n.slides_delete_rect {\n    fill: #aaaaaa;\n}\n\n.slides_placeholder {\n    rx: 5px;\n    ry: 5px;\n    stroke-dasharray: 5;\n    fill-opacity: 0.1;\n    stroke: black;\n    stroke-width: 1px;\n}\n#player_placeholder {\n    stroke-dasharray: none;\n}\n.slides_durationtext {\n    font-size: 12px;\n    font-weight: 600;\n}\n',""])},function(e,t,n){var r=n(42);(e.exports=n(3)(!1)).push([e.i,"/*!\n *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  src: url("+r(n(43))+");\n  src: url("+r(n(44))+"?#iefix&v=4.7.0) format('embedded-opentype'), url("+r(n(45))+") format('woff2'), url("+r(n(46))+") format('woff'), url("+r(n(47))+") format('truetype'), url("+r(n(48))+'#fontawesomeregular) format(\'svg\');\n  font-weight: normal;\n  font-style: normal;\n}\n.fa {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n/* makes the font 33% larger relative to the icon container */\n.fa-lg {\n  font-size: 1.33333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n.fa-2x {\n  font-size: 2em;\n}\n.fa-3x {\n  font-size: 3em;\n}\n.fa-4x {\n  font-size: 4em;\n}\n.fa-5x {\n  font-size: 5em;\n}\n.fa-fw {\n  width: 1.28571429em;\n  text-align: center;\n}\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.14285714em;\n  list-style-type: none;\n}\n.fa-ul > li {\n  position: relative;\n}\n.fa-li {\n  position: absolute;\n  left: -2.14285714em;\n  width: 2.14285714em;\n  top: 0.14285714em;\n  text-align: center;\n}\n.fa-li.fa-lg {\n  left: -1.85714286em;\n}\n.fa-border {\n  padding: .2em .25em .15em;\n  border: solid 0.08em #eeeeee;\n  border-radius: .1em;\n}\n.fa-pull-left {\n  float: left;\n}\n.fa-pull-right {\n  float: right;\n}\n.fa.fa-pull-left {\n  margin-right: .3em;\n}\n.fa.fa-pull-right {\n  margin-left: .3em;\n}\n/* Deprecated as of 4.4.0 */\n.pull-right {\n  float: right;\n}\n.pull-left {\n  float: left;\n}\n.fa.pull-left {\n  margin-right: .3em;\n}\n.fa.pull-right {\n  margin-left: .3em;\n}\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n  animation: fa-spin 2s infinite linear;\n}\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n  animation: fa-spin 1s infinite steps(8);\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  transform: rotate(180deg);\n}\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n  -ms-transform: rotate(270deg);\n  transform: rotate(270deg);\n}\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1);\n}\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  filter: none;\n}\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n.fa-stack-1x,\n.fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.fa-stack-1x {\n  line-height: inherit;\n}\n.fa-stack-2x {\n  font-size: 2em;\n}\n.fa-inverse {\n  color: #ffffff;\n}\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.fa-glass:before {\n  content: "\\F000";\n}\n.fa-music:before {\n  content: "\\F001";\n}\n.fa-search:before {\n  content: "\\F002";\n}\n.fa-envelope-o:before {\n  content: "\\F003";\n}\n.fa-heart:before {\n  content: "\\F004";\n}\n.fa-star:before {\n  content: "\\F005";\n}\n.fa-star-o:before {\n  content: "\\F006";\n}\n.fa-user:before {\n  content: "\\F007";\n}\n.fa-film:before {\n  content: "\\F008";\n}\n.fa-th-large:before {\n  content: "\\F009";\n}\n.fa-th:before {\n  content: "\\F00A";\n}\n.fa-th-list:before {\n  content: "\\F00B";\n}\n.fa-check:before {\n  content: "\\F00C";\n}\n.fa-remove:before,\n.fa-close:before,\n.fa-times:before {\n  content: "\\F00D";\n}\n.fa-search-plus:before {\n  content: "\\F00E";\n}\n.fa-search-minus:before {\n  content: "\\F010";\n}\n.fa-power-off:before {\n  content: "\\F011";\n}\n.fa-signal:before {\n  content: "\\F012";\n}\n.fa-gear:before,\n.fa-cog:before {\n  content: "\\F013";\n}\n.fa-trash-o:before {\n  content: "\\F014";\n}\n.fa-home:before {\n  content: "\\F015";\n}\n.fa-file-o:before {\n  content: "\\F016";\n}\n.fa-clock-o:before {\n  content: "\\F017";\n}\n.fa-road:before {\n  content: "\\F018";\n}\n.fa-download:before {\n  content: "\\F019";\n}\n.fa-arrow-circle-o-down:before {\n  content: "\\F01A";\n}\n.fa-arrow-circle-o-up:before {\n  content: "\\F01B";\n}\n.fa-inbox:before {\n  content: "\\F01C";\n}\n.fa-play-circle-o:before {\n  content: "\\F01D";\n}\n.fa-rotate-right:before,\n.fa-repeat:before {\n  content: "\\F01E";\n}\n.fa-refresh:before {\n  content: "\\F021";\n}\n.fa-list-alt:before {\n  content: "\\F022";\n}\n.fa-lock:before {\n  content: "\\F023";\n}\n.fa-flag:before {\n  content: "\\F024";\n}\n.fa-headphones:before {\n  content: "\\F025";\n}\n.fa-volume-off:before {\n  content: "\\F026";\n}\n.fa-volume-down:before {\n  content: "\\F027";\n}\n.fa-volume-up:before {\n  content: "\\F028";\n}\n.fa-qrcode:before {\n  content: "\\F029";\n}\n.fa-barcode:before {\n  content: "\\F02A";\n}\n.fa-tag:before {\n  content: "\\F02B";\n}\n.fa-tags:before {\n  content: "\\F02C";\n}\n.fa-book:before {\n  content: "\\F02D";\n}\n.fa-bookmark:before {\n  content: "\\F02E";\n}\n.fa-print:before {\n  content: "\\F02F";\n}\n.fa-camera:before {\n  content: "\\F030";\n}\n.fa-font:before {\n  content: "\\F031";\n}\n.fa-bold:before {\n  content: "\\F032";\n}\n.fa-italic:before {\n  content: "\\F033";\n}\n.fa-text-height:before {\n  content: "\\F034";\n}\n.fa-text-width:before {\n  content: "\\F035";\n}\n.fa-align-left:before {\n  content: "\\F036";\n}\n.fa-align-center:before {\n  content: "\\F037";\n}\n.fa-align-right:before {\n  content: "\\F038";\n}\n.fa-align-justify:before {\n  content: "\\F039";\n}\n.fa-list:before {\n  content: "\\F03A";\n}\n.fa-dedent:before,\n.fa-outdent:before {\n  content: "\\F03B";\n}\n.fa-indent:before {\n  content: "\\F03C";\n}\n.fa-video-camera:before {\n  content: "\\F03D";\n}\n.fa-photo:before,\n.fa-image:before,\n.fa-picture-o:before {\n  content: "\\F03E";\n}\n.fa-pencil:before {\n  content: "\\F040";\n}\n.fa-map-marker:before {\n  content: "\\F041";\n}\n.fa-adjust:before {\n  content: "\\F042";\n}\n.fa-tint:before {\n  content: "\\F043";\n}\n.fa-edit:before,\n.fa-pencil-square-o:before {\n  content: "\\F044";\n}\n.fa-share-square-o:before {\n  content: "\\F045";\n}\n.fa-check-square-o:before {\n  content: "\\F046";\n}\n.fa-arrows:before {\n  content: "\\F047";\n}\n.fa-step-backward:before {\n  content: "\\F048";\n}\n.fa-fast-backward:before {\n  content: "\\F049";\n}\n.fa-backward:before {\n  content: "\\F04A";\n}\n.fa-play:before {\n  content: "\\F04B";\n}\n.fa-pause:before {\n  content: "\\F04C";\n}\n.fa-stop:before {\n  content: "\\F04D";\n}\n.fa-forward:before {\n  content: "\\F04E";\n}\n.fa-fast-forward:before {\n  content: "\\F050";\n}\n.fa-step-forward:before {\n  content: "\\F051";\n}\n.fa-eject:before {\n  content: "\\F052";\n}\n.fa-chevron-left:before {\n  content: "\\F053";\n}\n.fa-chevron-right:before {\n  content: "\\F054";\n}\n.fa-plus-circle:before {\n  content: "\\F055";\n}\n.fa-minus-circle:before {\n  content: "\\F056";\n}\n.fa-times-circle:before {\n  content: "\\F057";\n}\n.fa-check-circle:before {\n  content: "\\F058";\n}\n.fa-question-circle:before {\n  content: "\\F059";\n}\n.fa-info-circle:before {\n  content: "\\F05A";\n}\n.fa-crosshairs:before {\n  content: "\\F05B";\n}\n.fa-times-circle-o:before {\n  content: "\\F05C";\n}\n.fa-check-circle-o:before {\n  content: "\\F05D";\n}\n.fa-ban:before {\n  content: "\\F05E";\n}\n.fa-arrow-left:before {\n  content: "\\F060";\n}\n.fa-arrow-right:before {\n  content: "\\F061";\n}\n.fa-arrow-up:before {\n  content: "\\F062";\n}\n.fa-arrow-down:before {\n  content: "\\F063";\n}\n.fa-mail-forward:before,\n.fa-share:before {\n  content: "\\F064";\n}\n.fa-expand:before {\n  content: "\\F065";\n}\n.fa-compress:before {\n  content: "\\F066";\n}\n.fa-plus:before {\n  content: "\\F067";\n}\n.fa-minus:before {\n  content: "\\F068";\n}\n.fa-asterisk:before {\n  content: "\\F069";\n}\n.fa-exclamation-circle:before {\n  content: "\\F06A";\n}\n.fa-gift:before {\n  content: "\\F06B";\n}\n.fa-leaf:before {\n  content: "\\F06C";\n}\n.fa-fire:before {\n  content: "\\F06D";\n}\n.fa-eye:before {\n  content: "\\F06E";\n}\n.fa-eye-slash:before {\n  content: "\\F070";\n}\n.fa-warning:before,\n.fa-exclamation-triangle:before {\n  content: "\\F071";\n}\n.fa-plane:before {\n  content: "\\F072";\n}\n.fa-calendar:before {\n  content: "\\F073";\n}\n.fa-random:before {\n  content: "\\F074";\n}\n.fa-comment:before {\n  content: "\\F075";\n}\n.fa-magnet:before {\n  content: "\\F076";\n}\n.fa-chevron-up:before {\n  content: "\\F077";\n}\n.fa-chevron-down:before {\n  content: "\\F078";\n}\n.fa-retweet:before {\n  content: "\\F079";\n}\n.fa-shopping-cart:before {\n  content: "\\F07A";\n}\n.fa-folder:before {\n  content: "\\F07B";\n}\n.fa-folder-open:before {\n  content: "\\F07C";\n}\n.fa-arrows-v:before {\n  content: "\\F07D";\n}\n.fa-arrows-h:before {\n  content: "\\F07E";\n}\n.fa-bar-chart-o:before,\n.fa-bar-chart:before {\n  content: "\\F080";\n}\n.fa-twitter-square:before {\n  content: "\\F081";\n}\n.fa-facebook-square:before {\n  content: "\\F082";\n}\n.fa-camera-retro:before {\n  content: "\\F083";\n}\n.fa-key:before {\n  content: "\\F084";\n}\n.fa-gears:before,\n.fa-cogs:before {\n  content: "\\F085";\n}\n.fa-comments:before {\n  content: "\\F086";\n}\n.fa-thumbs-o-up:before {\n  content: "\\F087";\n}\n.fa-thumbs-o-down:before {\n  content: "\\F088";\n}\n.fa-star-half:before {\n  content: "\\F089";\n}\n.fa-heart-o:before {\n  content: "\\F08A";\n}\n.fa-sign-out:before {\n  content: "\\F08B";\n}\n.fa-linkedin-square:before {\n  content: "\\F08C";\n}\n.fa-thumb-tack:before {\n  content: "\\F08D";\n}\n.fa-external-link:before {\n  content: "\\F08E";\n}\n.fa-sign-in:before {\n  content: "\\F090";\n}\n.fa-trophy:before {\n  content: "\\F091";\n}\n.fa-github-square:before {\n  content: "\\F092";\n}\n.fa-upload:before {\n  content: "\\F093";\n}\n.fa-lemon-o:before {\n  content: "\\F094";\n}\n.fa-phone:before {\n  content: "\\F095";\n}\n.fa-square-o:before {\n  content: "\\F096";\n}\n.fa-bookmark-o:before {\n  content: "\\F097";\n}\n.fa-phone-square:before {\n  content: "\\F098";\n}\n.fa-twitter:before {\n  content: "\\F099";\n}\n.fa-facebook-f:before,\n.fa-facebook:before {\n  content: "\\F09A";\n}\n.fa-github:before {\n  content: "\\F09B";\n}\n.fa-unlock:before {\n  content: "\\F09C";\n}\n.fa-credit-card:before {\n  content: "\\F09D";\n}\n.fa-feed:before,\n.fa-rss:before {\n  content: "\\F09E";\n}\n.fa-hdd-o:before {\n  content: "\\F0A0";\n}\n.fa-bullhorn:before {\n  content: "\\F0A1";\n}\n.fa-bell:before {\n  content: "\\F0F3";\n}\n.fa-certificate:before {\n  content: "\\F0A3";\n}\n.fa-hand-o-right:before {\n  content: "\\F0A4";\n}\n.fa-hand-o-left:before {\n  content: "\\F0A5";\n}\n.fa-hand-o-up:before {\n  content: "\\F0A6";\n}\n.fa-hand-o-down:before {\n  content: "\\F0A7";\n}\n.fa-arrow-circle-left:before {\n  content: "\\F0A8";\n}\n.fa-arrow-circle-right:before {\n  content: "\\F0A9";\n}\n.fa-arrow-circle-up:before {\n  content: "\\F0AA";\n}\n.fa-arrow-circle-down:before {\n  content: "\\F0AB";\n}\n.fa-globe:before {\n  content: "\\F0AC";\n}\n.fa-wrench:before {\n  content: "\\F0AD";\n}\n.fa-tasks:before {\n  content: "\\F0AE";\n}\n.fa-filter:before {\n  content: "\\F0B0";\n}\n.fa-briefcase:before {\n  content: "\\F0B1";\n}\n.fa-arrows-alt:before {\n  content: "\\F0B2";\n}\n.fa-group:before,\n.fa-users:before {\n  content: "\\F0C0";\n}\n.fa-chain:before,\n.fa-link:before {\n  content: "\\F0C1";\n}\n.fa-cloud:before {\n  content: "\\F0C2";\n}\n.fa-flask:before {\n  content: "\\F0C3";\n}\n.fa-cut:before,\n.fa-scissors:before {\n  content: "\\F0C4";\n}\n.fa-copy:before,\n.fa-files-o:before {\n  content: "\\F0C5";\n}\n.fa-paperclip:before {\n  content: "\\F0C6";\n}\n.fa-save:before,\n.fa-floppy-o:before {\n  content: "\\F0C7";\n}\n.fa-square:before {\n  content: "\\F0C8";\n}\n.fa-navicon:before,\n.fa-reorder:before,\n.fa-bars:before {\n  content: "\\F0C9";\n}\n.fa-list-ul:before {\n  content: "\\F0CA";\n}\n.fa-list-ol:before {\n  content: "\\F0CB";\n}\n.fa-strikethrough:before {\n  content: "\\F0CC";\n}\n.fa-underline:before {\n  content: "\\F0CD";\n}\n.fa-table:before {\n  content: "\\F0CE";\n}\n.fa-magic:before {\n  content: "\\F0D0";\n}\n.fa-truck:before {\n  content: "\\F0D1";\n}\n.fa-pinterest:before {\n  content: "\\F0D2";\n}\n.fa-pinterest-square:before {\n  content: "\\F0D3";\n}\n.fa-google-plus-square:before {\n  content: "\\F0D4";\n}\n.fa-google-plus:before {\n  content: "\\F0D5";\n}\n.fa-money:before {\n  content: "\\F0D6";\n}\n.fa-caret-down:before {\n  content: "\\F0D7";\n}\n.fa-caret-up:before {\n  content: "\\F0D8";\n}\n.fa-caret-left:before {\n  content: "\\F0D9";\n}\n.fa-caret-right:before {\n  content: "\\F0DA";\n}\n.fa-columns:before {\n  content: "\\F0DB";\n}\n.fa-unsorted:before,\n.fa-sort:before {\n  content: "\\F0DC";\n}\n.fa-sort-down:before,\n.fa-sort-desc:before {\n  content: "\\F0DD";\n}\n.fa-sort-up:before,\n.fa-sort-asc:before {\n  content: "\\F0DE";\n}\n.fa-envelope:before {\n  content: "\\F0E0";\n}\n.fa-linkedin:before {\n  content: "\\F0E1";\n}\n.fa-rotate-left:before,\n.fa-undo:before {\n  content: "\\F0E2";\n}\n.fa-legal:before,\n.fa-gavel:before {\n  content: "\\F0E3";\n}\n.fa-dashboard:before,\n.fa-tachometer:before {\n  content: "\\F0E4";\n}\n.fa-comment-o:before {\n  content: "\\F0E5";\n}\n.fa-comments-o:before {\n  content: "\\F0E6";\n}\n.fa-flash:before,\n.fa-bolt:before {\n  content: "\\F0E7";\n}\n.fa-sitemap:before {\n  content: "\\F0E8";\n}\n.fa-umbrella:before {\n  content: "\\F0E9";\n}\n.fa-paste:before,\n.fa-clipboard:before {\n  content: "\\F0EA";\n}\n.fa-lightbulb-o:before {\n  content: "\\F0EB";\n}\n.fa-exchange:before {\n  content: "\\F0EC";\n}\n.fa-cloud-download:before {\n  content: "\\F0ED";\n}\n.fa-cloud-upload:before {\n  content: "\\F0EE";\n}\n.fa-user-md:before {\n  content: "\\F0F0";\n}\n.fa-stethoscope:before {\n  content: "\\F0F1";\n}\n.fa-suitcase:before {\n  content: "\\F0F2";\n}\n.fa-bell-o:before {\n  content: "\\F0A2";\n}\n.fa-coffee:before {\n  content: "\\F0F4";\n}\n.fa-cutlery:before {\n  content: "\\F0F5";\n}\n.fa-file-text-o:before {\n  content: "\\F0F6";\n}\n.fa-building-o:before {\n  content: "\\F0F7";\n}\n.fa-hospital-o:before {\n  content: "\\F0F8";\n}\n.fa-ambulance:before {\n  content: "\\F0F9";\n}\n.fa-medkit:before {\n  content: "\\F0FA";\n}\n.fa-fighter-jet:before {\n  content: "\\F0FB";\n}\n.fa-beer:before {\n  content: "\\F0FC";\n}\n.fa-h-square:before {\n  content: "\\F0FD";\n}\n.fa-plus-square:before {\n  content: "\\F0FE";\n}\n.fa-angle-double-left:before {\n  content: "\\F100";\n}\n.fa-angle-double-right:before {\n  content: "\\F101";\n}\n.fa-angle-double-up:before {\n  content: "\\F102";\n}\n.fa-angle-double-down:before {\n  content: "\\F103";\n}\n.fa-angle-left:before {\n  content: "\\F104";\n}\n.fa-angle-right:before {\n  content: "\\F105";\n}\n.fa-angle-up:before {\n  content: "\\F106";\n}\n.fa-angle-down:before {\n  content: "\\F107";\n}\n.fa-desktop:before {\n  content: "\\F108";\n}\n.fa-laptop:before {\n  content: "\\F109";\n}\n.fa-tablet:before {\n  content: "\\F10A";\n}\n.fa-mobile-phone:before,\n.fa-mobile:before {\n  content: "\\F10B";\n}\n.fa-circle-o:before {\n  content: "\\F10C";\n}\n.fa-quote-left:before {\n  content: "\\F10D";\n}\n.fa-quote-right:before {\n  content: "\\F10E";\n}\n.fa-spinner:before {\n  content: "\\F110";\n}\n.fa-circle:before {\n  content: "\\F111";\n}\n.fa-mail-reply:before,\n.fa-reply:before {\n  content: "\\F112";\n}\n.fa-github-alt:before {\n  content: "\\F113";\n}\n.fa-folder-o:before {\n  content: "\\F114";\n}\n.fa-folder-open-o:before {\n  content: "\\F115";\n}\n.fa-smile-o:before {\n  content: "\\F118";\n}\n.fa-frown-o:before {\n  content: "\\F119";\n}\n.fa-meh-o:before {\n  content: "\\F11A";\n}\n.fa-gamepad:before {\n  content: "\\F11B";\n}\n.fa-keyboard-o:before {\n  content: "\\F11C";\n}\n.fa-flag-o:before {\n  content: "\\F11D";\n}\n.fa-flag-checkered:before {\n  content: "\\F11E";\n}\n.fa-terminal:before {\n  content: "\\F120";\n}\n.fa-code:before {\n  content: "\\F121";\n}\n.fa-mail-reply-all:before,\n.fa-reply-all:before {\n  content: "\\F122";\n}\n.fa-star-half-empty:before,\n.fa-star-half-full:before,\n.fa-star-half-o:before {\n  content: "\\F123";\n}\n.fa-location-arrow:before {\n  content: "\\F124";\n}\n.fa-crop:before {\n  content: "\\F125";\n}\n.fa-code-fork:before {\n  content: "\\F126";\n}\n.fa-unlink:before,\n.fa-chain-broken:before {\n  content: "\\F127";\n}\n.fa-question:before {\n  content: "\\F128";\n}\n.fa-info:before {\n  content: "\\F129";\n}\n.fa-exclamation:before {\n  content: "\\F12A";\n}\n.fa-superscript:before {\n  content: "\\F12B";\n}\n.fa-subscript:before {\n  content: "\\F12C";\n}\n.fa-eraser:before {\n  content: "\\F12D";\n}\n.fa-puzzle-piece:before {\n  content: "\\F12E";\n}\n.fa-microphone:before {\n  content: "\\F130";\n}\n.fa-microphone-slash:before {\n  content: "\\F131";\n}\n.fa-shield:before {\n  content: "\\F132";\n}\n.fa-calendar-o:before {\n  content: "\\F133";\n}\n.fa-fire-extinguisher:before {\n  content: "\\F134";\n}\n.fa-rocket:before {\n  content: "\\F135";\n}\n.fa-maxcdn:before {\n  content: "\\F136";\n}\n.fa-chevron-circle-left:before {\n  content: "\\F137";\n}\n.fa-chevron-circle-right:before {\n  content: "\\F138";\n}\n.fa-chevron-circle-up:before {\n  content: "\\F139";\n}\n.fa-chevron-circle-down:before {\n  content: "\\F13A";\n}\n.fa-html5:before {\n  content: "\\F13B";\n}\n.fa-css3:before {\n  content: "\\F13C";\n}\n.fa-anchor:before {\n  content: "\\F13D";\n}\n.fa-unlock-alt:before {\n  content: "\\F13E";\n}\n.fa-bullseye:before {\n  content: "\\F140";\n}\n.fa-ellipsis-h:before {\n  content: "\\F141";\n}\n.fa-ellipsis-v:before {\n  content: "\\F142";\n}\n.fa-rss-square:before {\n  content: "\\F143";\n}\n.fa-play-circle:before {\n  content: "\\F144";\n}\n.fa-ticket:before {\n  content: "\\F145";\n}\n.fa-minus-square:before {\n  content: "\\F146";\n}\n.fa-minus-square-o:before {\n  content: "\\F147";\n}\n.fa-level-up:before {\n  content: "\\F148";\n}\n.fa-level-down:before {\n  content: "\\F149";\n}\n.fa-check-square:before {\n  content: "\\F14A";\n}\n.fa-pencil-square:before {\n  content: "\\F14B";\n}\n.fa-external-link-square:before {\n  content: "\\F14C";\n}\n.fa-share-square:before {\n  content: "\\F14D";\n}\n.fa-compass:before {\n  content: "\\F14E";\n}\n.fa-toggle-down:before,\n.fa-caret-square-o-down:before {\n  content: "\\F150";\n}\n.fa-toggle-up:before,\n.fa-caret-square-o-up:before {\n  content: "\\F151";\n}\n.fa-toggle-right:before,\n.fa-caret-square-o-right:before {\n  content: "\\F152";\n}\n.fa-euro:before,\n.fa-eur:before {\n  content: "\\F153";\n}\n.fa-gbp:before {\n  content: "\\F154";\n}\n.fa-dollar:before,\n.fa-usd:before {\n  content: "\\F155";\n}\n.fa-rupee:before,\n.fa-inr:before {\n  content: "\\F156";\n}\n.fa-cny:before,\n.fa-rmb:before,\n.fa-yen:before,\n.fa-jpy:before {\n  content: "\\F157";\n}\n.fa-ruble:before,\n.fa-rouble:before,\n.fa-rub:before {\n  content: "\\F158";\n}\n.fa-won:before,\n.fa-krw:before {\n  content: "\\F159";\n}\n.fa-bitcoin:before,\n.fa-btc:before {\n  content: "\\F15A";\n}\n.fa-file:before {\n  content: "\\F15B";\n}\n.fa-file-text:before {\n  content: "\\F15C";\n}\n.fa-sort-alpha-asc:before {\n  content: "\\F15D";\n}\n.fa-sort-alpha-desc:before {\n  content: "\\F15E";\n}\n.fa-sort-amount-asc:before {\n  content: "\\F160";\n}\n.fa-sort-amount-desc:before {\n  content: "\\F161";\n}\n.fa-sort-numeric-asc:before {\n  content: "\\F162";\n}\n.fa-sort-numeric-desc:before {\n  content: "\\F163";\n}\n.fa-thumbs-up:before {\n  content: "\\F164";\n}\n.fa-thumbs-down:before {\n  content: "\\F165";\n}\n.fa-youtube-square:before {\n  content: "\\F166";\n}\n.fa-youtube:before {\n  content: "\\F167";\n}\n.fa-xing:before {\n  content: "\\F168";\n}\n.fa-xing-square:before {\n  content: "\\F169";\n}\n.fa-youtube-play:before {\n  content: "\\F16A";\n}\n.fa-dropbox:before {\n  content: "\\F16B";\n}\n.fa-stack-overflow:before {\n  content: "\\F16C";\n}\n.fa-instagram:before {\n  content: "\\F16D";\n}\n.fa-flickr:before {\n  content: "\\F16E";\n}\n.fa-adn:before {\n  content: "\\F170";\n}\n.fa-bitbucket:before {\n  content: "\\F171";\n}\n.fa-bitbucket-square:before {\n  content: "\\F172";\n}\n.fa-tumblr:before {\n  content: "\\F173";\n}\n.fa-tumblr-square:before {\n  content: "\\F174";\n}\n.fa-long-arrow-down:before {\n  content: "\\F175";\n}\n.fa-long-arrow-up:before {\n  content: "\\F176";\n}\n.fa-long-arrow-left:before {\n  content: "\\F177";\n}\n.fa-long-arrow-right:before {\n  content: "\\F178";\n}\n.fa-apple:before {\n  content: "\\F179";\n}\n.fa-windows:before {\n  content: "\\F17A";\n}\n.fa-android:before {\n  content: "\\F17B";\n}\n.fa-linux:before {\n  content: "\\F17C";\n}\n.fa-dribbble:before {\n  content: "\\F17D";\n}\n.fa-skype:before {\n  content: "\\F17E";\n}\n.fa-foursquare:before {\n  content: "\\F180";\n}\n.fa-trello:before {\n  content: "\\F181";\n}\n.fa-female:before {\n  content: "\\F182";\n}\n.fa-male:before {\n  content: "\\F183";\n}\n.fa-gittip:before,\n.fa-gratipay:before {\n  content: "\\F184";\n}\n.fa-sun-o:before {\n  content: "\\F185";\n}\n.fa-moon-o:before {\n  content: "\\F186";\n}\n.fa-archive:before {\n  content: "\\F187";\n}\n.fa-bug:before {\n  content: "\\F188";\n}\n.fa-vk:before {\n  content: "\\F189";\n}\n.fa-weibo:before {\n  content: "\\F18A";\n}\n.fa-renren:before {\n  content: "\\F18B";\n}\n.fa-pagelines:before {\n  content: "\\F18C";\n}\n.fa-stack-exchange:before {\n  content: "\\F18D";\n}\n.fa-arrow-circle-o-right:before {\n  content: "\\F18E";\n}\n.fa-arrow-circle-o-left:before {\n  content: "\\F190";\n}\n.fa-toggle-left:before,\n.fa-caret-square-o-left:before {\n  content: "\\F191";\n}\n.fa-dot-circle-o:before {\n  content: "\\F192";\n}\n.fa-wheelchair:before {\n  content: "\\F193";\n}\n.fa-vimeo-square:before {\n  content: "\\F194";\n}\n.fa-turkish-lira:before,\n.fa-try:before {\n  content: "\\F195";\n}\n.fa-plus-square-o:before {\n  content: "\\F196";\n}\n.fa-space-shuttle:before {\n  content: "\\F197";\n}\n.fa-slack:before {\n  content: "\\F198";\n}\n.fa-envelope-square:before {\n  content: "\\F199";\n}\n.fa-wordpress:before {\n  content: "\\F19A";\n}\n.fa-openid:before {\n  content: "\\F19B";\n}\n.fa-institution:before,\n.fa-bank:before,\n.fa-university:before {\n  content: "\\F19C";\n}\n.fa-mortar-board:before,\n.fa-graduation-cap:before {\n  content: "\\F19D";\n}\n.fa-yahoo:before {\n  content: "\\F19E";\n}\n.fa-google:before {\n  content: "\\F1A0";\n}\n.fa-reddit:before {\n  content: "\\F1A1";\n}\n.fa-reddit-square:before {\n  content: "\\F1A2";\n}\n.fa-stumbleupon-circle:before {\n  content: "\\F1A3";\n}\n.fa-stumbleupon:before {\n  content: "\\F1A4";\n}\n.fa-delicious:before {\n  content: "\\F1A5";\n}\n.fa-digg:before {\n  content: "\\F1A6";\n}\n.fa-pied-piper-pp:before {\n  content: "\\F1A7";\n}\n.fa-pied-piper-alt:before {\n  content: "\\F1A8";\n}\n.fa-drupal:before {\n  content: "\\F1A9";\n}\n.fa-joomla:before {\n  content: "\\F1AA";\n}\n.fa-language:before {\n  content: "\\F1AB";\n}\n.fa-fax:before {\n  content: "\\F1AC";\n}\n.fa-building:before {\n  content: "\\F1AD";\n}\n.fa-child:before {\n  content: "\\F1AE";\n}\n.fa-paw:before {\n  content: "\\F1B0";\n}\n.fa-spoon:before {\n  content: "\\F1B1";\n}\n.fa-cube:before {\n  content: "\\F1B2";\n}\n.fa-cubes:before {\n  content: "\\F1B3";\n}\n.fa-behance:before {\n  content: "\\F1B4";\n}\n.fa-behance-square:before {\n  content: "\\F1B5";\n}\n.fa-steam:before {\n  content: "\\F1B6";\n}\n.fa-steam-square:before {\n  content: "\\F1B7";\n}\n.fa-recycle:before {\n  content: "\\F1B8";\n}\n.fa-automobile:before,\n.fa-car:before {\n  content: "\\F1B9";\n}\n.fa-cab:before,\n.fa-taxi:before {\n  content: "\\F1BA";\n}\n.fa-tree:before {\n  content: "\\F1BB";\n}\n.fa-spotify:before {\n  content: "\\F1BC";\n}\n.fa-deviantart:before {\n  content: "\\F1BD";\n}\n.fa-soundcloud:before {\n  content: "\\F1BE";\n}\n.fa-database:before {\n  content: "\\F1C0";\n}\n.fa-file-pdf-o:before {\n  content: "\\F1C1";\n}\n.fa-file-word-o:before {\n  content: "\\F1C2";\n}\n.fa-file-excel-o:before {\n  content: "\\F1C3";\n}\n.fa-file-powerpoint-o:before {\n  content: "\\F1C4";\n}\n.fa-file-photo-o:before,\n.fa-file-picture-o:before,\n.fa-file-image-o:before {\n  content: "\\F1C5";\n}\n.fa-file-zip-o:before,\n.fa-file-archive-o:before {\n  content: "\\F1C6";\n}\n.fa-file-sound-o:before,\n.fa-file-audio-o:before {\n  content: "\\F1C7";\n}\n.fa-file-movie-o:before,\n.fa-file-video-o:before {\n  content: "\\F1C8";\n}\n.fa-file-code-o:before {\n  content: "\\F1C9";\n}\n.fa-vine:before {\n  content: "\\F1CA";\n}\n.fa-codepen:before {\n  content: "\\F1CB";\n}\n.fa-jsfiddle:before {\n  content: "\\F1CC";\n}\n.fa-life-bouy:before,\n.fa-life-buoy:before,\n.fa-life-saver:before,\n.fa-support:before,\n.fa-life-ring:before {\n  content: "\\F1CD";\n}\n.fa-circle-o-notch:before {\n  content: "\\F1CE";\n}\n.fa-ra:before,\n.fa-resistance:before,\n.fa-rebel:before {\n  content: "\\F1D0";\n}\n.fa-ge:before,\n.fa-empire:before {\n  content: "\\F1D1";\n}\n.fa-git-square:before {\n  content: "\\F1D2";\n}\n.fa-git:before {\n  content: "\\F1D3";\n}\n.fa-y-combinator-square:before,\n.fa-yc-square:before,\n.fa-hacker-news:before {\n  content: "\\F1D4";\n}\n.fa-tencent-weibo:before {\n  content: "\\F1D5";\n}\n.fa-qq:before {\n  content: "\\F1D6";\n}\n.fa-wechat:before,\n.fa-weixin:before {\n  content: "\\F1D7";\n}\n.fa-send:before,\n.fa-paper-plane:before {\n  content: "\\F1D8";\n}\n.fa-send-o:before,\n.fa-paper-plane-o:before {\n  content: "\\F1D9";\n}\n.fa-history:before {\n  content: "\\F1DA";\n}\n.fa-circle-thin:before {\n  content: "\\F1DB";\n}\n.fa-header:before {\n  content: "\\F1DC";\n}\n.fa-paragraph:before {\n  content: "\\F1DD";\n}\n.fa-sliders:before {\n  content: "\\F1DE";\n}\n.fa-share-alt:before {\n  content: "\\F1E0";\n}\n.fa-share-alt-square:before {\n  content: "\\F1E1";\n}\n.fa-bomb:before {\n  content: "\\F1E2";\n}\n.fa-soccer-ball-o:before,\n.fa-futbol-o:before {\n  content: "\\F1E3";\n}\n.fa-tty:before {\n  content: "\\F1E4";\n}\n.fa-binoculars:before {\n  content: "\\F1E5";\n}\n.fa-plug:before {\n  content: "\\F1E6";\n}\n.fa-slideshare:before {\n  content: "\\F1E7";\n}\n.fa-twitch:before {\n  content: "\\F1E8";\n}\n.fa-yelp:before {\n  content: "\\F1E9";\n}\n.fa-newspaper-o:before {\n  content: "\\F1EA";\n}\n.fa-wifi:before {\n  content: "\\F1EB";\n}\n.fa-calculator:before {\n  content: "\\F1EC";\n}\n.fa-paypal:before {\n  content: "\\F1ED";\n}\n.fa-google-wallet:before {\n  content: "\\F1EE";\n}\n.fa-cc-visa:before {\n  content: "\\F1F0";\n}\n.fa-cc-mastercard:before {\n  content: "\\F1F1";\n}\n.fa-cc-discover:before {\n  content: "\\F1F2";\n}\n.fa-cc-amex:before {\n  content: "\\F1F3";\n}\n.fa-cc-paypal:before {\n  content: "\\F1F4";\n}\n.fa-cc-stripe:before {\n  content: "\\F1F5";\n}\n.fa-bell-slash:before {\n  content: "\\F1F6";\n}\n.fa-bell-slash-o:before {\n  content: "\\F1F7";\n}\n.fa-trash:before {\n  content: "\\F1F8";\n}\n.fa-copyright:before {\n  content: "\\F1F9";\n}\n.fa-at:before {\n  content: "\\F1FA";\n}\n.fa-eyedropper:before {\n  content: "\\F1FB";\n}\n.fa-paint-brush:before {\n  content: "\\F1FC";\n}\n.fa-birthday-cake:before {\n  content: "\\F1FD";\n}\n.fa-area-chart:before {\n  content: "\\F1FE";\n}\n.fa-pie-chart:before {\n  content: "\\F200";\n}\n.fa-line-chart:before {\n  content: "\\F201";\n}\n.fa-lastfm:before {\n  content: "\\F202";\n}\n.fa-lastfm-square:before {\n  content: "\\F203";\n}\n.fa-toggle-off:before {\n  content: "\\F204";\n}\n.fa-toggle-on:before {\n  content: "\\F205";\n}\n.fa-bicycle:before {\n  content: "\\F206";\n}\n.fa-bus:before {\n  content: "\\F207";\n}\n.fa-ioxhost:before {\n  content: "\\F208";\n}\n.fa-angellist:before {\n  content: "\\F209";\n}\n.fa-cc:before {\n  content: "\\F20A";\n}\n.fa-shekel:before,\n.fa-sheqel:before,\n.fa-ils:before {\n  content: "\\F20B";\n}\n.fa-meanpath:before {\n  content: "\\F20C";\n}\n.fa-buysellads:before {\n  content: "\\F20D";\n}\n.fa-connectdevelop:before {\n  content: "\\F20E";\n}\n.fa-dashcube:before {\n  content: "\\F210";\n}\n.fa-forumbee:before {\n  content: "\\F211";\n}\n.fa-leanpub:before {\n  content: "\\F212";\n}\n.fa-sellsy:before {\n  content: "\\F213";\n}\n.fa-shirtsinbulk:before {\n  content: "\\F214";\n}\n.fa-simplybuilt:before {\n  content: "\\F215";\n}\n.fa-skyatlas:before {\n  content: "\\F216";\n}\n.fa-cart-plus:before {\n  content: "\\F217";\n}\n.fa-cart-arrow-down:before {\n  content: "\\F218";\n}\n.fa-diamond:before {\n  content: "\\F219";\n}\n.fa-ship:before {\n  content: "\\F21A";\n}\n.fa-user-secret:before {\n  content: "\\F21B";\n}\n.fa-motorcycle:before {\n  content: "\\F21C";\n}\n.fa-street-view:before {\n  content: "\\F21D";\n}\n.fa-heartbeat:before {\n  content: "\\F21E";\n}\n.fa-venus:before {\n  content: "\\F221";\n}\n.fa-mars:before {\n  content: "\\F222";\n}\n.fa-mercury:before {\n  content: "\\F223";\n}\n.fa-intersex:before,\n.fa-transgender:before {\n  content: "\\F224";\n}\n.fa-transgender-alt:before {\n  content: "\\F225";\n}\n.fa-venus-double:before {\n  content: "\\F226";\n}\n.fa-mars-double:before {\n  content: "\\F227";\n}\n.fa-venus-mars:before {\n  content: "\\F228";\n}\n.fa-mars-stroke:before {\n  content: "\\F229";\n}\n.fa-mars-stroke-v:before {\n  content: "\\F22A";\n}\n.fa-mars-stroke-h:before {\n  content: "\\F22B";\n}\n.fa-neuter:before {\n  content: "\\F22C";\n}\n.fa-genderless:before {\n  content: "\\F22D";\n}\n.fa-facebook-official:before {\n  content: "\\F230";\n}\n.fa-pinterest-p:before {\n  content: "\\F231";\n}\n.fa-whatsapp:before {\n  content: "\\F232";\n}\n.fa-server:before {\n  content: "\\F233";\n}\n.fa-user-plus:before {\n  content: "\\F234";\n}\n.fa-user-times:before {\n  content: "\\F235";\n}\n.fa-hotel:before,\n.fa-bed:before {\n  content: "\\F236";\n}\n.fa-viacoin:before {\n  content: "\\F237";\n}\n.fa-train:before {\n  content: "\\F238";\n}\n.fa-subway:before {\n  content: "\\F239";\n}\n.fa-medium:before {\n  content: "\\F23A";\n}\n.fa-yc:before,\n.fa-y-combinator:before {\n  content: "\\F23B";\n}\n.fa-optin-monster:before {\n  content: "\\F23C";\n}\n.fa-opencart:before {\n  content: "\\F23D";\n}\n.fa-expeditedssl:before {\n  content: "\\F23E";\n}\n.fa-battery-4:before,\n.fa-battery:before,\n.fa-battery-full:before {\n  content: "\\F240";\n}\n.fa-battery-3:before,\n.fa-battery-three-quarters:before {\n  content: "\\F241";\n}\n.fa-battery-2:before,\n.fa-battery-half:before {\n  content: "\\F242";\n}\n.fa-battery-1:before,\n.fa-battery-quarter:before {\n  content: "\\F243";\n}\n.fa-battery-0:before,\n.fa-battery-empty:before {\n  content: "\\F244";\n}\n.fa-mouse-pointer:before {\n  content: "\\F245";\n}\n.fa-i-cursor:before {\n  content: "\\F246";\n}\n.fa-object-group:before {\n  content: "\\F247";\n}\n.fa-object-ungroup:before {\n  content: "\\F248";\n}\n.fa-sticky-note:before {\n  content: "\\F249";\n}\n.fa-sticky-note-o:before {\n  content: "\\F24A";\n}\n.fa-cc-jcb:before {\n  content: "\\F24B";\n}\n.fa-cc-diners-club:before {\n  content: "\\F24C";\n}\n.fa-clone:before {\n  content: "\\F24D";\n}\n.fa-balance-scale:before {\n  content: "\\F24E";\n}\n.fa-hourglass-o:before {\n  content: "\\F250";\n}\n.fa-hourglass-1:before,\n.fa-hourglass-start:before {\n  content: "\\F251";\n}\n.fa-hourglass-2:before,\n.fa-hourglass-half:before {\n  content: "\\F252";\n}\n.fa-hourglass-3:before,\n.fa-hourglass-end:before {\n  content: "\\F253";\n}\n.fa-hourglass:before {\n  content: "\\F254";\n}\n.fa-hand-grab-o:before,\n.fa-hand-rock-o:before {\n  content: "\\F255";\n}\n.fa-hand-stop-o:before,\n.fa-hand-paper-o:before {\n  content: "\\F256";\n}\n.fa-hand-scissors-o:before {\n  content: "\\F257";\n}\n.fa-hand-lizard-o:before {\n  content: "\\F258";\n}\n.fa-hand-spock-o:before {\n  content: "\\F259";\n}\n.fa-hand-pointer-o:before {\n  content: "\\F25A";\n}\n.fa-hand-peace-o:before {\n  content: "\\F25B";\n}\n.fa-trademark:before {\n  content: "\\F25C";\n}\n.fa-registered:before {\n  content: "\\F25D";\n}\n.fa-creative-commons:before {\n  content: "\\F25E";\n}\n.fa-gg:before {\n  content: "\\F260";\n}\n.fa-gg-circle:before {\n  content: "\\F261";\n}\n.fa-tripadvisor:before {\n  content: "\\F262";\n}\n.fa-odnoklassniki:before {\n  content: "\\F263";\n}\n.fa-odnoklassniki-square:before {\n  content: "\\F264";\n}\n.fa-get-pocket:before {\n  content: "\\F265";\n}\n.fa-wikipedia-w:before {\n  content: "\\F266";\n}\n.fa-safari:before {\n  content: "\\F267";\n}\n.fa-chrome:before {\n  content: "\\F268";\n}\n.fa-firefox:before {\n  content: "\\F269";\n}\n.fa-opera:before {\n  content: "\\F26A";\n}\n.fa-internet-explorer:before {\n  content: "\\F26B";\n}\n.fa-tv:before,\n.fa-television:before {\n  content: "\\F26C";\n}\n.fa-contao:before {\n  content: "\\F26D";\n}\n.fa-500px:before {\n  content: "\\F26E";\n}\n.fa-amazon:before {\n  content: "\\F270";\n}\n.fa-calendar-plus-o:before {\n  content: "\\F271";\n}\n.fa-calendar-minus-o:before {\n  content: "\\F272";\n}\n.fa-calendar-times-o:before {\n  content: "\\F273";\n}\n.fa-calendar-check-o:before {\n  content: "\\F274";\n}\n.fa-industry:before {\n  content: "\\F275";\n}\n.fa-map-pin:before {\n  content: "\\F276";\n}\n.fa-map-signs:before {\n  content: "\\F277";\n}\n.fa-map-o:before {\n  content: "\\F278";\n}\n.fa-map:before {\n  content: "\\F279";\n}\n.fa-commenting:before {\n  content: "\\F27A";\n}\n.fa-commenting-o:before {\n  content: "\\F27B";\n}\n.fa-houzz:before {\n  content: "\\F27C";\n}\n.fa-vimeo:before {\n  content: "\\F27D";\n}\n.fa-black-tie:before {\n  content: "\\F27E";\n}\n.fa-fonticons:before {\n  content: "\\F280";\n}\n.fa-reddit-alien:before {\n  content: "\\F281";\n}\n.fa-edge:before {\n  content: "\\F282";\n}\n.fa-credit-card-alt:before {\n  content: "\\F283";\n}\n.fa-codiepie:before {\n  content: "\\F284";\n}\n.fa-modx:before {\n  content: "\\F285";\n}\n.fa-fort-awesome:before {\n  content: "\\F286";\n}\n.fa-usb:before {\n  content: "\\F287";\n}\n.fa-product-hunt:before {\n  content: "\\F288";\n}\n.fa-mixcloud:before {\n  content: "\\F289";\n}\n.fa-scribd:before {\n  content: "\\F28A";\n}\n.fa-pause-circle:before {\n  content: "\\F28B";\n}\n.fa-pause-circle-o:before {\n  content: "\\F28C";\n}\n.fa-stop-circle:before {\n  content: "\\F28D";\n}\n.fa-stop-circle-o:before {\n  content: "\\F28E";\n}\n.fa-shopping-bag:before {\n  content: "\\F290";\n}\n.fa-shopping-basket:before {\n  content: "\\F291";\n}\n.fa-hashtag:before {\n  content: "\\F292";\n}\n.fa-bluetooth:before {\n  content: "\\F293";\n}\n.fa-bluetooth-b:before {\n  content: "\\F294";\n}\n.fa-percent:before {\n  content: "\\F295";\n}\n.fa-gitlab:before {\n  content: "\\F296";\n}\n.fa-wpbeginner:before {\n  content: "\\F297";\n}\n.fa-wpforms:before {\n  content: "\\F298";\n}\n.fa-envira:before {\n  content: "\\F299";\n}\n.fa-universal-access:before {\n  content: "\\F29A";\n}\n.fa-wheelchair-alt:before {\n  content: "\\F29B";\n}\n.fa-question-circle-o:before {\n  content: "\\F29C";\n}\n.fa-blind:before {\n  content: "\\F29D";\n}\n.fa-audio-description:before {\n  content: "\\F29E";\n}\n.fa-volume-control-phone:before {\n  content: "\\F2A0";\n}\n.fa-braille:before {\n  content: "\\F2A1";\n}\n.fa-assistive-listening-systems:before {\n  content: "\\F2A2";\n}\n.fa-asl-interpreting:before,\n.fa-american-sign-language-interpreting:before {\n  content: "\\F2A3";\n}\n.fa-deafness:before,\n.fa-hard-of-hearing:before,\n.fa-deaf:before {\n  content: "\\F2A4";\n}\n.fa-glide:before {\n  content: "\\F2A5";\n}\n.fa-glide-g:before {\n  content: "\\F2A6";\n}\n.fa-signing:before,\n.fa-sign-language:before {\n  content: "\\F2A7";\n}\n.fa-low-vision:before {\n  content: "\\F2A8";\n}\n.fa-viadeo:before {\n  content: "\\F2A9";\n}\n.fa-viadeo-square:before {\n  content: "\\F2AA";\n}\n.fa-snapchat:before {\n  content: "\\F2AB";\n}\n.fa-snapchat-ghost:before {\n  content: "\\F2AC";\n}\n.fa-snapchat-square:before {\n  content: "\\F2AD";\n}\n.fa-pied-piper:before {\n  content: "\\F2AE";\n}\n.fa-first-order:before {\n  content: "\\F2B0";\n}\n.fa-yoast:before {\n  content: "\\F2B1";\n}\n.fa-themeisle:before {\n  content: "\\F2B2";\n}\n.fa-google-plus-circle:before,\n.fa-google-plus-official:before {\n  content: "\\F2B3";\n}\n.fa-fa:before,\n.fa-font-awesome:before {\n  content: "\\F2B4";\n}\n.fa-handshake-o:before {\n  content: "\\F2B5";\n}\n.fa-envelope-open:before {\n  content: "\\F2B6";\n}\n.fa-envelope-open-o:before {\n  content: "\\F2B7";\n}\n.fa-linode:before {\n  content: "\\F2B8";\n}\n.fa-address-book:before {\n  content: "\\F2B9";\n}\n.fa-address-book-o:before {\n  content: "\\F2BA";\n}\n.fa-vcard:before,\n.fa-address-card:before {\n  content: "\\F2BB";\n}\n.fa-vcard-o:before,\n.fa-address-card-o:before {\n  content: "\\F2BC";\n}\n.fa-user-circle:before {\n  content: "\\F2BD";\n}\n.fa-user-circle-o:before {\n  content: "\\F2BE";\n}\n.fa-user-o:before {\n  content: "\\F2C0";\n}\n.fa-id-badge:before {\n  content: "\\F2C1";\n}\n.fa-drivers-license:before,\n.fa-id-card:before {\n  content: "\\F2C2";\n}\n.fa-drivers-license-o:before,\n.fa-id-card-o:before {\n  content: "\\F2C3";\n}\n.fa-quora:before {\n  content: "\\F2C4";\n}\n.fa-free-code-camp:before {\n  content: "\\F2C5";\n}\n.fa-telegram:before {\n  content: "\\F2C6";\n}\n.fa-thermometer-4:before,\n.fa-thermometer:before,\n.fa-thermometer-full:before {\n  content: "\\F2C7";\n}\n.fa-thermometer-3:before,\n.fa-thermometer-three-quarters:before {\n  content: "\\F2C8";\n}\n.fa-thermometer-2:before,\n.fa-thermometer-half:before {\n  content: "\\F2C9";\n}\n.fa-thermometer-1:before,\n.fa-thermometer-quarter:before {\n  content: "\\F2CA";\n}\n.fa-thermometer-0:before,\n.fa-thermometer-empty:before {\n  content: "\\F2CB";\n}\n.fa-shower:before {\n  content: "\\F2CC";\n}\n.fa-bathtub:before,\n.fa-s15:before,\n.fa-bath:before {\n  content: "\\F2CD";\n}\n.fa-podcast:before {\n  content: "\\F2CE";\n}\n.fa-window-maximize:before {\n  content: "\\F2D0";\n}\n.fa-window-minimize:before {\n  content: "\\F2D1";\n}\n.fa-window-restore:before {\n  content: "\\F2D2";\n}\n.fa-times-rectangle:before,\n.fa-window-close:before {\n  content: "\\F2D3";\n}\n.fa-times-rectangle-o:before,\n.fa-window-close-o:before {\n  content: "\\F2D4";\n}\n.fa-bandcamp:before {\n  content: "\\F2D5";\n}\n.fa-grav:before {\n  content: "\\F2D6";\n}\n.fa-etsy:before {\n  content: "\\F2D7";\n}\n.fa-imdb:before {\n  content: "\\F2D8";\n}\n.fa-ravelry:before {\n  content: "\\F2D9";\n}\n.fa-eercast:before {\n  content: "\\F2DA";\n}\n.fa-microchip:before {\n  content: "\\F2DB";\n}\n.fa-snowflake-o:before {\n  content: "\\F2DC";\n}\n.fa-superpowers:before {\n  content: "\\F2DD";\n}\n.fa-wpexplorer:before {\n  content: "\\F2DE";\n}\n.fa-meetup:before {\n  content: "\\F2E0";\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n',""])},function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,t,n){e.exports=n.p+"674f50d287a8c48dc19ba404d20fe713.eot"},function(e,t,n){e.exports=n.p+"674f50d287a8c48dc19ba404d20fe713.eot"},function(e,t,n){e.exports=n.p+"af7ae505a9eed503f8b8e6982036873e.woff2"},function(e,t,n){e.exports=n.p+"fee66e712a8a08eef5805a46892932ad.woff"},function(e,t,n){e.exports=n.p+"b06871f281fee6b241d60582ae9369b9.ttf"},function(e,t,n){e.exports=n.p+"912ec66d7572ff821749319396470bde.svg"},function(e,t,n){var r=n(50),o=n(11),i=n(19),a=n(4)("socket.io-client");e.exports=t=c;var s=t.managers={};function c(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),c=o.source,f=o.id,u=o.path,h=s[f]&&u in s[f].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||h?(a("ignoring socket cache for %s",c),n=i(c,t)):(s[f]||(a("new io instance for %s",c),s[f]=i(c,t)),n=s[f]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=c,t.Manager=n(19),t.Socket=n(25)},function(e,t,n){var r=n(15),o=n(4)("socket.io-client:url");e.exports=function(e,t){var n=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),o("parse %s",e),n=r(e));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port,n.href=n.protocol+"://"+i+(t&&t.port===n.port?"":":"+n.port),n}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var c=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;c++;var o=t.formatters[r];if("function"==typeof o){var i=a[c];n=o.call(e,i),a.splice(c,1),c--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(10),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(53)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(9))},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var c=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;c++;var o=t.formatters[r];if("function"==typeof o){var i=a[c];n=o.call(e,i),a.splice(c,1),c--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(10),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){var r=n(16),o=n(17),i=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var a=new Array(t.length),s=0;s<t.length;s++)a[s]=e(t[s],n);return a}if("object"==typeof t&&!(t instanceof Date)){var a={};for(var c in t)a[c]=e(t[c],n);return a}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(c,f,u){if(!c)return c;if(a&&c instanceof Blob||s&&c instanceof File){n++;var h=new FileReader;h.onload=function(){u?u[f]=this.result:i=this.result,--n||t(i)},h.readAsArrayBuffer(c)}else if(r(c))for(var l=0;l<c.length;l++)e(c[l],l,c);else if("object"==typeof c&&!o(c))for(var d in c)e(c[d],d,c)}(i),n||t(i)}},function(e,t,n){"use strict";t.byteLength=function(e){var t=f(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=f(e),r=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),c=0,u=a>0?r-4:r,h=0;h<u;h+=4)t=o[e.charCodeAt(h)]<<18|o[e.charCodeAt(h+1)]<<12|o[e.charCodeAt(h+2)]<<6|o[e.charCodeAt(h+3)],s[c++]=t>>16&255,s[c++]=t>>8&255,s[c++]=255&t;2===a&&(t=o[e.charCodeAt(h)]<<2|o[e.charCodeAt(h+1)]>>4,s[c++]=255&t);1===a&&(t=o[e.charCodeAt(h)]<<10|o[e.charCodeAt(h+1)]<<4|o[e.charCodeAt(h+2)]>>2,s[c++]=t>>8&255,s[c++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(u(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,c=a.length;s<c;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function f(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,c=(1<<s)-1,f=c>>1,u=-7,h=n?o-1:0,l=n?-1:1,d=e[t+h];for(h+=l,i=d&(1<<-u)-1,d>>=-u,u+=s;u>0;i=256*i+e[t+h],h+=l,u-=8);for(a=i&(1<<-u)-1,i>>=-u,u+=r;u>0;a=256*a+e[t+h],h+=l,u-=8);if(0===i)i=1-f;else{if(i===c)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=f}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,c,f=8*i-o-1,u=(1<<f)-1,h=u>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-a))<1&&(a--,c*=2),(t+=a+h>=1?l/c:l*Math.pow(2,1-h))*c>=2&&(a++,c/=2),a+h>=u?(s=0,a=u):a+h>=1?(s=(t*c-1)*Math.pow(2,o),a+=h):(s=t*Math.pow(2,h-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=p,s/=256,o-=8);for(a=a<<o|s,f+=o;f>0;e[n+d]=255&a,d+=p,a/=256,f-=8);e[n+d-p]|=128*b}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){e.exports=n(59),e.exports.parser=n(2)},function(e,t,n){var r=n(20),o=n(1),i=n(7)("engine.io-client:socket"),a=n(24),s=n(2),c=n(15),f=n(5);function u(e,t){if(!(this instanceof u))return new u(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=c(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=c(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=f.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||null,this.key=t.key||null,this.passphrase=t.passphrase||null,this.cert=t.cert||null,this.ca=t.ca||null,this.ciphers=t.ciphers||null,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=u,u.priorWebsocketSuccess=!1,o(u.prototype),u.protocol=s.protocol,u.Socket=u,u.Transport=n(14),u.transports=n(20),u.parser=n(2),u.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=s.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},u.prototype.open=function(){var e;if(this.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},u.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},u.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),l(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',e);var a=new Error("probe error");a.transport=t.name,r.emit("upgradeError",a)}}))}function a(){n||(n=!0,l(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,a(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function c(){s("transport closed")}function f(){s("socket closed")}function h(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),a())}function l(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",c),r.removeListener("close",f),r.removeListener("upgrading",h)}u.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",c),this.once("close",f),this.once("upgrading",h),t.open()},u.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},u.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},u.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},u.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},u.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},u.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},u.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},u.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},u.prototype.write=u.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},u.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},u.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},u.prototype.onError=function(e){i("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},u.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},u.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~a(this.transports,e[n])&&t.push(e[n]);return t}},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){var r=n(13),o=n(21),i=n(1),a=n(6),s=n(7)("engine.io-client:polling-xhr");function c(){}function f(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,"undefined"!=typeof location){var t="https:"===location.protocol,n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}}function u(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}if(e.exports=f,e.exports.Request=u,a(f,o),f.prototype.supportsBinary=!0,f.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new u(e)},f.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},f.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(u.prototype),u.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new r(e),n=this;try{s("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&t.setRequestHeader(o,this.extraHeaders[o])}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=!0),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{var e=t.getResponseHeader("Content-Type");n.supportsBinary&&"application/octet-stream"===e&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout(function(){n.onError(t.status)},0))},s("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout(function(){n.onError(e)},0)}"undefined"!=typeof document&&(this.index=u.requestsCount++,u.requests[this.index]=this)},u.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},u.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},u.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},u.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete u.requests[this.index],this.xhr=null}},u.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},u.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},u.prototype.abort=function(){this.cleanup()},u.requestsCount=0,u.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",l);else if("function"==typeof addEventListener){var h="onpagehide"in self?"pagehide":"unload";addEventListener(h,l,!1)}function l(){for(var e in u.requests)u.requests.hasOwnProperty(e)&&u.requests[e].abort()}},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,o,i=String.fromCharCode;function a(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function s(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(e,t){return i(e>>t&63|128)}function f(e,t){if(0==(4294967168&e))return i(e);var n="";return 0==(4294965248&e)?n=i(e>>6&31|192):0==(4294901760&e)?(s(e,t)||(e=65533),n=i(e>>12&15|224),n+=c(e,6)):0==(4292870144&e)&&(n=i(e>>18&7|240),n+=c(e,12),n+=c(e,6)),n+=i(63&e|128)}function u(){if(o>=r)throw Error("Invalid byte index");var e=255&n[o];if(o++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function h(e){var t,i;if(o>r)throw Error("Invalid byte index");if(o==r)return!1;if(t=255&n[o],o++,0==(128&t))return t;if(192==(224&t)){if((i=(31&t)<<6|u())>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&t)){if((i=(15&t)<<12|u()<<6|u())>=2048)return s(i,e)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(i=(7&t)<<18|u()<<12|u()<<6|u())>=65536&&i<=1114111)return i;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=a(e),o=r.length,i=-1,s="";++i<o;)s+=f(r[i],n);return s},decode:function(e,t){var s=!1!==(t=t||{}).strict;n=a(e),r=n.length,o=0;for(var c,f=[];!1!==(c=h(s));)f.push(c);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=i((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=i(t);return o}(f)}}},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,c=e.length,f=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var u=new ArrayBuffer(s),h=new Uint8Array(u);for(t=0;t<c;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],h[f++]=r<<2|o>>4,h[f++]=(15&o)<<4|i>>2,h[f++]=(3&i)<<6|63&a;return u}}()},function(e,t){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){return e.map(function(e){if(e.buffer instanceof ArrayBuffer){var t=e.buffer;if(e.byteLength!==t.byteLength){var n=new Uint8Array(e.byteLength);n.set(new Uint8Array(t,e.byteOffset,e.byteLength)),t=n.buffer}return t}return e})}function s(e,t){t=t||{};var r=new n;return a(e).forEach(function(e){r.append(e)}),t.type?r.getBlob(t.type):r.getBlob()}function c(e,t){return new Blob(a(e),t||{})}"undefined"!=typeof Blob&&(s.prototype=Blob.prototype,c.prototype=Blob.prototype),e.exports=r?o?Blob:c:i?s:void 0},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var c=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;c++;var o=t.formatters[r];if("function"==typeof o){var i=a[c];n=o.call(e,i),a.splice(c,1),c--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(10),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){(function(t){var r=n(21),o=n(6);e.exports=u;var i,a=/\n/g,s=/\\n/g;function c(){}function f(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{}}function u(e){if(r.call(this,e),this.query=this.query||{},!i){var t=f();i=t.___eio=t.___eio||[]}this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){n.script&&(n.script.onerror=c)},!1)}o(u,r),u.prototype.supportsBinary=!1,u.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},u.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},u.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),c=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=c,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function f(){u(),t()}function u(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),u(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&f()}:this.iframe.onload=f}}).call(this,n(18))},function(e,t,n){(function(t){var r,o,i=n(14),a=n(2),s=n(5),c=n(6),f=n(23),u=n(7)("engine.io-client:websocket");if("undefined"==typeof self)try{o=n(72)}catch(e){}else r=self.WebSocket||self.MozWebSocket;var h=r||o;function l(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=r&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(h=o),i.call(this,e)}e.exports=l,c(l,i),l.prototype.name="websocket",l.prototype.supportsBinary=!0,l.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?t?new h(e,t):new h(e):new h(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},l.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},l.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,i=r;o<i;o++)!function(e){a.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){u("websocket closed before onclose event")}--r||s()})}(e[o]);function s(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},l.prototype.onClose=function(){i.prototype.onClose.call(this)},l.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=f()),this.supportsBinary||(e.b64=1),(e=s.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},l.prototype.check=function(){return!(!h||"__initialize"in h&&this.name===l.prototype.name)}}).call(this,n(12).Buffer)},function(e,t){},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,